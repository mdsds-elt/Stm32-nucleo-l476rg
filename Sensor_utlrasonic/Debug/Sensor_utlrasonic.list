
Sensor_utlrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000213c  08007040  08007040  00017040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800917c  0800917c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800917c  0800917c  0001917c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009184  08009184  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009184  08009184  00019184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009188  08009188  00019188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800918c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005cc  20000080  0800920c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000064c  0800920c  0002064c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ae1  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000269e  00000000  00000000  00034b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  00037230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  000384a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c2d  00000000  00000000  00039618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016011  00000000  00000000  00061245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5ead  00000000  00000000  00077256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016d103  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005384  00000000  00000000  0016d154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007028 	.word	0x08007028

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08007028 	.word	0x08007028

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b974 	b.w	8000d4c <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	4604      	mov	r4, r0
 8000a84:	468e      	mov	lr, r1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d14d      	bne.n	8000b26 <__udivmoddi4+0xaa>
 8000a8a:	428a      	cmp	r2, r1
 8000a8c:	4694      	mov	ip, r2
 8000a8e:	d969      	bls.n	8000b64 <__udivmoddi4+0xe8>
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	b152      	cbz	r2, 8000aac <__udivmoddi4+0x30>
 8000a96:	fa01 f302 	lsl.w	r3, r1, r2
 8000a9a:	f1c2 0120 	rsb	r1, r2, #32
 8000a9e:	fa20 f101 	lsr.w	r1, r0, r1
 8000aa2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aaa:	4094      	lsls	r4, r2
 8000aac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab0:	0c21      	lsrs	r1, r4, #16
 8000ab2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ab6:	fa1f f78c 	uxth.w	r7, ip
 8000aba:	fb08 e316 	mls	r3, r8, r6, lr
 8000abe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ac2:	fb06 f107 	mul.w	r1, r6, r7
 8000ac6:	4299      	cmp	r1, r3
 8000ac8:	d90a      	bls.n	8000ae0 <__udivmoddi4+0x64>
 8000aca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ace:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ad2:	f080 811f 	bcs.w	8000d14 <__udivmoddi4+0x298>
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	f240 811c 	bls.w	8000d14 <__udivmoddi4+0x298>
 8000adc:	3e02      	subs	r6, #2
 8000ade:	4463      	add	r3, ip
 8000ae0:	1a5b      	subs	r3, r3, r1
 8000ae2:	b2a4      	uxth	r4, r4
 8000ae4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae8:	fb08 3310 	mls	r3, r8, r0, r3
 8000aec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af0:	fb00 f707 	mul.w	r7, r0, r7
 8000af4:	42a7      	cmp	r7, r4
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x92>
 8000af8:	eb1c 0404 	adds.w	r4, ip, r4
 8000afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b00:	f080 810a 	bcs.w	8000d18 <__udivmoddi4+0x29c>
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	f240 8107 	bls.w	8000d18 <__udivmoddi4+0x29c>
 8000b0a:	4464      	add	r4, ip
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b12:	1be4      	subs	r4, r4, r7
 8000b14:	2600      	movs	r6, #0
 8000b16:	b11d      	cbz	r5, 8000b20 <__udivmoddi4+0xa4>
 8000b18:	40d4      	lsrs	r4, r2
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b20:	4631      	mov	r1, r6
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d909      	bls.n	8000b3e <__udivmoddi4+0xc2>
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	f000 80ef 	beq.w	8000d0e <__udivmoddi4+0x292>
 8000b30:	2600      	movs	r6, #0
 8000b32:	e9c5 0100 	strd	r0, r1, [r5]
 8000b36:	4630      	mov	r0, r6
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	fab3 f683 	clz	r6, r3
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d14a      	bne.n	8000bdc <__udivmoddi4+0x160>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xd4>
 8000b4a:	4282      	cmp	r2, r0
 8000b4c:	f200 80f9 	bhi.w	8000d42 <__udivmoddi4+0x2c6>
 8000b50:	1a84      	subs	r4, r0, r2
 8000b52:	eb61 0303 	sbc.w	r3, r1, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	469e      	mov	lr, r3
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	d0e0      	beq.n	8000b20 <__udivmoddi4+0xa4>
 8000b5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b62:	e7dd      	b.n	8000b20 <__udivmoddi4+0xa4>
 8000b64:	b902      	cbnz	r2, 8000b68 <__udivmoddi4+0xec>
 8000b66:	deff      	udf	#255	; 0xff
 8000b68:	fab2 f282 	clz	r2, r2
 8000b6c:	2a00      	cmp	r2, #0
 8000b6e:	f040 8092 	bne.w	8000c96 <__udivmoddi4+0x21a>
 8000b72:	eba1 010c 	sub.w	r1, r1, ip
 8000b76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7a:	fa1f fe8c 	uxth.w	lr, ip
 8000b7e:	2601      	movs	r6, #1
 8000b80:	0c20      	lsrs	r0, r4, #16
 8000b82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b86:	fb07 1113 	mls	r1, r7, r3, r1
 8000b8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b8e:	fb0e f003 	mul.w	r0, lr, r3
 8000b92:	4288      	cmp	r0, r1
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x12c>
 8000b96:	eb1c 0101 	adds.w	r1, ip, r1
 8000b9a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x12a>
 8000ba0:	4288      	cmp	r0, r1
 8000ba2:	f200 80cb 	bhi.w	8000d3c <__udivmoddi4+0x2c0>
 8000ba6:	4643      	mov	r3, r8
 8000ba8:	1a09      	subs	r1, r1, r0
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bb4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bbc:	45a6      	cmp	lr, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x156>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc8:	d202      	bcs.n	8000bd0 <__udivmoddi4+0x154>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f200 80bb 	bhi.w	8000d46 <__udivmoddi4+0x2ca>
 8000bd0:	4608      	mov	r0, r1
 8000bd2:	eba4 040e 	sub.w	r4, r4, lr
 8000bd6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bda:	e79c      	b.n	8000b16 <__udivmoddi4+0x9a>
 8000bdc:	f1c6 0720 	rsb	r7, r6, #32
 8000be0:	40b3      	lsls	r3, r6
 8000be2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000be6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bea:	fa20 f407 	lsr.w	r4, r0, r7
 8000bee:	fa01 f306 	lsl.w	r3, r1, r6
 8000bf2:	431c      	orrs	r4, r3
 8000bf4:	40f9      	lsrs	r1, r7
 8000bf6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bfa:	fa00 f306 	lsl.w	r3, r0, r6
 8000bfe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c02:	0c20      	lsrs	r0, r4, #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fb09 1118 	mls	r1, r9, r8, r1
 8000c0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c10:	fb08 f00e 	mul.w	r0, r8, lr
 8000c14:	4288      	cmp	r0, r1
 8000c16:	fa02 f206 	lsl.w	r2, r2, r6
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b8>
 8000c1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c24:	f080 8088 	bcs.w	8000d38 <__udivmoddi4+0x2bc>
 8000c28:	4288      	cmp	r0, r1
 8000c2a:	f240 8085 	bls.w	8000d38 <__udivmoddi4+0x2bc>
 8000c2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c32:	4461      	add	r1, ip
 8000c34:	1a09      	subs	r1, r1, r0
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c48:	458e      	cmp	lr, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1e2>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c54:	d26c      	bcs.n	8000d30 <__udivmoddi4+0x2b4>
 8000c56:	458e      	cmp	lr, r1
 8000c58:	d96a      	bls.n	8000d30 <__udivmoddi4+0x2b4>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c62:	fba0 9402 	umull	r9, r4, r0, r2
 8000c66:	eba1 010e 	sub.w	r1, r1, lr
 8000c6a:	42a1      	cmp	r1, r4
 8000c6c:	46c8      	mov	r8, r9
 8000c6e:	46a6      	mov	lr, r4
 8000c70:	d356      	bcc.n	8000d20 <__udivmoddi4+0x2a4>
 8000c72:	d053      	beq.n	8000d1c <__udivmoddi4+0x2a0>
 8000c74:	b15d      	cbz	r5, 8000c8e <__udivmoddi4+0x212>
 8000c76:	ebb3 0208 	subs.w	r2, r3, r8
 8000c7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c82:	fa22 f306 	lsr.w	r3, r2, r6
 8000c86:	40f1      	lsrs	r1, r6
 8000c88:	431f      	orrs	r7, r3
 8000c8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c8e:	2600      	movs	r6, #0
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	f1c2 0320 	rsb	r3, r2, #32
 8000c9a:	40d8      	lsrs	r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ca4:	4091      	lsls	r1, r2
 8000ca6:	4301      	orrs	r1, r0
 8000ca8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cac:	fa1f fe8c 	uxth.w	lr, ip
 8000cb0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cb4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cb8:	0c0b      	lsrs	r3, r1, #16
 8000cba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cbe:	fb00 f60e 	mul.w	r6, r0, lr
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x260>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cd2:	d22f      	bcs.n	8000d34 <__udivmoddi4+0x2b8>
 8000cd4:	429e      	cmp	r6, r3
 8000cd6:	d92d      	bls.n	8000d34 <__udivmoddi4+0x2b8>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	b289      	uxth	r1, r1
 8000ce0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ce4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ce8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cec:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x28a>
 8000cf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cfc:	d216      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d914      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000d02:	3e02      	subs	r6, #2
 8000d04:	4461      	add	r1, ip
 8000d06:	1ac9      	subs	r1, r1, r3
 8000d08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d0c:	e738      	b.n	8000b80 <__udivmoddi4+0x104>
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e705      	b.n	8000b20 <__udivmoddi4+0xa4>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e3      	b.n	8000ae0 <__udivmoddi4+0x64>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6f8      	b.n	8000b0e <__udivmoddi4+0x92>
 8000d1c:	454b      	cmp	r3, r9
 8000d1e:	d2a9      	bcs.n	8000c74 <__udivmoddi4+0x1f8>
 8000d20:	ebb9 0802 	subs.w	r8, r9, r2
 8000d24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7a3      	b.n	8000c74 <__udivmoddi4+0x1f8>
 8000d2c:	4646      	mov	r6, r8
 8000d2e:	e7ea      	b.n	8000d06 <__udivmoddi4+0x28a>
 8000d30:	4620      	mov	r0, r4
 8000d32:	e794      	b.n	8000c5e <__udivmoddi4+0x1e2>
 8000d34:	4640      	mov	r0, r8
 8000d36:	e7d1      	b.n	8000cdc <__udivmoddi4+0x260>
 8000d38:	46d0      	mov	r8, sl
 8000d3a:	e77b      	b.n	8000c34 <__udivmoddi4+0x1b8>
 8000d3c:	3b02      	subs	r3, #2
 8000d3e:	4461      	add	r1, ip
 8000d40:	e732      	b.n	8000ba8 <__udivmoddi4+0x12c>
 8000d42:	4630      	mov	r0, r6
 8000d44:	e709      	b.n	8000b5a <__udivmoddi4+0xde>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e742      	b.n	8000bd2 <__udivmoddi4+0x156>

08000d4c <__aeabi_idiv0>:
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b598      	push	{r3, r4, r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d54:	f001 f800 	bl	8001d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d58:	f000 f908 	bl	8000f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5c:	f000 fa98 	bl	8001290 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d60:	f000 fa66 	bl	8001230 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000d64:	f000 f954 	bl	8001010 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000d68:	f000 f992 	bl	8001090 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d6c:	f000 f9ea 	bl	8001144 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000d70:	4871      	ldr	r0, [pc, #452]	; (8000f38 <main+0x1e8>)
 8000d72:	f003 fc17 	bl	80045a4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000d76:	2104      	movs	r1, #4
 8000d78:	4870      	ldr	r0, [pc, #448]	; (8000f3c <main+0x1ec>)
 8000d7a:	f003 fcdd 	bl	8004738 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d88:	f001 fb5a 	bl	8002440 <HAL_GPIO_WritePin>
  SSD1306_Init();
 8000d8c:	f000 fb02 	bl	8001394 <SSD1306_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000d90:	2201      	movs	r2, #1
 8000d92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9a:	f001 fb51 	bl	8002440 <HAL_GPIO_WritePin>
	    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000d9e:	4b66      	ldr	r3, [pc, #408]	; (8000f38 <main+0x1e8>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2200      	movs	r2, #0
 8000da4:	625a      	str	r2, [r3, #36]	; 0x24
	    while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000da6:	bf00      	nop
 8000da8:	4b63      	ldr	r3, [pc, #396]	; (8000f38 <main+0x1e8>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dae:	2b09      	cmp	r3, #9
 8000db0:	d9fa      	bls.n	8000da8 <main+0x58>
	    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000db2:	2200      	movs	r2, #0
 8000db4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbc:	f001 fb40 	bl	8002440 <HAL_GPIO_WritePin>

	    pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000dc0:	f001 f83a 	bl	8001e38 <HAL_GetTick>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4a5e      	ldr	r2, [pc, #376]	; (8000f40 <main+0x1f0>)
 8000dc8:	6013      	str	r3, [r2, #0]
	    // wait for the echo pin to go high
	    while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000dca:	bf00      	nop
 8000dcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd4:	f001 fb1c 	bl	8002410 <HAL_GPIO_ReadPin>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d108      	bne.n	8000df0 <main+0xa0>
 8000dde:	4b58      	ldr	r3, [pc, #352]	; (8000f40 <main+0x1f0>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f103 040a 	add.w	r4, r3, #10
 8000de6:	f001 f827 	bl	8001e38 <HAL_GetTick>
 8000dea:	4603      	mov	r3, r0
 8000dec:	429c      	cmp	r4, r3
 8000dee:	d8ed      	bhi.n	8000dcc <main+0x7c>
	    Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000df0:	4b51      	ldr	r3, [pc, #324]	; (8000f38 <main+0x1e8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	4a53      	ldr	r2, [pc, #332]	; (8000f44 <main+0x1f4>)
 8000df8:	6013      	str	r3, [r2, #0]

	    pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000dfa:	f001 f81d 	bl	8001e38 <HAL_GetTick>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a4f      	ldr	r2, [pc, #316]	; (8000f40 <main+0x1f0>)
 8000e02:	6013      	str	r3, [r2, #0]
	    // wait for the echo pin to go low
	    while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8000e04:	bf00      	nop
 8000e06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0e:	f001 faff 	bl	8002410 <HAL_GPIO_ReadPin>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d008      	beq.n	8000e2a <main+0xda>
 8000e18:	4b49      	ldr	r3, [pc, #292]	; (8000f40 <main+0x1f0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000e20:	f001 f80a 	bl	8001e38 <HAL_GetTick>
 8000e24:	4603      	mov	r3, r0
 8000e26:	429c      	cmp	r4, r3
 8000e28:	d8ed      	bhi.n	8000e06 <main+0xb6>
	    Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000e2a:	4b43      	ldr	r3, [pc, #268]	; (8000f38 <main+0x1e8>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e30:	4a45      	ldr	r2, [pc, #276]	; (8000f48 <main+0x1f8>)
 8000e32:	6013      	str	r3, [r2, #0]

	    Distance = (Value2-Value1)* 0.034/2;
 8000e34:	4b44      	ldr	r3, [pc, #272]	; (8000f48 <main+0x1f8>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b42      	ldr	r3, [pc, #264]	; (8000f44 <main+0x1f4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fb58 	bl	80004f4 <__aeabi_ui2d>
 8000e44:	a33a      	add	r3, pc, #232	; (adr r3, 8000f30 <main+0x1e0>)
 8000e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4a:	f7ff fbcd 	bl	80005e8 <__aeabi_dmul>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	460b      	mov	r3, r1
 8000e52:	4610      	mov	r0, r2
 8000e54:	4619      	mov	r1, r3
 8000e56:	f04f 0200 	mov.w	r2, #0
 8000e5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e5e:	f7ff fced 	bl	800083c <__aeabi_ddiv>
 8000e62:	4602      	mov	r2, r0
 8000e64:	460b      	mov	r3, r1
 8000e66:	4610      	mov	r0, r2
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f7ff fdcf 	bl	8000a0c <__aeabi_d2uiz>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	4b36      	ldr	r3, [pc, #216]	; (8000f4c <main+0x1fc>)
 8000e74:	801a      	strh	r2, [r3, #0]


		SSD1306_GotoXY(0, 0);
 8000e76:	2100      	movs	r1, #0
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f000 fbf5 	bl	8001668 <SSD1306_GotoXY>
		SSD1306_Puts("Distancia:", &Font_11x18, 1);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4933      	ldr	r1, [pc, #204]	; (8000f50 <main+0x200>)
 8000e82:	4834      	ldr	r0, [pc, #208]	; (8000f54 <main+0x204>)
 8000e84:	f000 fc86 	bl	8001794 <SSD1306_Puts>
		sprintf(strCopy, "%d    ", Distance);
 8000e88:	4b30      	ldr	r3, [pc, #192]	; (8000f4c <main+0x1fc>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4932      	ldr	r1, [pc, #200]	; (8000f58 <main+0x208>)
 8000e90:	4832      	ldr	r0, [pc, #200]	; (8000f5c <main+0x20c>)
 8000e92:	f005 fc5b 	bl	800674c <siprintf>
		SSD1306_GotoXY(0, 30);
 8000e96:	211e      	movs	r1, #30
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f000 fbe5 	bl	8001668 <SSD1306_GotoXY>
		SSD1306_Puts(strCopy, &Font_16x26, 1);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	492f      	ldr	r1, [pc, #188]	; (8000f60 <main+0x210>)
 8000ea2:	482e      	ldr	r0, [pc, #184]	; (8000f5c <main+0x20c>)
 8000ea4:	f000 fc76 	bl	8001794 <SSD1306_Puts>
		//SSD1306_DrawCircle(80, 40, 2, 1);  //To print degree only
		SSD1306_GotoXY(55, 40);  //To print celcius
 8000ea8:	2128      	movs	r1, #40	; 0x28
 8000eaa:	2037      	movs	r0, #55	; 0x37
 8000eac:	f000 fbdc 	bl	8001668 <SSD1306_GotoXY>
		SSD1306_Puts("Cm", &Font_11x18, 1);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4927      	ldr	r1, [pc, #156]	; (8000f50 <main+0x200>)
 8000eb4:	482b      	ldr	r0, [pc, #172]	; (8000f64 <main+0x214>)
 8000eb6:	f000 fc6d 	bl	8001794 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000eba:	f000 fb2f 	bl	800151c <SSD1306_UpdateScreen>
		HAL_Delay(50);
 8000ebe:	2032      	movs	r0, #50	; 0x32
 8000ec0:	f000 ffc6 	bl	8001e50 <HAL_Delay>


		if(Distance < 5){
 8000ec4:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <main+0x1fc>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	2b04      	cmp	r3, #4
 8000eca:	d81c      	bhi.n	8000f06 <main+0x1b6>

			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, 1);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2108      	movs	r1, #8
 8000ed0:	4825      	ldr	r0, [pc, #148]	; (8000f68 <main+0x218>)
 8000ed2:	f001 fab5 	bl	8002440 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	2140      	movs	r1, #64	; 0x40
 8000eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ede:	f001 faaf 	bl	8002440 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2110      	movs	r1, #16
 8000ee6:	4820      	ldr	r0, [pc, #128]	; (8000f68 <main+0x218>)
 8000ee8:	f001 faaa 	bl	8002440 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000eec:	200a      	movs	r0, #10
 8000eee:	f000 ffaf 	bl	8001e50 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2140      	movs	r1, #64	; 0x40
 8000ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efa:	f001 faa1 	bl	8002440 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000efe:	200a      	movs	r0, #10
 8000f00:	f000 ffa6 	bl	8001e50 <HAL_Delay>
 8000f04:	e744      	b.n	8000d90 <main+0x40>
		}else{
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2108      	movs	r1, #8
 8000f0a:	4817      	ldr	r0, [pc, #92]	; (8000f68 <main+0x218>)
 8000f0c:	f001 fa98 	bl	8002440 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2140      	movs	r1, #64	; 0x40
 8000f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f18:	f001 fa92 	bl	8002440 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 1);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2110      	movs	r1, #16
 8000f20:	4811      	ldr	r0, [pc, #68]	; (8000f68 <main+0x218>)
 8000f22:	f001 fa8d 	bl	8002440 <HAL_GPIO_WritePin>
		    HAL_Delay (500);
 8000f26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f2a:	f000 ff91 	bl	8001e50 <HAL_Delay>
	    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000f2e:	e72f      	b.n	8000d90 <main+0x40>
 8000f30:	b020c49c 	.word	0xb020c49c
 8000f34:	3fa16872 	.word	0x3fa16872
 8000f38:	200000f0 	.word	0x200000f0
 8000f3c:	2000013c 	.word	0x2000013c
 8000f40:	2000020c 	.word	0x2000020c
 8000f44:	20000210 	.word	0x20000210
 8000f48:	20000214 	.word	0x20000214
 8000f4c:	20000218 	.word	0x20000218
 8000f50:	20000000 	.word	0x20000000
 8000f54:	08007040 	.word	0x08007040
 8000f58:	0800704c 	.word	0x0800704c
 8000f5c:	2000021c 	.word	0x2000021c
 8000f60:	20000008 	.word	0x20000008
 8000f64:	08007054 	.word	0x08007054
 8000f68:	48000800 	.word	0x48000800

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b096      	sub	sp, #88	; 0x58
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	2244      	movs	r2, #68	; 0x44
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f005 fbde 	bl	800673c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	463b      	mov	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f8e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f92:	f001 ff9d 	bl	8002ed0 <HAL_PWREx_ControlVoltageScaling>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f9c:	f000 f9f4 	bl	8001388 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000faa:	2310      	movs	r3, #16
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000fba:	230a      	movs	r3, #10
 8000fbc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fbe:	2307      	movs	r3, #7
 8000fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 ffd4 	bl	8002f7c <HAL_RCC_OscConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000fda:	f000 f9d5 	bl	8001388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fde:	230f      	movs	r3, #15
 8000fe0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f002 fb9c 	bl	8003734 <HAL_RCC_ClockConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001002:	f000 f9c1 	bl	8001388 <Error_Handler>
  }
}
 8001006:	bf00      	nop
 8001008:	3758      	adds	r7, #88	; 0x58
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <MX_I2C1_Init+0x74>)
 8001016:	4a1c      	ldr	r2, [pc, #112]	; (8001088 <MX_I2C1_Init+0x78>)
 8001018:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_I2C1_Init+0x74>)
 800101c:	4a1b      	ldr	r2, [pc, #108]	; (800108c <MX_I2C1_Init+0x7c>)
 800101e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001020:	4b18      	ldr	r3, [pc, #96]	; (8001084 <MX_I2C1_Init+0x74>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_I2C1_Init+0x74>)
 8001028:	2201      	movs	r2, #1
 800102a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <MX_I2C1_Init+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_I2C1_Init+0x74>)
 8001034:	2200      	movs	r2, #0
 8001036:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <MX_I2C1_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_I2C1_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_I2C1_Init+0x74>)
 8001046:	2200      	movs	r2, #0
 8001048:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800104a:	480e      	ldr	r0, [pc, #56]	; (8001084 <MX_I2C1_Init+0x74>)
 800104c:	f001 fa10 	bl	8002470 <HAL_I2C_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001056:	f000 f997 	bl	8001388 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800105a:	2100      	movs	r1, #0
 800105c:	4809      	ldr	r0, [pc, #36]	; (8001084 <MX_I2C1_Init+0x74>)
 800105e:	f001 fe91 	bl	8002d84 <HAL_I2CEx_ConfigAnalogFilter>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001068:	f000 f98e 	bl	8001388 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800106c:	2100      	movs	r1, #0
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_I2C1_Init+0x74>)
 8001070:	f001 fed3 	bl	8002e1a <HAL_I2CEx_ConfigDigitalFilter>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800107a:	f000 f985 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000009c 	.word	0x2000009c
 8001088:	40005400 	.word	0x40005400
 800108c:	00702991 	.word	0x00702991

08001090 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010ae:	4b23      	ldr	r3, [pc, #140]	; (800113c <MX_TIM1_Init+0xac>)
 80010b0:	4a23      	ldr	r2, [pc, #140]	; (8001140 <MX_TIM1_Init+0xb0>)
 80010b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 80010b4:	4b21      	ldr	r3, [pc, #132]	; (800113c <MX_TIM1_Init+0xac>)
 80010b6:	224f      	movs	r2, #79	; 0x4f
 80010b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ba:	4b20      	ldr	r3, [pc, #128]	; (800113c <MX_TIM1_Init+0xac>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80010c0:	4b1e      	ldr	r3, [pc, #120]	; (800113c <MX_TIM1_Init+0xac>)
 80010c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80010c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c8:	4b1c      	ldr	r3, [pc, #112]	; (800113c <MX_TIM1_Init+0xac>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010ce:	4b1b      	ldr	r3, [pc, #108]	; (800113c <MX_TIM1_Init+0xac>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d4:	4b19      	ldr	r3, [pc, #100]	; (800113c <MX_TIM1_Init+0xac>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80010da:	4818      	ldr	r0, [pc, #96]	; (800113c <MX_TIM1_Init+0xac>)
 80010dc:	f003 fc32 	bl	8004944 <HAL_TIM_IC_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80010e6:	f000 f94f 	bl	8001388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	480f      	ldr	r0, [pc, #60]	; (800113c <MX_TIM1_Init+0xac>)
 80010fe:	f004 fd97 	bl	8005c30 <HAL_TIMEx_MasterConfigSynchronization>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001108:	f000 f93e 	bl	8001388 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800110c:	2300      	movs	r3, #0
 800110e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001110:	2301      	movs	r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2200      	movs	r2, #0
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	; (800113c <MX_TIM1_Init+0xac>)
 8001124:	f003 fd84 	bl	8004c30 <HAL_TIM_IC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800112e:	f000 f92b 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	3720      	adds	r7, #32
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200000f0 	.word	0x200000f0
 8001140:	40012c00 	.word	0x40012c00

08001144 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08e      	sub	sp, #56	; 0x38
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001164:	463b      	mov	r3, r7
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]
 8001172:	615a      	str	r2, [r3, #20]
 8001174:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001176:	4b2d      	ldr	r3, [pc, #180]	; (800122c <MX_TIM2_Init+0xe8>)
 8001178:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800117c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 800117e:	4b2b      	ldr	r3, [pc, #172]	; (800122c <MX_TIM2_Init+0xe8>)
 8001180:	224f      	movs	r2, #79	; 0x4f
 8001182:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001184:	4b29      	ldr	r3, [pc, #164]	; (800122c <MX_TIM2_Init+0xe8>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 800118a:	4b28      	ldr	r3, [pc, #160]	; (800122c <MX_TIM2_Init+0xe8>)
 800118c:	2214      	movs	r2, #20
 800118e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001190:	4b26      	ldr	r3, [pc, #152]	; (800122c <MX_TIM2_Init+0xe8>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001196:	4b25      	ldr	r3, [pc, #148]	; (800122c <MX_TIM2_Init+0xe8>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800119c:	4823      	ldr	r0, [pc, #140]	; (800122c <MX_TIM2_Init+0xe8>)
 800119e:	f003 f9a9 	bl	80044f4 <HAL_TIM_Base_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80011a8:	f000 f8ee 	bl	8001388 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b6:	4619      	mov	r1, r3
 80011b8:	481c      	ldr	r0, [pc, #112]	; (800122c <MX_TIM2_Init+0xe8>)
 80011ba:	f003 fee9 	bl	8004f90 <HAL_TIM_ConfigClockSource>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80011c4:	f000 f8e0 	bl	8001388 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011c8:	4818      	ldr	r0, [pc, #96]	; (800122c <MX_TIM2_Init+0xe8>)
 80011ca:	f003 fa53 	bl	8004674 <HAL_TIM_PWM_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80011d4:	f000 f8d8 	bl	8001388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	4619      	mov	r1, r3
 80011e6:	4811      	ldr	r0, [pc, #68]	; (800122c <MX_TIM2_Init+0xe8>)
 80011e8:	f004 fd22 	bl	8005c30 <HAL_TIMEx_MasterConfigSynchronization>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80011f2:	f000 f8c9 	bl	8001388 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f6:	2360      	movs	r3, #96	; 0x60
 80011f8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001206:	463b      	mov	r3, r7
 8001208:	2204      	movs	r2, #4
 800120a:	4619      	mov	r1, r3
 800120c:	4807      	ldr	r0, [pc, #28]	; (800122c <MX_TIM2_Init+0xe8>)
 800120e:	f003 fdab 	bl	8004d68 <HAL_TIM_PWM_ConfigChannel>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001218:	f000 f8b6 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800121c:	4803      	ldr	r0, [pc, #12]	; (800122c <MX_TIM2_Init+0xe8>)
 800121e:	f000 fc65 	bl	8001aec <HAL_TIM_MspPostInit>


}
 8001222:	bf00      	nop
 8001224:	3738      	adds	r7, #56	; 0x38
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	2000013c 	.word	0x2000013c

08001230 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <MX_USART2_UART_Init+0x58>)
 8001236:	4a15      	ldr	r2, [pc, #84]	; (800128c <MX_USART2_UART_Init+0x5c>)
 8001238:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <MX_USART2_UART_Init+0x58>)
 800123c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001240:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MX_USART2_UART_Init+0x58>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <MX_USART2_UART_Init+0x58>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MX_USART2_UART_Init+0x58>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <MX_USART2_UART_Init+0x58>)
 8001256:	220c      	movs	r2, #12
 8001258:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <MX_USART2_UART_Init+0x58>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <MX_USART2_UART_Init+0x58>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <MX_USART2_UART_Init+0x58>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <MX_USART2_UART_Init+0x58>)
 800126e:	2200      	movs	r2, #0
 8001270:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_USART2_UART_Init+0x58>)
 8001274:	f004 fd82 	bl	8005d7c <HAL_UART_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800127e:	f000 f883 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000188 	.word	0x20000188
 800128c:	40004400 	.word	0x40004400

08001290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a6:	4b36      	ldr	r3, [pc, #216]	; (8001380 <MX_GPIO_Init+0xf0>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	4a35      	ldr	r2, [pc, #212]	; (8001380 <MX_GPIO_Init+0xf0>)
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b2:	4b33      	ldr	r3, [pc, #204]	; (8001380 <MX_GPIO_Init+0xf0>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012be:	4b30      	ldr	r3, [pc, #192]	; (8001380 <MX_GPIO_Init+0xf0>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	4a2f      	ldr	r2, [pc, #188]	; (8001380 <MX_GPIO_Init+0xf0>)
 80012c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ca:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <MX_GPIO_Init+0xf0>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	4b2a      	ldr	r3, [pc, #168]	; (8001380 <MX_GPIO_Init+0xf0>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	4a29      	ldr	r2, [pc, #164]	; (8001380 <MX_GPIO_Init+0xf0>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e2:	4b27      	ldr	r3, [pc, #156]	; (8001380 <MX_GPIO_Init+0xf0>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ee:	4b24      	ldr	r3, [pc, #144]	; (8001380 <MX_GPIO_Init+0xf0>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	4a23      	ldr	r2, [pc, #140]	; (8001380 <MX_GPIO_Init+0xf0>)
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fa:	4b21      	ldr	r3, [pc, #132]	; (8001380 <MX_GPIO_Init+0xf0>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Buzzer_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	2118      	movs	r1, #24
 800130a:	481e      	ldr	r0, [pc, #120]	; (8001384 <MX_GPIO_Init+0xf4>)
 800130c:	f001 f898 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 7118 	mov.w	r1, #608	; 0x260
 8001316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131a:	f001 f891 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800131e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001324:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	4813      	ldr	r0, [pc, #76]	; (8001384 <MX_GPIO_Init+0xf4>)
 8001336:	f000 fec1 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Pin PC4 */
  GPIO_InitStruct.Pin = Buzzer_Pin|GPIO_PIN_4;
 800133a:	2318      	movs	r3, #24
 800133c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133e:	2301      	movs	r3, #1
 8001340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	4619      	mov	r1, r3
 8001350:	480c      	ldr	r0, [pc, #48]	; (8001384 <MX_GPIO_Init+0xf4>)
 8001352:	f000 feb3 	bl	80020bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_9;
 8001356:	f44f 7318 	mov.w	r3, #608	; 0x260
 800135a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4619      	mov	r1, r3
 800136e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001372:	f000 fea3 	bl	80020bc <HAL_GPIO_Init>

}
 8001376:	bf00      	nop
 8001378:	3728      	adds	r7, #40	; 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40021000 	.word	0x40021000
 8001384:	48000800 	.word	0x48000800

08001388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800138c:	b672      	cpsid	i
}
 800138e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001390:	e7fe      	b.n	8001390 <Error_Handler+0x8>
	...

08001394 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800139a:	f000 fa21 	bl	80017e0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800139e:	f644 6320 	movw	r3, #20000	; 0x4e20
 80013a2:	2201      	movs	r2, #1
 80013a4:	2178      	movs	r1, #120	; 0x78
 80013a6:	485b      	ldr	r0, [pc, #364]	; (8001514 <SSD1306_Init+0x180>)
 80013a8:	f001 f9e6 	bl	8002778 <HAL_I2C_IsDeviceReady>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e0a9      	b.n	800150a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80013b6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80013ba:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013bc:	e002      	b.n	80013c4 <SSD1306_Init+0x30>
		p--;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3b01      	subs	r3, #1
 80013c2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f9      	bne.n	80013be <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80013ca:	22ae      	movs	r2, #174	; 0xae
 80013cc:	2100      	movs	r1, #0
 80013ce:	2078      	movs	r0, #120	; 0x78
 80013d0:	f000 fa82 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80013d4:	2220      	movs	r2, #32
 80013d6:	2100      	movs	r1, #0
 80013d8:	2078      	movs	r0, #120	; 0x78
 80013da:	f000 fa7d 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80013de:	2210      	movs	r2, #16
 80013e0:	2100      	movs	r1, #0
 80013e2:	2078      	movs	r0, #120	; 0x78
 80013e4:	f000 fa78 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80013e8:	22b0      	movs	r2, #176	; 0xb0
 80013ea:	2100      	movs	r1, #0
 80013ec:	2078      	movs	r0, #120	; 0x78
 80013ee:	f000 fa73 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80013f2:	22c8      	movs	r2, #200	; 0xc8
 80013f4:	2100      	movs	r1, #0
 80013f6:	2078      	movs	r0, #120	; 0x78
 80013f8:	f000 fa6e 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80013fc:	2200      	movs	r2, #0
 80013fe:	2100      	movs	r1, #0
 8001400:	2078      	movs	r0, #120	; 0x78
 8001402:	f000 fa69 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001406:	2210      	movs	r2, #16
 8001408:	2100      	movs	r1, #0
 800140a:	2078      	movs	r0, #120	; 0x78
 800140c:	f000 fa64 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001410:	2240      	movs	r2, #64	; 0x40
 8001412:	2100      	movs	r1, #0
 8001414:	2078      	movs	r0, #120	; 0x78
 8001416:	f000 fa5f 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800141a:	2281      	movs	r2, #129	; 0x81
 800141c:	2100      	movs	r1, #0
 800141e:	2078      	movs	r0, #120	; 0x78
 8001420:	f000 fa5a 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001424:	22ff      	movs	r2, #255	; 0xff
 8001426:	2100      	movs	r1, #0
 8001428:	2078      	movs	r0, #120	; 0x78
 800142a:	f000 fa55 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800142e:	22a1      	movs	r2, #161	; 0xa1
 8001430:	2100      	movs	r1, #0
 8001432:	2078      	movs	r0, #120	; 0x78
 8001434:	f000 fa50 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001438:	22a6      	movs	r2, #166	; 0xa6
 800143a:	2100      	movs	r1, #0
 800143c:	2078      	movs	r0, #120	; 0x78
 800143e:	f000 fa4b 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001442:	22a8      	movs	r2, #168	; 0xa8
 8001444:	2100      	movs	r1, #0
 8001446:	2078      	movs	r0, #120	; 0x78
 8001448:	f000 fa46 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800144c:	223f      	movs	r2, #63	; 0x3f
 800144e:	2100      	movs	r1, #0
 8001450:	2078      	movs	r0, #120	; 0x78
 8001452:	f000 fa41 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001456:	22a4      	movs	r2, #164	; 0xa4
 8001458:	2100      	movs	r1, #0
 800145a:	2078      	movs	r0, #120	; 0x78
 800145c:	f000 fa3c 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001460:	22d3      	movs	r2, #211	; 0xd3
 8001462:	2100      	movs	r1, #0
 8001464:	2078      	movs	r0, #120	; 0x78
 8001466:	f000 fa37 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	2078      	movs	r0, #120	; 0x78
 8001470:	f000 fa32 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001474:	22d5      	movs	r2, #213	; 0xd5
 8001476:	2100      	movs	r1, #0
 8001478:	2078      	movs	r0, #120	; 0x78
 800147a:	f000 fa2d 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800147e:	22f0      	movs	r2, #240	; 0xf0
 8001480:	2100      	movs	r1, #0
 8001482:	2078      	movs	r0, #120	; 0x78
 8001484:	f000 fa28 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001488:	22d9      	movs	r2, #217	; 0xd9
 800148a:	2100      	movs	r1, #0
 800148c:	2078      	movs	r0, #120	; 0x78
 800148e:	f000 fa23 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001492:	2222      	movs	r2, #34	; 0x22
 8001494:	2100      	movs	r1, #0
 8001496:	2078      	movs	r0, #120	; 0x78
 8001498:	f000 fa1e 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800149c:	22da      	movs	r2, #218	; 0xda
 800149e:	2100      	movs	r1, #0
 80014a0:	2078      	movs	r0, #120	; 0x78
 80014a2:	f000 fa19 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80014a6:	2212      	movs	r2, #18
 80014a8:	2100      	movs	r1, #0
 80014aa:	2078      	movs	r0, #120	; 0x78
 80014ac:	f000 fa14 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80014b0:	22db      	movs	r2, #219	; 0xdb
 80014b2:	2100      	movs	r1, #0
 80014b4:	2078      	movs	r0, #120	; 0x78
 80014b6:	f000 fa0f 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80014ba:	2220      	movs	r2, #32
 80014bc:	2100      	movs	r1, #0
 80014be:	2078      	movs	r0, #120	; 0x78
 80014c0:	f000 fa0a 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80014c4:	228d      	movs	r2, #141	; 0x8d
 80014c6:	2100      	movs	r1, #0
 80014c8:	2078      	movs	r0, #120	; 0x78
 80014ca:	f000 fa05 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80014ce:	2214      	movs	r2, #20
 80014d0:	2100      	movs	r1, #0
 80014d2:	2078      	movs	r0, #120	; 0x78
 80014d4:	f000 fa00 	bl	80018d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80014d8:	22af      	movs	r2, #175	; 0xaf
 80014da:	2100      	movs	r1, #0
 80014dc:	2078      	movs	r0, #120	; 0x78
 80014de:	f000 f9fb 	bl	80018d8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80014e2:	222e      	movs	r2, #46	; 0x2e
 80014e4:	2100      	movs	r1, #0
 80014e6:	2078      	movs	r0, #120	; 0x78
 80014e8:	f000 f9f6 	bl	80018d8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80014ec:	2000      	movs	r0, #0
 80014ee:	f000 f843 	bl	8001578 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80014f2:	f000 f813 	bl	800151c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <SSD1306_Init+0x184>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <SSD1306_Init+0x184>)
 80014fe:	2200      	movs	r2, #0
 8001500:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <SSD1306_Init+0x184>)
 8001504:	2201      	movs	r2, #1
 8001506:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001508:	2301      	movs	r3, #1
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2000009c 	.word	0x2000009c
 8001518:	2000062c 	.word	0x2000062c

0800151c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001522:	2300      	movs	r3, #0
 8001524:	71fb      	strb	r3, [r7, #7]
 8001526:	e01d      	b.n	8001564 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	3b50      	subs	r3, #80	; 0x50
 800152c:	b2db      	uxtb	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	2100      	movs	r1, #0
 8001532:	2078      	movs	r0, #120	; 0x78
 8001534:	f000 f9d0 	bl	80018d8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001538:	2200      	movs	r2, #0
 800153a:	2100      	movs	r1, #0
 800153c:	2078      	movs	r0, #120	; 0x78
 800153e:	f000 f9cb 	bl	80018d8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001542:	2210      	movs	r2, #16
 8001544:	2100      	movs	r1, #0
 8001546:	2078      	movs	r0, #120	; 0x78
 8001548:	f000 f9c6 	bl	80018d8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	01db      	lsls	r3, r3, #7
 8001550:	4a08      	ldr	r2, [pc, #32]	; (8001574 <SSD1306_UpdateScreen+0x58>)
 8001552:	441a      	add	r2, r3
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	2140      	movs	r1, #64	; 0x40
 8001558:	2078      	movs	r0, #120	; 0x78
 800155a:	f000 f957 	bl	800180c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	3301      	adds	r3, #1
 8001562:	71fb      	strb	r3, [r7, #7]
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	2b07      	cmp	r3, #7
 8001568:	d9de      	bls.n	8001528 <SSD1306_UpdateScreen+0xc>
	}
}
 800156a:	bf00      	nop
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	2000022c 	.word	0x2000022c

08001578 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <SSD1306_Fill+0x14>
 8001588:	2300      	movs	r3, #0
 800158a:	e000      	b.n	800158e <SSD1306_Fill+0x16>
 800158c:	23ff      	movs	r3, #255	; 0xff
 800158e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001592:	4619      	mov	r1, r3
 8001594:	4803      	ldr	r0, [pc, #12]	; (80015a4 <SSD1306_Fill+0x2c>)
 8001596:	f005 f8d1 	bl	800673c <memset>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	2000022c 	.word	0x2000022c

080015a8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
 80015b2:	460b      	mov	r3, r1
 80015b4:	80bb      	strh	r3, [r7, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	70fb      	strb	r3, [r7, #3]
	if (
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	2b7f      	cmp	r3, #127	; 0x7f
 80015be:	d848      	bhi.n	8001652 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80015c0:	88bb      	ldrh	r3, [r7, #4]
 80015c2:	2b3f      	cmp	r3, #63	; 0x3f
 80015c4:	d845      	bhi.n	8001652 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80015c6:	4b26      	ldr	r3, [pc, #152]	; (8001660 <SSD1306_DrawPixel+0xb8>)
 80015c8:	791b      	ldrb	r3, [r3, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d006      	beq.n	80015dc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bf0c      	ite	eq
 80015d4:	2301      	moveq	r3, #1
 80015d6:	2300      	movne	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80015dc:	78fb      	ldrb	r3, [r7, #3]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d11a      	bne.n	8001618 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80015e2:	88fa      	ldrh	r2, [r7, #6]
 80015e4:	88bb      	ldrh	r3, [r7, #4]
 80015e6:	08db      	lsrs	r3, r3, #3
 80015e8:	b298      	uxth	r0, r3
 80015ea:	4603      	mov	r3, r0
 80015ec:	01db      	lsls	r3, r3, #7
 80015ee:	4413      	add	r3, r2
 80015f0:	4a1c      	ldr	r2, [pc, #112]	; (8001664 <SSD1306_DrawPixel+0xbc>)
 80015f2:	5cd3      	ldrb	r3, [r2, r3]
 80015f4:	b25a      	sxtb	r2, r3
 80015f6:	88bb      	ldrh	r3, [r7, #4]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	2101      	movs	r1, #1
 80015fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001602:	b25b      	sxtb	r3, r3
 8001604:	4313      	orrs	r3, r2
 8001606:	b259      	sxtb	r1, r3
 8001608:	88fa      	ldrh	r2, [r7, #6]
 800160a:	4603      	mov	r3, r0
 800160c:	01db      	lsls	r3, r3, #7
 800160e:	4413      	add	r3, r2
 8001610:	b2c9      	uxtb	r1, r1
 8001612:	4a14      	ldr	r2, [pc, #80]	; (8001664 <SSD1306_DrawPixel+0xbc>)
 8001614:	54d1      	strb	r1, [r2, r3]
 8001616:	e01d      	b.n	8001654 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001618:	88fa      	ldrh	r2, [r7, #6]
 800161a:	88bb      	ldrh	r3, [r7, #4]
 800161c:	08db      	lsrs	r3, r3, #3
 800161e:	b298      	uxth	r0, r3
 8001620:	4603      	mov	r3, r0
 8001622:	01db      	lsls	r3, r3, #7
 8001624:	4413      	add	r3, r2
 8001626:	4a0f      	ldr	r2, [pc, #60]	; (8001664 <SSD1306_DrawPixel+0xbc>)
 8001628:	5cd3      	ldrb	r3, [r2, r3]
 800162a:	b25a      	sxtb	r2, r3
 800162c:	88bb      	ldrh	r3, [r7, #4]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	2101      	movs	r1, #1
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	b25b      	sxtb	r3, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	b25b      	sxtb	r3, r3
 800163e:	4013      	ands	r3, r2
 8001640:	b259      	sxtb	r1, r3
 8001642:	88fa      	ldrh	r2, [r7, #6]
 8001644:	4603      	mov	r3, r0
 8001646:	01db      	lsls	r3, r3, #7
 8001648:	4413      	add	r3, r2
 800164a:	b2c9      	uxtb	r1, r1
 800164c:	4a05      	ldr	r2, [pc, #20]	; (8001664 <SSD1306_DrawPixel+0xbc>)
 800164e:	54d1      	strb	r1, [r2, r3]
 8001650:	e000      	b.n	8001654 <SSD1306_DrawPixel+0xac>
		return;
 8001652:	bf00      	nop
	}
}
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	2000062c 	.word	0x2000062c
 8001664:	2000022c 	.word	0x2000022c

08001668 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	460a      	mov	r2, r1
 8001672:	80fb      	strh	r3, [r7, #6]
 8001674:	4613      	mov	r3, r2
 8001676:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001678:	4a05      	ldr	r2, [pc, #20]	; (8001690 <SSD1306_GotoXY+0x28>)
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800167e:	4a04      	ldr	r2, [pc, #16]	; (8001690 <SSD1306_GotoXY+0x28>)
 8001680:	88bb      	ldrh	r3, [r7, #4]
 8001682:	8053      	strh	r3, [r2, #2]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	2000062c 	.word	0x2000062c

08001694 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	71fb      	strb	r3, [r7, #7]
 80016a0:	4613      	mov	r3, r2
 80016a2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80016a4:	4b3a      	ldr	r3, [pc, #232]	; (8001790 <SSD1306_Putc+0xfc>)
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	4413      	add	r3, r2
	if (
 80016b0:	2b7f      	cmp	r3, #127	; 0x7f
 80016b2:	dc07      	bgt.n	80016c4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80016b4:	4b36      	ldr	r3, [pc, #216]	; (8001790 <SSD1306_Putc+0xfc>)
 80016b6:	885b      	ldrh	r3, [r3, #2]
 80016b8:	461a      	mov	r2, r3
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	785b      	ldrb	r3, [r3, #1]
 80016be:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80016c0:	2b3f      	cmp	r3, #63	; 0x3f
 80016c2:	dd01      	ble.n	80016c8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	e05e      	b.n	8001786 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	e04b      	b.n	8001766 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	3b20      	subs	r3, #32
 80016d6:	6839      	ldr	r1, [r7, #0]
 80016d8:	7849      	ldrb	r1, [r1, #1]
 80016da:	fb01 f303 	mul.w	r3, r1, r3
 80016de:	4619      	mov	r1, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	440b      	add	r3, r1
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4413      	add	r3, r2
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80016ec:	2300      	movs	r3, #0
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	e030      	b.n	8001754 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d010      	beq.n	8001724 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001702:	4b23      	ldr	r3, [pc, #140]	; (8001790 <SSD1306_Putc+0xfc>)
 8001704:	881a      	ldrh	r2, [r3, #0]
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	b29b      	uxth	r3, r3
 800170a:	4413      	add	r3, r2
 800170c:	b298      	uxth	r0, r3
 800170e:	4b20      	ldr	r3, [pc, #128]	; (8001790 <SSD1306_Putc+0xfc>)
 8001710:	885a      	ldrh	r2, [r3, #2]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	b29b      	uxth	r3, r3
 8001716:	4413      	add	r3, r2
 8001718:	b29b      	uxth	r3, r3
 800171a:	79ba      	ldrb	r2, [r7, #6]
 800171c:	4619      	mov	r1, r3
 800171e:	f7ff ff43 	bl	80015a8 <SSD1306_DrawPixel>
 8001722:	e014      	b.n	800174e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <SSD1306_Putc+0xfc>)
 8001726:	881a      	ldrh	r2, [r3, #0]
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	b29b      	uxth	r3, r3
 800172c:	4413      	add	r3, r2
 800172e:	b298      	uxth	r0, r3
 8001730:	4b17      	ldr	r3, [pc, #92]	; (8001790 <SSD1306_Putc+0xfc>)
 8001732:	885a      	ldrh	r2, [r3, #2]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	b29b      	uxth	r3, r3
 8001738:	4413      	add	r3, r2
 800173a:	b299      	uxth	r1, r3
 800173c:	79bb      	ldrb	r3, [r7, #6]
 800173e:	2b00      	cmp	r3, #0
 8001740:	bf0c      	ite	eq
 8001742:	2301      	moveq	r3, #1
 8001744:	2300      	movne	r3, #0
 8001746:	b2db      	uxtb	r3, r3
 8001748:	461a      	mov	r2, r3
 800174a:	f7ff ff2d 	bl	80015a8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	3301      	adds	r3, #1
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4293      	cmp	r3, r2
 800175e:	d3c8      	bcc.n	80016f2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	3301      	adds	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	785b      	ldrb	r3, [r3, #1]
 800176a:	461a      	mov	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	4293      	cmp	r3, r2
 8001770:	d3ad      	bcc.n	80016ce <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001772:	4b07      	ldr	r3, [pc, #28]	; (8001790 <SSD1306_Putc+0xfc>)
 8001774:	881a      	ldrh	r2, [r3, #0]
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b29b      	uxth	r3, r3
 800177c:	4413      	add	r3, r2
 800177e:	b29a      	uxth	r2, r3
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <SSD1306_Putc+0xfc>)
 8001782:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001784:	79fb      	ldrb	r3, [r7, #7]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	2000062c 	.word	0x2000062c

08001794 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	4613      	mov	r3, r2
 80017a0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80017a2:	e012      	b.n	80017ca <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	79fa      	ldrb	r2, [r7, #7]
 80017aa:	68b9      	ldr	r1, [r7, #8]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff71 	bl	8001694 <SSD1306_Putc>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d002      	beq.n	80017c4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	e008      	b.n	80017d6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3301      	adds	r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1e8      	bne.n	80017a4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	781b      	ldrb	r3, [r3, #0]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <ssd1306_I2C_Init+0x28>)
 80017e8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80017ea:	e002      	b.n	80017f2 <ssd1306_I2C_Init+0x12>
		p--;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1f9      	bne.n	80017ec <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	0003d090 	.word	0x0003d090

0800180c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800180c:	b590      	push	{r4, r7, lr}
 800180e:	b0c7      	sub	sp, #284	; 0x11c
 8001810:	af02      	add	r7, sp, #8
 8001812:	4604      	mov	r4, r0
 8001814:	4608      	mov	r0, r1
 8001816:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800181a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800181e:	600a      	str	r2, [r1, #0]
 8001820:	4619      	mov	r1, r3
 8001822:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001826:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800182a:	4622      	mov	r2, r4
 800182c:	701a      	strb	r2, [r3, #0]
 800182e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001832:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001836:	4602      	mov	r2, r0
 8001838:	701a      	strb	r2, [r3, #0]
 800183a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800183e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001842:	460a      	mov	r2, r1
 8001844:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001846:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800184a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800184e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001852:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001856:	7812      	ldrb	r2, [r2, #0]
 8001858:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800185a:	2300      	movs	r3, #0
 800185c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001860:	e015      	b.n	800188e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001862:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001866:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800186a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800186e:	6812      	ldr	r2, [r2, #0]
 8001870:	441a      	add	r2, r3
 8001872:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001876:	3301      	adds	r3, #1
 8001878:	7811      	ldrb	r1, [r2, #0]
 800187a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800187e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001882:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001884:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001888:	3301      	adds	r3, #1
 800188a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800188e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001892:	b29b      	uxth	r3, r3
 8001894:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001898:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800189c:	8812      	ldrh	r2, [r2, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d8df      	bhi.n	8001862 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80018a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018a6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b299      	uxth	r1, r3
 80018ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	3301      	adds	r3, #1
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	f107 020c 	add.w	r2, r7, #12
 80018c0:	200a      	movs	r0, #10
 80018c2:	9000      	str	r0, [sp, #0]
 80018c4:	4803      	ldr	r0, [pc, #12]	; (80018d4 <ssd1306_I2C_WriteMulti+0xc8>)
 80018c6:	f000 fe63 	bl	8002590 <HAL_I2C_Master_Transmit>
}
 80018ca:	bf00      	nop
 80018cc:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd90      	pop	{r4, r7, pc}
 80018d4:	2000009c 	.word	0x2000009c

080018d8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af02      	add	r7, sp, #8
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
 80018e2:	460b      	mov	r3, r1
 80018e4:	71bb      	strb	r3, [r7, #6]
 80018e6:	4613      	mov	r3, r2
 80018e8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80018ea:	79bb      	ldrb	r3, [r7, #6]
 80018ec:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80018ee:	797b      	ldrb	r3, [r7, #5]
 80018f0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	b299      	uxth	r1, r3
 80018f6:	f107 020c 	add.w	r2, r7, #12
 80018fa:	230a      	movs	r3, #10
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	2302      	movs	r3, #2
 8001900:	4803      	ldr	r0, [pc, #12]	; (8001910 <ssd1306_I2C_Write+0x38>)
 8001902:	f000 fe45 	bl	8002590 <HAL_I2C_Master_Transmit>
}
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000009c 	.word	0x2000009c

08001914 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191a:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <HAL_MspInit+0x44>)
 800191c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191e:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <HAL_MspInit+0x44>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6613      	str	r3, [r2, #96]	; 0x60
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <HAL_MspInit+0x44>)
 8001928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_MspInit+0x44>)
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	4a08      	ldr	r2, [pc, #32]	; (8001958 <HAL_MspInit+0x44>)
 8001938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800193c:	6593      	str	r3, [r2, #88]	; 0x58
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_MspInit+0x44>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000

0800195c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b0ac      	sub	sp, #176	; 0xb0
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	2288      	movs	r2, #136	; 0x88
 800197a:	2100      	movs	r1, #0
 800197c:	4618      	mov	r0, r3
 800197e:	f004 fedd 	bl	800673c <memset>
  if(hi2c->Instance==I2C1)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a21      	ldr	r2, [pc, #132]	; (8001a0c <HAL_I2C_MspInit+0xb0>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d13b      	bne.n	8001a04 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800198c:	2340      	movs	r3, #64	; 0x40
 800198e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001990:	2300      	movs	r3, #0
 8001992:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4618      	mov	r0, r3
 800199a:	f002 f8ef 	bl	8003b7c <HAL_RCCEx_PeriphCLKConfig>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80019a4:	f7ff fcf0 	bl	8001388 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_I2C_MspInit+0xb4>)
 80019aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ac:	4a18      	ldr	r2, [pc, #96]	; (8001a10 <HAL_I2C_MspInit+0xb4>)
 80019ae:	f043 0302 	orr.w	r3, r3, #2
 80019b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b4:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <HAL_I2C_MspInit+0xb4>)
 80019b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019c8:	2312      	movs	r3, #18
 80019ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d4:	2303      	movs	r3, #3
 80019d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019da:	2304      	movs	r3, #4
 80019dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019e4:	4619      	mov	r1, r3
 80019e6:	480b      	ldr	r0, [pc, #44]	; (8001a14 <HAL_I2C_MspInit+0xb8>)
 80019e8:	f000 fb68 	bl	80020bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_I2C_MspInit+0xb4>)
 80019ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f0:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <HAL_I2C_MspInit+0xb4>)
 80019f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019f6:	6593      	str	r3, [r2, #88]	; 0x58
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_I2C_MspInit+0xb4>)
 80019fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a04:	bf00      	nop
 8001a06:	37b0      	adds	r7, #176	; 0xb0
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40005400 	.word	0x40005400
 8001a10:	40021000 	.word	0x40021000
 8001a14:	48000400 	.word	0x48000400

08001a18 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	; 0x28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <HAL_TIM_IC_MspInit+0x90>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d131      	bne.n	8001a9e <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a3a:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <HAL_TIM_IC_MspInit+0x94>)
 8001a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a3e:	4a1b      	ldr	r2, [pc, #108]	; (8001aac <HAL_TIM_IC_MspInit+0x94>)
 8001a40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a44:	6613      	str	r3, [r2, #96]	; 0x60
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <HAL_TIM_IC_MspInit+0x94>)
 8001a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <HAL_TIM_IC_MspInit+0x94>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a56:	4a15      	ldr	r2, [pc, #84]	; (8001aac <HAL_TIM_IC_MspInit+0x94>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <HAL_TIM_IC_MspInit+0x94>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4619      	mov	r1, r3
 8001a86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a8a:	f000 fb17 	bl	80020bc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2100      	movs	r1, #0
 8001a92:	201b      	movs	r0, #27
 8001a94:	f000 fadb 	bl	800204e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001a98:	201b      	movs	r0, #27
 8001a9a:	f000 faf4 	bl	8002086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a9e:	bf00      	nop
 8001aa0:	3728      	adds	r7, #40	; 0x28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40012c00 	.word	0x40012c00
 8001aac:	40021000 	.word	0x40021000

08001ab0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac0:	d10b      	bne.n	8001ada <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_TIM_Base_MspInit+0x38>)
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac6:	4a08      	ldr	r2, [pc, #32]	; (8001ae8 <HAL_TIM_Base_MspInit+0x38>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_TIM_Base_MspInit+0x38>)
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ada:	bf00      	nop
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000

08001aec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b0c:	d11c      	bne.n	8001b48 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <HAL_TIM_MspPostInit+0x64>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	4a0f      	ldr	r2, [pc, #60]	; (8001b50 <HAL_TIM_MspPostInit+0x64>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <HAL_TIM_MspPostInit+0x64>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b26:	2302      	movs	r3, #2
 8001b28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b36:	2301      	movs	r3, #1
 8001b38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b44:	f000 faba 	bl	80020bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b48:	bf00      	nop
 8001b4a:	3720      	adds	r7, #32
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40021000 	.word	0x40021000

08001b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b0ac      	sub	sp, #176	; 0xb0
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	2288      	movs	r2, #136	; 0x88
 8001b72:	2100      	movs	r1, #0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f004 fde1 	bl	800673c <memset>
  if(huart->Instance==USART2)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a21      	ldr	r2, [pc, #132]	; (8001c04 <HAL_UART_MspInit+0xb0>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d13b      	bne.n	8001bfc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b84:	2302      	movs	r3, #2
 8001b86:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4618      	mov	r0, r3
 8001b92:	f001 fff3 	bl	8003b7c <HAL_RCCEx_PeriphCLKConfig>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b9c:	f7ff fbf4 	bl	8001388 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ba0:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <HAL_UART_MspInit+0xb4>)
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba4:	4a18      	ldr	r2, [pc, #96]	; (8001c08 <HAL_UART_MspInit+0xb4>)
 8001ba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001baa:	6593      	str	r3, [r2, #88]	; 0x58
 8001bac:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <HAL_UART_MspInit+0xb4>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb8:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <HAL_UART_MspInit+0xb4>)
 8001bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bbc:	4a12      	ldr	r2, [pc, #72]	; (8001c08 <HAL_UART_MspInit+0xb4>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc4:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <HAL_UART_MspInit+0xb4>)
 8001bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bd0:	230c      	movs	r3, #12
 8001bd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be2:	2303      	movs	r3, #3
 8001be4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001be8:	2307      	movs	r3, #7
 8001bea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf8:	f000 fa60 	bl	80020bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bfc:	bf00      	nop
 8001bfe:	37b0      	adds	r7, #176	; 0xb0
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40004400 	.word	0x40004400
 8001c08:	40021000 	.word	0x40021000

08001c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <NMI_Handler+0x4>

08001c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c16:	e7fe      	b.n	8001c16 <HardFault_Handler+0x4>

08001c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <MemManage_Handler+0x4>

08001c1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c22:	e7fe      	b.n	8001c22 <BusFault_Handler+0x4>

08001c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <UsageFault_Handler+0x4>

08001c2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c58:	f000 f8da 	bl	8001e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <TIM1_CC_IRQHandler+0x10>)
 8001c66:	f002 fec4 	bl	80049f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200000f0 	.word	0x200000f0

08001c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c7c:	4a14      	ldr	r2, [pc, #80]	; (8001cd0 <_sbrk+0x5c>)
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <_sbrk+0x60>)
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <_sbrk+0x64>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d102      	bne.n	8001c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <_sbrk+0x64>)
 8001c92:	4a12      	ldr	r2, [pc, #72]	; (8001cdc <_sbrk+0x68>)
 8001c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <_sbrk+0x64>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d207      	bcs.n	8001cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca4:	f004 fd20 	bl	80066e8 <__errno>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	220c      	movs	r2, #12
 8001cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb2:	e009      	b.n	8001cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb4:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <_sbrk+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <_sbrk+0x64>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <_sbrk+0x64>)
 8001cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20018000 	.word	0x20018000
 8001cd4:	00000400 	.word	0x00000400
 8001cd8:	20000634 	.word	0x20000634
 8001cdc:	20000650 	.word	0x20000650

08001ce0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <SystemInit+0x20>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cea:	4a05      	ldr	r2, [pc, #20]	; (8001d00 <SystemInit+0x20>)
 8001cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d08:	f7ff ffea 	bl	8001ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d0c:	480c      	ldr	r0, [pc, #48]	; (8001d40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d0e:	490d      	ldr	r1, [pc, #52]	; (8001d44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d10:	4a0d      	ldr	r2, [pc, #52]	; (8001d48 <LoopForever+0xe>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d14:	e002      	b.n	8001d1c <LoopCopyDataInit>

08001d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1a:	3304      	adds	r3, #4

08001d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d20:	d3f9      	bcc.n	8001d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d22:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d24:	4c0a      	ldr	r4, [pc, #40]	; (8001d50 <LoopForever+0x16>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d28:	e001      	b.n	8001d2e <LoopFillZerobss>

08001d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d2c:	3204      	adds	r2, #4

08001d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d30:	d3fb      	bcc.n	8001d2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d32:	f004 fcdf 	bl	80066f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d36:	f7ff f80b 	bl	8000d50 <main>

08001d3a <LoopForever>:

LoopForever:
    b LoopForever
 8001d3a:	e7fe      	b.n	8001d3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d44:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001d48:	0800918c 	.word	0x0800918c
  ldr r2, =_sbss
 8001d4c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001d50:	2000064c 	.word	0x2000064c

08001d54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d54:	e7fe      	b.n	8001d54 <ADC1_2_IRQHandler>
	...

08001d58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d62:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <HAL_Init+0x3c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a0b      	ldr	r2, [pc, #44]	; (8001d94 <HAL_Init+0x3c>)
 8001d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d6e:	2003      	movs	r0, #3
 8001d70:	f000 f962 	bl	8002038 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d74:	2000      	movs	r0, #0
 8001d76:	f000 f80f 	bl	8001d98 <HAL_InitTick>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d002      	beq.n	8001d86 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	71fb      	strb	r3, [r7, #7]
 8001d84:	e001      	b.n	8001d8a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d86:	f7ff fdc5 	bl	8001914 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40022000 	.word	0x40022000

08001d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001da4:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <HAL_InitTick+0x6c>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d023      	beq.n	8001df4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001dac:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <HAL_InitTick+0x70>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <HAL_InitTick+0x6c>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	4619      	mov	r1, r3
 8001db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 f96d 	bl	80020a2 <HAL_SYSTICK_Config>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10f      	bne.n	8001dee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b0f      	cmp	r3, #15
 8001dd2:	d809      	bhi.n	8001de8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	f000 f937 	bl	800204e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001de0:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <HAL_InitTick+0x74>)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e007      	b.n	8001df8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
 8001dec:	e004      	b.n	8001df8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	73fb      	strb	r3, [r7, #15]
 8001df2:	e001      	b.n	8001df8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000018 	.word	0x20000018
 8001e08:	20000010 	.word	0x20000010
 8001e0c:	20000014 	.word	0x20000014

08001e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x20>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x24>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_IncTick+0x24>)
 8001e22:	6013      	str	r3, [r2, #0]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000018 	.word	0x20000018
 8001e34:	20000638 	.word	0x20000638

08001e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_GetTick+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000638 	.word	0x20000638

08001e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e58:	f7ff ffee 	bl	8001e38 <HAL_GetTick>
 8001e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d005      	beq.n	8001e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <HAL_Delay+0x44>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e76:	bf00      	nop
 8001e78:	f7ff ffde 	bl	8001e38 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d8f7      	bhi.n	8001e78 <HAL_Delay+0x28>
  {
  }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000018 	.word	0x20000018

08001e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <__NVIC_SetPriorityGrouping+0x44>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eca:	4a04      	ldr	r2, [pc, #16]	; (8001edc <__NVIC_SetPriorityGrouping+0x44>)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	60d3      	str	r3, [r2, #12]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee4:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	f003 0307 	and.w	r3, r3, #7
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	db0b      	blt.n	8001f26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	f003 021f 	and.w	r2, r3, #31
 8001f14:	4907      	ldr	r1, [pc, #28]	; (8001f34 <__NVIC_EnableIRQ+0x38>)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	095b      	lsrs	r3, r3, #5
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000e100 	.word	0xe000e100

08001f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	6039      	str	r1, [r7, #0]
 8001f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	db0a      	blt.n	8001f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	490c      	ldr	r1, [pc, #48]	; (8001f84 <__NVIC_SetPriority+0x4c>)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f60:	e00a      	b.n	8001f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4908      	ldr	r1, [pc, #32]	; (8001f88 <__NVIC_SetPriority+0x50>)
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	3b04      	subs	r3, #4
 8001f70:	0112      	lsls	r2, r2, #4
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	440b      	add	r3, r1
 8001f76:	761a      	strb	r2, [r3, #24]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000e100 	.word	0xe000e100
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f1c3 0307 	rsb	r3, r3, #7
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	bf28      	it	cs
 8001faa:	2304      	movcs	r3, #4
 8001fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d902      	bls.n	8001fbc <NVIC_EncodePriority+0x30>
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3b03      	subs	r3, #3
 8001fba:	e000      	b.n	8001fbe <NVIC_EncodePriority+0x32>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	401a      	ands	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	43d9      	mvns	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	4313      	orrs	r3, r2
         );
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3724      	adds	r7, #36	; 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
	...

08001ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002004:	d301      	bcc.n	800200a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002006:	2301      	movs	r3, #1
 8002008:	e00f      	b.n	800202a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800200a:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <SysTick_Config+0x40>)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3b01      	subs	r3, #1
 8002010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002012:	210f      	movs	r1, #15
 8002014:	f04f 30ff 	mov.w	r0, #4294967295
 8002018:	f7ff ff8e 	bl	8001f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800201c:	4b05      	ldr	r3, [pc, #20]	; (8002034 <SysTick_Config+0x40>)
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002022:	4b04      	ldr	r3, [pc, #16]	; (8002034 <SysTick_Config+0x40>)
 8002024:	2207      	movs	r2, #7
 8002026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	e000e010 	.word	0xe000e010

08002038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff ff29 	bl	8001e98 <__NVIC_SetPriorityGrouping>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b086      	sub	sp, #24
 8002052:	af00      	add	r7, sp, #0
 8002054:	4603      	mov	r3, r0
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
 800205a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002060:	f7ff ff3e 	bl	8001ee0 <__NVIC_GetPriorityGrouping>
 8002064:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	6978      	ldr	r0, [r7, #20]
 800206c:	f7ff ff8e 	bl	8001f8c <NVIC_EncodePriority>
 8002070:	4602      	mov	r2, r0
 8002072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff5d 	bl	8001f38 <__NVIC_SetPriority>
}
 800207e:	bf00      	nop
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	4603      	mov	r3, r0
 800208e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff31 	bl	8001efc <__NVIC_EnableIRQ>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff ffa2 	bl	8001ff4 <SysTick_Config>
 80020b0:	4603      	mov	r3, r0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020bc:	b480      	push	{r7}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ca:	e17f      	b.n	80023cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	2101      	movs	r1, #1
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	fa01 f303 	lsl.w	r3, r1, r3
 80020d8:	4013      	ands	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 8171 	beq.w	80023c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d005      	beq.n	80020fc <HAL_GPIO_Init+0x40>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d130      	bne.n	800215e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	2203      	movs	r2, #3
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002132:	2201      	movs	r2, #1
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	091b      	lsrs	r3, r3, #4
 8002148:	f003 0201 	and.w	r2, r3, #1
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	2b03      	cmp	r3, #3
 8002168:	d118      	bne.n	800219c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002170:	2201      	movs	r2, #1
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	08db      	lsrs	r3, r3, #3
 8002186:	f003 0201 	and.w	r2, r3, #1
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d017      	beq.n	80021d8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	2203      	movs	r2, #3
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4013      	ands	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d123      	bne.n	800222c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	08da      	lsrs	r2, r3, #3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3208      	adds	r2, #8
 80021ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	220f      	movs	r2, #15
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	691a      	ldr	r2, [r3, #16]
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	08da      	lsrs	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3208      	adds	r2, #8
 8002226:	6939      	ldr	r1, [r7, #16]
 8002228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	2203      	movs	r2, #3
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0203 	and.w	r2, r3, #3
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80ac 	beq.w	80023c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226e:	4b5f      	ldr	r3, [pc, #380]	; (80023ec <HAL_GPIO_Init+0x330>)
 8002270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002272:	4a5e      	ldr	r2, [pc, #376]	; (80023ec <HAL_GPIO_Init+0x330>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6613      	str	r3, [r2, #96]	; 0x60
 800227a:	4b5c      	ldr	r3, [pc, #368]	; (80023ec <HAL_GPIO_Init+0x330>)
 800227c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002286:	4a5a      	ldr	r2, [pc, #360]	; (80023f0 <HAL_GPIO_Init+0x334>)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	089b      	lsrs	r3, r3, #2
 800228c:	3302      	adds	r3, #2
 800228e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002292:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	220f      	movs	r2, #15
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4013      	ands	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022b0:	d025      	beq.n	80022fe <HAL_GPIO_Init+0x242>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a4f      	ldr	r2, [pc, #316]	; (80023f4 <HAL_GPIO_Init+0x338>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d01f      	beq.n	80022fa <HAL_GPIO_Init+0x23e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4e      	ldr	r2, [pc, #312]	; (80023f8 <HAL_GPIO_Init+0x33c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d019      	beq.n	80022f6 <HAL_GPIO_Init+0x23a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4d      	ldr	r2, [pc, #308]	; (80023fc <HAL_GPIO_Init+0x340>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d013      	beq.n	80022f2 <HAL_GPIO_Init+0x236>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a4c      	ldr	r2, [pc, #304]	; (8002400 <HAL_GPIO_Init+0x344>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00d      	beq.n	80022ee <HAL_GPIO_Init+0x232>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a4b      	ldr	r2, [pc, #300]	; (8002404 <HAL_GPIO_Init+0x348>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d007      	beq.n	80022ea <HAL_GPIO_Init+0x22e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a4a      	ldr	r2, [pc, #296]	; (8002408 <HAL_GPIO_Init+0x34c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d101      	bne.n	80022e6 <HAL_GPIO_Init+0x22a>
 80022e2:	2306      	movs	r3, #6
 80022e4:	e00c      	b.n	8002300 <HAL_GPIO_Init+0x244>
 80022e6:	2307      	movs	r3, #7
 80022e8:	e00a      	b.n	8002300 <HAL_GPIO_Init+0x244>
 80022ea:	2305      	movs	r3, #5
 80022ec:	e008      	b.n	8002300 <HAL_GPIO_Init+0x244>
 80022ee:	2304      	movs	r3, #4
 80022f0:	e006      	b.n	8002300 <HAL_GPIO_Init+0x244>
 80022f2:	2303      	movs	r3, #3
 80022f4:	e004      	b.n	8002300 <HAL_GPIO_Init+0x244>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e002      	b.n	8002300 <HAL_GPIO_Init+0x244>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <HAL_GPIO_Init+0x244>
 80022fe:	2300      	movs	r3, #0
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	f002 0203 	and.w	r2, r2, #3
 8002306:	0092      	lsls	r2, r2, #2
 8002308:	4093      	lsls	r3, r2
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002310:	4937      	ldr	r1, [pc, #220]	; (80023f0 <HAL_GPIO_Init+0x334>)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	089b      	lsrs	r3, r3, #2
 8002316:	3302      	adds	r3, #2
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800231e:	4b3b      	ldr	r3, [pc, #236]	; (800240c <HAL_GPIO_Init+0x350>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	43db      	mvns	r3, r3
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4013      	ands	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4313      	orrs	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002342:	4a32      	ldr	r2, [pc, #200]	; (800240c <HAL_GPIO_Init+0x350>)
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002348:	4b30      	ldr	r3, [pc, #192]	; (800240c <HAL_GPIO_Init+0x350>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	43db      	mvns	r3, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4013      	ands	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800236c:	4a27      	ldr	r2, [pc, #156]	; (800240c <HAL_GPIO_Init+0x350>)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002372:	4b26      	ldr	r3, [pc, #152]	; (800240c <HAL_GPIO_Init+0x350>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	43db      	mvns	r3, r3
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4013      	ands	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4313      	orrs	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002396:	4a1d      	ldr	r2, [pc, #116]	; (800240c <HAL_GPIO_Init+0x350>)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800239c:	4b1b      	ldr	r3, [pc, #108]	; (800240c <HAL_GPIO_Init+0x350>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023c0:	4a12      	ldr	r2, [pc, #72]	; (800240c <HAL_GPIO_Init+0x350>)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	3301      	adds	r3, #1
 80023ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	fa22 f303 	lsr.w	r3, r2, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f47f ae78 	bne.w	80020cc <HAL_GPIO_Init+0x10>
  }
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	371c      	adds	r7, #28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40010000 	.word	0x40010000
 80023f4:	48000400 	.word	0x48000400
 80023f8:	48000800 	.word	0x48000800
 80023fc:	48000c00 	.word	0x48000c00
 8002400:	48001000 	.word	0x48001000
 8002404:	48001400 	.word	0x48001400
 8002408:	48001800 	.word	0x48001800
 800240c:	40010400 	.word	0x40010400

08002410 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	887b      	ldrh	r3, [r7, #2]
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
 800242c:	e001      	b.n	8002432 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800242e:	2300      	movs	r3, #0
 8002430:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002432:	7bfb      	ldrb	r3, [r7, #15]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
 800244c:	4613      	mov	r3, r2
 800244e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002450:	787b      	ldrb	r3, [r7, #1]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002456:	887a      	ldrh	r2, [r7, #2]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800245c:	e002      	b.n	8002464 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800245e:	887a      	ldrh	r2, [r7, #2]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e081      	b.n	8002586 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d106      	bne.n	800249c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff fa60 	bl	800195c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2224      	movs	r2, #36	; 0x24
 80024a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d107      	bne.n	80024ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	e006      	b.n	80024f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d104      	bne.n	800250a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002508:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800251c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800252c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69d9      	ldr	r1, [r3, #28]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1a      	ldr	r2, [r3, #32]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af02      	add	r7, sp, #8
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	461a      	mov	r2, r3
 800259c:	460b      	mov	r3, r1
 800259e:	817b      	strh	r3, [r7, #10]
 80025a0:	4613      	mov	r3, r2
 80025a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b20      	cmp	r3, #32
 80025ae:	f040 80da 	bne.w	8002766 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_I2C_Master_Transmit+0x30>
 80025bc:	2302      	movs	r3, #2
 80025be:	e0d3      	b.n	8002768 <HAL_I2C_Master_Transmit+0x1d8>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025c8:	f7ff fc36 	bl	8001e38 <HAL_GetTick>
 80025cc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	2319      	movs	r3, #25
 80025d4:	2201      	movs	r2, #1
 80025d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 f9f7 	bl	80029ce <I2C_WaitOnFlagUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e0be      	b.n	8002768 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2221      	movs	r2, #33	; 0x21
 80025ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2210      	movs	r2, #16
 80025f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	893a      	ldrh	r2, [r7, #8]
 800260a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002616:	b29b      	uxth	r3, r3
 8002618:	2bff      	cmp	r3, #255	; 0xff
 800261a:	d90e      	bls.n	800263a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	22ff      	movs	r2, #255	; 0xff
 8002620:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002626:	b2da      	uxtb	r2, r3
 8002628:	8979      	ldrh	r1, [r7, #10]
 800262a:	4b51      	ldr	r3, [pc, #324]	; (8002770 <HAL_I2C_Master_Transmit+0x1e0>)
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 fb74 	bl	8002d20 <I2C_TransferConfig>
 8002638:	e06c      	b.n	8002714 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002648:	b2da      	uxtb	r2, r3
 800264a:	8979      	ldrh	r1, [r7, #10]
 800264c:	4b48      	ldr	r3, [pc, #288]	; (8002770 <HAL_I2C_Master_Transmit+0x1e0>)
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 fb63 	bl	8002d20 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800265a:	e05b      	b.n	8002714 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	6a39      	ldr	r1, [r7, #32]
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 f9f4 	bl	8002a4e <I2C_WaitOnTXISFlagUntilTimeout>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e07b      	b.n	8002768 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	781a      	ldrb	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268a:	b29b      	uxth	r3, r3
 800268c:	3b01      	subs	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d034      	beq.n	8002714 <HAL_I2C_Master_Transmit+0x184>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d130      	bne.n	8002714 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	2200      	movs	r2, #0
 80026ba:	2180      	movs	r1, #128	; 0x80
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 f986 	bl	80029ce <I2C_WaitOnFlagUntilTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e04d      	b.n	8002768 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	2bff      	cmp	r3, #255	; 0xff
 80026d4:	d90e      	bls.n	80026f4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	22ff      	movs	r2, #255	; 0xff
 80026da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	8979      	ldrh	r1, [r7, #10]
 80026e4:	2300      	movs	r3, #0
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 fb17 	bl	8002d20 <I2C_TransferConfig>
 80026f2:	e00f      	b.n	8002714 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002702:	b2da      	uxtb	r2, r3
 8002704:	8979      	ldrh	r1, [r7, #10]
 8002706:	2300      	movs	r3, #0
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 fb06 	bl	8002d20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002718:	b29b      	uxth	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d19e      	bne.n	800265c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	6a39      	ldr	r1, [r7, #32]
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f9d3 	bl	8002ace <I2C_WaitOnSTOPFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e01a      	b.n	8002768 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2220      	movs	r2, #32
 8002738:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6859      	ldr	r1, [r3, #4]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_I2C_Master_Transmit+0x1e4>)
 8002746:	400b      	ands	r3, r1
 8002748:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2220      	movs	r2, #32
 800274e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	e000      	b.n	8002768 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002766:	2302      	movs	r3, #2
  }
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	80002000 	.word	0x80002000
 8002774:	fe00e800 	.word	0xfe00e800

08002778 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	; 0x28
 800277c:	af02      	add	r7, sp, #8
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	460b      	mov	r3, r1
 8002786:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b20      	cmp	r3, #32
 8002796:	f040 80f1 	bne.w	800297c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027a8:	d101      	bne.n	80027ae <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80027aa:	2302      	movs	r3, #2
 80027ac:	e0e7      	b.n	800297e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d101      	bne.n	80027bc <HAL_I2C_IsDeviceReady+0x44>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e0e0      	b.n	800297e <HAL_I2C_IsDeviceReady+0x206>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2224      	movs	r2, #36	; 0x24
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d107      	bne.n	80027ea <HAL_I2C_IsDeviceReady+0x72>
 80027da:	897b      	ldrh	r3, [r7, #10]
 80027dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027e8:	e004      	b.n	80027f4 <HAL_I2C_IsDeviceReady+0x7c>
 80027ea:	897b      	ldrh	r3, [r7, #10]
 80027ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027f0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80027fa:	f7ff fb1d 	bl	8001e38 <HAL_GetTick>
 80027fe:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	f003 0320 	and.w	r3, r3, #32
 800280a:	2b20      	cmp	r3, #32
 800280c:	bf0c      	ite	eq
 800280e:	2301      	moveq	r3, #1
 8002810:	2300      	movne	r3, #0
 8002812:	b2db      	uxtb	r3, r3
 8002814:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	f003 0310 	and.w	r3, r3, #16
 8002820:	2b10      	cmp	r3, #16
 8002822:	bf0c      	ite	eq
 8002824:	2301      	moveq	r3, #1
 8002826:	2300      	movne	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800282c:	e034      	b.n	8002898 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002834:	d01a      	beq.n	800286c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002836:	f7ff faff 	bl	8001e38 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d302      	bcc.n	800284c <HAL_I2C_IsDeviceReady+0xd4>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10f      	bne.n	800286c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2220      	movs	r2, #32
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002858:	f043 0220 	orr.w	r2, r3, #32
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e088      	b.n	800297e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	2b20      	cmp	r3, #32
 8002878:	bf0c      	ite	eq
 800287a:	2301      	moveq	r3, #1
 800287c:	2300      	movne	r3, #0
 800287e:	b2db      	uxtb	r3, r3
 8002880:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	f003 0310 	and.w	r3, r3, #16
 800288c:	2b10      	cmp	r3, #16
 800288e:	bf0c      	ite	eq
 8002890:	2301      	moveq	r3, #1
 8002892:	2300      	movne	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002898:	7ffb      	ldrb	r3, [r7, #31]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d102      	bne.n	80028a4 <HAL_I2C_IsDeviceReady+0x12c>
 800289e:	7fbb      	ldrb	r3, [r7, #30]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0c4      	beq.n	800282e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	2b10      	cmp	r3, #16
 80028b0:	d01a      	beq.n	80028e8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2200      	movs	r2, #0
 80028ba:	2120      	movs	r1, #32
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 f886 	bl	80029ce <I2C_WaitOnFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e058      	b.n	800297e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2220      	movs	r2, #32
 80028d2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	e04a      	b.n	800297e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2200      	movs	r2, #0
 80028f0:	2120      	movs	r1, #32
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 f86b 	bl	80029ce <I2C_WaitOnFlagUntilTimeout>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e03d      	b.n	800297e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2210      	movs	r2, #16
 8002908:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2220      	movs	r2, #32
 8002910:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	429a      	cmp	r2, r3
 8002918:	d118      	bne.n	800294c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002928:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2200      	movs	r2, #0
 8002932:	2120      	movs	r1, #32
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 f84a 	bl	80029ce <I2C_WaitOnFlagUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e01c      	b.n	800297e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2220      	movs	r2, #32
 800294a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	3301      	adds	r3, #1
 8002950:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	429a      	cmp	r2, r3
 8002958:	f63f af3b 	bhi.w	80027d2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002968:	f043 0220 	orr.w	r2, r3, #32
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800297c:	2302      	movs	r3, #2
  }
}
 800297e:	4618      	mov	r0, r3
 8002980:	3720      	adds	r7, #32
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b02      	cmp	r3, #2
 800299a:	d103      	bne.n	80029a4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2200      	movs	r2, #0
 80029a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d007      	beq.n	80029c2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699a      	ldr	r2, [r3, #24]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f042 0201 	orr.w	r2, r2, #1
 80029c0:	619a      	str	r2, [r3, #24]
  }
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b084      	sub	sp, #16
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	603b      	str	r3, [r7, #0]
 80029da:	4613      	mov	r3, r2
 80029dc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029de:	e022      	b.n	8002a26 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e6:	d01e      	beq.n	8002a26 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e8:	f7ff fa26 	bl	8001e38 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d302      	bcc.n	80029fe <I2C_WaitOnFlagUntilTimeout+0x30>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d113      	bne.n	8002a26 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	f043 0220 	orr.w	r2, r3, #32
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e00f      	b.n	8002a46 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	699a      	ldr	r2, [r3, #24]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	bf0c      	ite	eq
 8002a36:	2301      	moveq	r3, #1
 8002a38:	2300      	movne	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d0cd      	beq.n	80029e0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b084      	sub	sp, #16
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a5a:	e02c      	b.n	8002ab6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	68b9      	ldr	r1, [r7, #8]
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 f871 	bl	8002b48 <I2C_IsErrorOccurred>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e02a      	b.n	8002ac6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a76:	d01e      	beq.n	8002ab6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a78:	f7ff f9de 	bl	8001e38 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d302      	bcc.n	8002a8e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d113      	bne.n	8002ab6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	f043 0220 	orr.w	r2, r3, #32
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e007      	b.n	8002ac6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d1cb      	bne.n	8002a5c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b084      	sub	sp, #16
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ada:	e028      	b.n	8002b2e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	68b9      	ldr	r1, [r7, #8]
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 f831 	bl	8002b48 <I2C_IsErrorOccurred>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e026      	b.n	8002b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af0:	f7ff f9a2 	bl	8001e38 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d302      	bcc.n	8002b06 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d113      	bne.n	8002b2e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	f043 0220 	orr.w	r2, r3, #32
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e007      	b.n	8002b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f003 0320 	and.w	r3, r3, #32
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d1cf      	bne.n	8002adc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08a      	sub	sp, #40	; 0x28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b54:	2300      	movs	r3, #0
 8002b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	f003 0310 	and.w	r3, r3, #16
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d075      	beq.n	8002c60 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2210      	movs	r2, #16
 8002b7a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b7c:	e056      	b.n	8002c2c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b84:	d052      	beq.n	8002c2c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b86:	f7ff f957 	bl	8001e38 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d302      	bcc.n	8002b9c <I2C_IsErrorOccurred+0x54>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d147      	bne.n	8002c2c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bbe:	d12e      	bne.n	8002c1e <I2C_IsErrorOccurred+0xd6>
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bc6:	d02a      	beq.n	8002c1e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002bc8:	7cfb      	ldrb	r3, [r7, #19]
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	d027      	beq.n	8002c1e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bdc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002bde:	f7ff f92b 	bl	8001e38 <HAL_GetTick>
 8002be2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002be4:	e01b      	b.n	8002c1e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002be6:	f7ff f927 	bl	8001e38 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b19      	cmp	r3, #25
 8002bf2:	d914      	bls.n	8002c1e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf8:	f043 0220 	orr.w	r2, r3, #32
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b20      	cmp	r3, #32
 8002c2a:	d1dc      	bne.n	8002be6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	2b20      	cmp	r3, #32
 8002c38:	d003      	beq.n	8002c42 <I2C_IsErrorOccurred+0xfa>
 8002c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d09d      	beq.n	8002b7e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d103      	bne.n	8002c52 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	f043 0304 	orr.w	r3, r3, #4
 8002c58:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00b      	beq.n	8002c8a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00b      	beq.n	8002cac <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	f043 0308 	orr.w	r3, r3, #8
 8002c9a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ca4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00b      	beq.n	8002cce <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	f043 0302 	orr.w	r3, r3, #2
 8002cbc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cc6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002cce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d01c      	beq.n	8002d10 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f7ff fe55 	bl	8002986 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6859      	ldr	r1, [r3, #4]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	4b0d      	ldr	r3, [pc, #52]	; (8002d1c <I2C_IsErrorOccurred+0x1d4>)
 8002ce8:	400b      	ands	r3, r1
 8002cea:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002d10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3728      	adds	r7, #40	; 0x28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	fe00e800 	.word	0xfe00e800

08002d20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	607b      	str	r3, [r7, #4]
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	817b      	strh	r3, [r7, #10]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d32:	897b      	ldrh	r3, [r7, #10]
 8002d34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d38:	7a7b      	ldrb	r3, [r7, #9]
 8002d3a:	041b      	lsls	r3, r3, #16
 8002d3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d40:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d4e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	0d5b      	lsrs	r3, r3, #21
 8002d5a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002d5e:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <I2C_TransferConfig+0x60>)
 8002d60:	430b      	orrs	r3, r1
 8002d62:	43db      	mvns	r3, r3
 8002d64:	ea02 0103 	and.w	r1, r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d72:	bf00      	nop
 8002d74:	371c      	adds	r7, #28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	03ff63ff 	.word	0x03ff63ff

08002d84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b20      	cmp	r3, #32
 8002d98:	d138      	bne.n	8002e0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e032      	b.n	8002e0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2224      	movs	r2, #36	; 0x24
 8002db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6819      	ldr	r1, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0201 	orr.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	e000      	b.n	8002e0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e0c:	2302      	movs	r3, #2
  }
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b085      	sub	sp, #20
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b20      	cmp	r3, #32
 8002e2e:	d139      	bne.n	8002ea4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e033      	b.n	8002ea6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2224      	movs	r2, #36	; 0x24
 8002e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0201 	bic.w	r2, r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	021b      	lsls	r3, r3, #8
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	e000      	b.n	8002ea6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ea4:	2302      	movs	r3, #2
  }
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002eb8:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <HAL_PWREx_GetVoltageRange+0x18>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40007000 	.word	0x40007000

08002ed0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ede:	d130      	bne.n	8002f42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ee0:	4b23      	ldr	r3, [pc, #140]	; (8002f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eec:	d038      	beq.n	8002f60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eee:	4b20      	ldr	r3, [pc, #128]	; (8002f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ef6:	4a1e      	ldr	r2, [pc, #120]	; (8002f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002efc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002efe:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2232      	movs	r2, #50	; 0x32
 8002f04:	fb02 f303 	mul.w	r3, r2, r3
 8002f08:	4a1b      	ldr	r2, [pc, #108]	; (8002f78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	0c9b      	lsrs	r3, r3, #18
 8002f10:	3301      	adds	r3, #1
 8002f12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f14:	e002      	b.n	8002f1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f1c:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f28:	d102      	bne.n	8002f30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1f2      	bne.n	8002f16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f30:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f3c:	d110      	bne.n	8002f60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e00f      	b.n	8002f62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f42:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f4e:	d007      	beq.n	8002f60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f50:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f58:	4a05      	ldr	r2, [pc, #20]	; (8002f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40007000 	.word	0x40007000
 8002f74:	20000010 	.word	0x20000010
 8002f78:	431bde83 	.word	0x431bde83

08002f7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e3ca      	b.n	8003724 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f8e:	4b97      	ldr	r3, [pc, #604]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 030c 	and.w	r3, r3, #12
 8002f96:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f98:	4b94      	ldr	r3, [pc, #592]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0310 	and.w	r3, r3, #16
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 80e4 	beq.w	8003178 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d007      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x4a>
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	2b0c      	cmp	r3, #12
 8002fba:	f040 808b 	bne.w	80030d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	f040 8087 	bne.w	80030d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fc6:	4b89      	ldr	r3, [pc, #548]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d005      	beq.n	8002fde <HAL_RCC_OscConfig+0x62>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e3a2      	b.n	8003724 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1a      	ldr	r2, [r3, #32]
 8002fe2:	4b82      	ldr	r3, [pc, #520]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d004      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x7c>
 8002fee:	4b7f      	ldr	r3, [pc, #508]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ff6:	e005      	b.n	8003004 <HAL_RCC_OscConfig+0x88>
 8002ff8:	4b7c      	ldr	r3, [pc, #496]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8002ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ffe:	091b      	lsrs	r3, r3, #4
 8003000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003004:	4293      	cmp	r3, r2
 8003006:	d223      	bcs.n	8003050 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	4618      	mov	r0, r3
 800300e:	f000 fd55 	bl	8003abc <RCC_SetFlashLatencyFromMSIRange>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e383      	b.n	8003724 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800301c:	4b73      	ldr	r3, [pc, #460]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a72      	ldr	r2, [pc, #456]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8003022:	f043 0308 	orr.w	r3, r3, #8
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	4b70      	ldr	r3, [pc, #448]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	496d      	ldr	r1, [pc, #436]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8003036:	4313      	orrs	r3, r2
 8003038:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800303a:	4b6c      	ldr	r3, [pc, #432]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	021b      	lsls	r3, r3, #8
 8003048:	4968      	ldr	r1, [pc, #416]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 800304a:	4313      	orrs	r3, r2
 800304c:	604b      	str	r3, [r1, #4]
 800304e:	e025      	b.n	800309c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003050:	4b66      	ldr	r3, [pc, #408]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a65      	ldr	r2, [pc, #404]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8003056:	f043 0308 	orr.w	r3, r3, #8
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	4b63      	ldr	r3, [pc, #396]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	4960      	ldr	r1, [pc, #384]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 800306a:	4313      	orrs	r3, r2
 800306c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800306e:	4b5f      	ldr	r3, [pc, #380]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	495b      	ldr	r1, [pc, #364]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 800307e:	4313      	orrs	r3, r2
 8003080:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d109      	bne.n	800309c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	4618      	mov	r0, r3
 800308e:	f000 fd15 	bl	8003abc <RCC_SetFlashLatencyFromMSIRange>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e343      	b.n	8003724 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800309c:	f000 fc4a 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b52      	ldr	r3, [pc, #328]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	091b      	lsrs	r3, r3, #4
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	4950      	ldr	r1, [pc, #320]	; (80031f0 <HAL_RCC_OscConfig+0x274>)
 80030ae:	5ccb      	ldrb	r3, [r1, r3]
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
 80030b8:	4a4e      	ldr	r2, [pc, #312]	; (80031f4 <HAL_RCC_OscConfig+0x278>)
 80030ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030bc:	4b4e      	ldr	r3, [pc, #312]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fe fe69 	bl	8001d98 <HAL_InitTick>
 80030c6:	4603      	mov	r3, r0
 80030c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d052      	beq.n	8003176 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	e327      	b.n	8003724 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d032      	beq.n	8003142 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030dc:	4b43      	ldr	r3, [pc, #268]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a42      	ldr	r2, [pc, #264]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 80030e2:	f043 0301 	orr.w	r3, r3, #1
 80030e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030e8:	f7fe fea6 	bl	8001e38 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030f0:	f7fe fea2 	bl	8001e38 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e310      	b.n	8003724 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003102:	4b3a      	ldr	r3, [pc, #232]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800310e:	4b37      	ldr	r3, [pc, #220]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a36      	ldr	r2, [pc, #216]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8003114:	f043 0308 	orr.w	r3, r3, #8
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	4b34      	ldr	r3, [pc, #208]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	4931      	ldr	r1, [pc, #196]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8003128:	4313      	orrs	r3, r2
 800312a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800312c:	4b2f      	ldr	r3, [pc, #188]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	021b      	lsls	r3, r3, #8
 800313a:	492c      	ldr	r1, [pc, #176]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 800313c:	4313      	orrs	r3, r2
 800313e:	604b      	str	r3, [r1, #4]
 8003140:	e01a      	b.n	8003178 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003142:	4b2a      	ldr	r3, [pc, #168]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a29      	ldr	r2, [pc, #164]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8003148:	f023 0301 	bic.w	r3, r3, #1
 800314c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800314e:	f7fe fe73 	bl	8001e38 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003156:	f7fe fe6f 	bl	8001e38 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e2dd      	b.n	8003724 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003168:	4b20      	ldr	r3, [pc, #128]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1f0      	bne.n	8003156 <HAL_RCC_OscConfig+0x1da>
 8003174:	e000      	b.n	8003178 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003176:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d074      	beq.n	800326e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2b08      	cmp	r3, #8
 8003188:	d005      	beq.n	8003196 <HAL_RCC_OscConfig+0x21a>
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	2b0c      	cmp	r3, #12
 800318e:	d10e      	bne.n	80031ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2b03      	cmp	r3, #3
 8003194:	d10b      	bne.n	80031ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003196:	4b15      	ldr	r3, [pc, #84]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d064      	beq.n	800326c <HAL_RCC_OscConfig+0x2f0>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d160      	bne.n	800326c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e2ba      	b.n	8003724 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b6:	d106      	bne.n	80031c6 <HAL_RCC_OscConfig+0x24a>
 80031b8:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a0b      	ldr	r2, [pc, #44]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 80031be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c2:	6013      	str	r3, [r2, #0]
 80031c4:	e026      	b.n	8003214 <HAL_RCC_OscConfig+0x298>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031ce:	d115      	bne.n	80031fc <HAL_RCC_OscConfig+0x280>
 80031d0:	4b06      	ldr	r3, [pc, #24]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a05      	ldr	r2, [pc, #20]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 80031d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	4b03      	ldr	r3, [pc, #12]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a02      	ldr	r2, [pc, #8]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 80031e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	e014      	b.n	8003214 <HAL_RCC_OscConfig+0x298>
 80031ea:	bf00      	nop
 80031ec:	40021000 	.word	0x40021000
 80031f0:	08009100 	.word	0x08009100
 80031f4:	20000010 	.word	0x20000010
 80031f8:	20000014 	.word	0x20000014
 80031fc:	4ba0      	ldr	r3, [pc, #640]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a9f      	ldr	r2, [pc, #636]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 8003202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	4b9d      	ldr	r3, [pc, #628]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a9c      	ldr	r2, [pc, #624]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 800320e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d013      	beq.n	8003244 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fe fe0c 	bl	8001e38 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003224:	f7fe fe08 	bl	8001e38 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b64      	cmp	r3, #100	; 0x64
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e276      	b.n	8003724 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003236:	4b92      	ldr	r3, [pc, #584]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0x2a8>
 8003242:	e014      	b.n	800326e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003244:	f7fe fdf8 	bl	8001e38 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800324c:	f7fe fdf4 	bl	8001e38 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b64      	cmp	r3, #100	; 0x64
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e262      	b.n	8003724 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800325e:	4b88      	ldr	r3, [pc, #544]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f0      	bne.n	800324c <HAL_RCC_OscConfig+0x2d0>
 800326a:	e000      	b.n	800326e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d060      	beq.n	800333c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	2b04      	cmp	r3, #4
 800327e:	d005      	beq.n	800328c <HAL_RCC_OscConfig+0x310>
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	2b0c      	cmp	r3, #12
 8003284:	d119      	bne.n	80032ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b02      	cmp	r3, #2
 800328a:	d116      	bne.n	80032ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800328c:	4b7c      	ldr	r3, [pc, #496]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_RCC_OscConfig+0x328>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e23f      	b.n	8003724 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a4:	4b76      	ldr	r3, [pc, #472]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	061b      	lsls	r3, r3, #24
 80032b2:	4973      	ldr	r1, [pc, #460]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032b8:	e040      	b.n	800333c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d023      	beq.n	800330a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c2:	4b6f      	ldr	r3, [pc, #444]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a6e      	ldr	r2, [pc, #440]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 80032c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ce:	f7fe fdb3 	bl	8001e38 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d6:	f7fe fdaf 	bl	8001e38 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e21d      	b.n	8003724 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e8:	4b65      	ldr	r3, [pc, #404]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0f0      	beq.n	80032d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f4:	4b62      	ldr	r3, [pc, #392]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	061b      	lsls	r3, r3, #24
 8003302:	495f      	ldr	r1, [pc, #380]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 8003304:	4313      	orrs	r3, r2
 8003306:	604b      	str	r3, [r1, #4]
 8003308:	e018      	b.n	800333c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800330a:	4b5d      	ldr	r3, [pc, #372]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a5c      	ldr	r2, [pc, #368]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 8003310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003316:	f7fe fd8f 	bl	8001e38 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800331e:	f7fe fd8b 	bl	8001e38 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e1f9      	b.n	8003724 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003330:	4b53      	ldr	r3, [pc, #332]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f0      	bne.n	800331e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0308 	and.w	r3, r3, #8
 8003344:	2b00      	cmp	r3, #0
 8003346:	d03c      	beq.n	80033c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d01c      	beq.n	800338a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003350:	4b4b      	ldr	r3, [pc, #300]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 8003352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003356:	4a4a      	ldr	r2, [pc, #296]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003360:	f7fe fd6a 	bl	8001e38 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003368:	f7fe fd66 	bl	8001e38 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e1d4      	b.n	8003724 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800337a:	4b41      	ldr	r3, [pc, #260]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 800337c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0ef      	beq.n	8003368 <HAL_RCC_OscConfig+0x3ec>
 8003388:	e01b      	b.n	80033c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800338a:	4b3d      	ldr	r3, [pc, #244]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 800338c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003390:	4a3b      	ldr	r2, [pc, #236]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 8003392:	f023 0301 	bic.w	r3, r3, #1
 8003396:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339a:	f7fe fd4d 	bl	8001e38 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033a2:	f7fe fd49 	bl	8001e38 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e1b7      	b.n	8003724 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033b4:	4b32      	ldr	r3, [pc, #200]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 80033b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1ef      	bne.n	80033a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 80a6 	beq.w	800351c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033d0:	2300      	movs	r3, #0
 80033d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033d4:	4b2a      	ldr	r3, [pc, #168]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 80033d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10d      	bne.n	80033fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e0:	4b27      	ldr	r3, [pc, #156]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 80033e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e4:	4a26      	ldr	r2, [pc, #152]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 80033e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ea:	6593      	str	r3, [r2, #88]	; 0x58
 80033ec:	4b24      	ldr	r3, [pc, #144]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 80033ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033f8:	2301      	movs	r3, #1
 80033fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033fc:	4b21      	ldr	r3, [pc, #132]	; (8003484 <HAL_RCC_OscConfig+0x508>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d118      	bne.n	800343a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003408:	4b1e      	ldr	r3, [pc, #120]	; (8003484 <HAL_RCC_OscConfig+0x508>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a1d      	ldr	r2, [pc, #116]	; (8003484 <HAL_RCC_OscConfig+0x508>)
 800340e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003412:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003414:	f7fe fd10 	bl	8001e38 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800341c:	f7fe fd0c 	bl	8001e38 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e17a      	b.n	8003724 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800342e:	4b15      	ldr	r3, [pc, #84]	; (8003484 <HAL_RCC_OscConfig+0x508>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d108      	bne.n	8003454 <HAL_RCC_OscConfig+0x4d8>
 8003442:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 8003444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003448:	4a0d      	ldr	r2, [pc, #52]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003452:	e029      	b.n	80034a8 <HAL_RCC_OscConfig+0x52c>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b05      	cmp	r3, #5
 800345a:	d115      	bne.n	8003488 <HAL_RCC_OscConfig+0x50c>
 800345c:	4b08      	ldr	r3, [pc, #32]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003462:	4a07      	ldr	r2, [pc, #28]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 8003464:	f043 0304 	orr.w	r3, r3, #4
 8003468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800346c:	4b04      	ldr	r3, [pc, #16]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003472:	4a03      	ldr	r2, [pc, #12]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800347c:	e014      	b.n	80034a8 <HAL_RCC_OscConfig+0x52c>
 800347e:	bf00      	nop
 8003480:	40021000 	.word	0x40021000
 8003484:	40007000 	.word	0x40007000
 8003488:	4b9c      	ldr	r3, [pc, #624]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348e:	4a9b      	ldr	r2, [pc, #620]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 8003490:	f023 0301 	bic.w	r3, r3, #1
 8003494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003498:	4b98      	ldr	r3, [pc, #608]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349e:	4a97      	ldr	r2, [pc, #604]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 80034a0:	f023 0304 	bic.w	r3, r3, #4
 80034a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d016      	beq.n	80034de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b0:	f7fe fcc2 	bl	8001e38 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034b6:	e00a      	b.n	80034ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b8:	f7fe fcbe 	bl	8001e38 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e12a      	b.n	8003724 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ce:	4b8b      	ldr	r3, [pc, #556]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 80034d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0ed      	beq.n	80034b8 <HAL_RCC_OscConfig+0x53c>
 80034dc:	e015      	b.n	800350a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034de:	f7fe fcab 	bl	8001e38 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034e4:	e00a      	b.n	80034fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e6:	f7fe fca7 	bl	8001e38 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e113      	b.n	8003724 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034fc:	4b7f      	ldr	r3, [pc, #508]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1ed      	bne.n	80034e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800350a:	7ffb      	ldrb	r3, [r7, #31]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d105      	bne.n	800351c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003510:	4b7a      	ldr	r3, [pc, #488]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 8003512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003514:	4a79      	ldr	r2, [pc, #484]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 8003516:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800351a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 80fe 	beq.w	8003722 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352a:	2b02      	cmp	r3, #2
 800352c:	f040 80d0 	bne.w	80036d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003530:	4b72      	ldr	r3, [pc, #456]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f003 0203 	and.w	r2, r3, #3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	429a      	cmp	r2, r3
 8003542:	d130      	bne.n	80035a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	3b01      	subs	r3, #1
 8003550:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003552:	429a      	cmp	r2, r3
 8003554:	d127      	bne.n	80035a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003560:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003562:	429a      	cmp	r2, r3
 8003564:	d11f      	bne.n	80035a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003570:	2a07      	cmp	r2, #7
 8003572:	bf14      	ite	ne
 8003574:	2201      	movne	r2, #1
 8003576:	2200      	moveq	r2, #0
 8003578:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800357a:	4293      	cmp	r3, r2
 800357c:	d113      	bne.n	80035a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003588:	085b      	lsrs	r3, r3, #1
 800358a:	3b01      	subs	r3, #1
 800358c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800358e:	429a      	cmp	r2, r3
 8003590:	d109      	bne.n	80035a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	085b      	lsrs	r3, r3, #1
 800359e:	3b01      	subs	r3, #1
 80035a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d06e      	beq.n	8003684 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	2b0c      	cmp	r3, #12
 80035aa:	d069      	beq.n	8003680 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035ac:	4b53      	ldr	r3, [pc, #332]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d105      	bne.n	80035c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80035b8:	4b50      	ldr	r3, [pc, #320]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0ad      	b.n	8003724 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035c8:	4b4c      	ldr	r3, [pc, #304]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a4b      	ldr	r2, [pc, #300]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 80035ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035d4:	f7fe fc30 	bl	8001e38 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035dc:	f7fe fc2c 	bl	8001e38 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e09a      	b.n	8003724 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ee:	4b43      	ldr	r3, [pc, #268]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035fa:	4b40      	ldr	r3, [pc, #256]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	4b40      	ldr	r3, [pc, #256]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 8003600:	4013      	ands	r3, r2
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800360a:	3a01      	subs	r2, #1
 800360c:	0112      	lsls	r2, r2, #4
 800360e:	4311      	orrs	r1, r2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003614:	0212      	lsls	r2, r2, #8
 8003616:	4311      	orrs	r1, r2
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800361c:	0852      	lsrs	r2, r2, #1
 800361e:	3a01      	subs	r2, #1
 8003620:	0552      	lsls	r2, r2, #21
 8003622:	4311      	orrs	r1, r2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003628:	0852      	lsrs	r2, r2, #1
 800362a:	3a01      	subs	r2, #1
 800362c:	0652      	lsls	r2, r2, #25
 800362e:	4311      	orrs	r1, r2
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003634:	0912      	lsrs	r2, r2, #4
 8003636:	0452      	lsls	r2, r2, #17
 8003638:	430a      	orrs	r2, r1
 800363a:	4930      	ldr	r1, [pc, #192]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 800363c:	4313      	orrs	r3, r2
 800363e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003640:	4b2e      	ldr	r3, [pc, #184]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a2d      	ldr	r2, [pc, #180]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 8003646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800364a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800364c:	4b2b      	ldr	r3, [pc, #172]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	4a2a      	ldr	r2, [pc, #168]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 8003652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003656:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003658:	f7fe fbee 	bl	8001e38 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003660:	f7fe fbea 	bl	8001e38 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e058      	b.n	8003724 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003672:	4b22      	ldr	r3, [pc, #136]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800367e:	e050      	b.n	8003722 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e04f      	b.n	8003724 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003684:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d148      	bne.n	8003722 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003690:	4b1a      	ldr	r3, [pc, #104]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a19      	ldr	r2, [pc, #100]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 8003696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800369a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800369c:	4b17      	ldr	r3, [pc, #92]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	4a16      	ldr	r2, [pc, #88]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 80036a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036a8:	f7fe fbc6 	bl	8001e38 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b0:	f7fe fbc2 	bl	8001e38 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e030      	b.n	8003724 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036c2:	4b0e      	ldr	r3, [pc, #56]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0f0      	beq.n	80036b0 <HAL_RCC_OscConfig+0x734>
 80036ce:	e028      	b.n	8003722 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	2b0c      	cmp	r3, #12
 80036d4:	d023      	beq.n	800371e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d6:	4b09      	ldr	r3, [pc, #36]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a08      	ldr	r2, [pc, #32]	; (80036fc <HAL_RCC_OscConfig+0x780>)
 80036dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e2:	f7fe fba9 	bl	8001e38 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036e8:	e00c      	b.n	8003704 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ea:	f7fe fba5 	bl	8001e38 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d905      	bls.n	8003704 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e013      	b.n	8003724 <HAL_RCC_OscConfig+0x7a8>
 80036fc:	40021000 	.word	0x40021000
 8003700:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003704:	4b09      	ldr	r3, [pc, #36]	; (800372c <HAL_RCC_OscConfig+0x7b0>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1ec      	bne.n	80036ea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003710:	4b06      	ldr	r3, [pc, #24]	; (800372c <HAL_RCC_OscConfig+0x7b0>)
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	4905      	ldr	r1, [pc, #20]	; (800372c <HAL_RCC_OscConfig+0x7b0>)
 8003716:	4b06      	ldr	r3, [pc, #24]	; (8003730 <HAL_RCC_OscConfig+0x7b4>)
 8003718:	4013      	ands	r3, r2
 800371a:	60cb      	str	r3, [r1, #12]
 800371c:	e001      	b.n	8003722 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3720      	adds	r7, #32
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40021000 	.word	0x40021000
 8003730:	feeefffc 	.word	0xfeeefffc

08003734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e0e7      	b.n	8003918 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003748:	4b75      	ldr	r3, [pc, #468]	; (8003920 <HAL_RCC_ClockConfig+0x1ec>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d910      	bls.n	8003778 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003756:	4b72      	ldr	r3, [pc, #456]	; (8003920 <HAL_RCC_ClockConfig+0x1ec>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f023 0207 	bic.w	r2, r3, #7
 800375e:	4970      	ldr	r1, [pc, #448]	; (8003920 <HAL_RCC_ClockConfig+0x1ec>)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	4313      	orrs	r3, r2
 8003764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003766:	4b6e      	ldr	r3, [pc, #440]	; (8003920 <HAL_RCC_ClockConfig+0x1ec>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d001      	beq.n	8003778 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0cf      	b.n	8003918 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d010      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	4b66      	ldr	r3, [pc, #408]	; (8003924 <HAL_RCC_ClockConfig+0x1f0>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003790:	429a      	cmp	r2, r3
 8003792:	d908      	bls.n	80037a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003794:	4b63      	ldr	r3, [pc, #396]	; (8003924 <HAL_RCC_ClockConfig+0x1f0>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	4960      	ldr	r1, [pc, #384]	; (8003924 <HAL_RCC_ClockConfig+0x1f0>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d04c      	beq.n	800384c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b03      	cmp	r3, #3
 80037b8:	d107      	bne.n	80037ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ba:	4b5a      	ldr	r3, [pc, #360]	; (8003924 <HAL_RCC_ClockConfig+0x1f0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d121      	bne.n	800380a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e0a6      	b.n	8003918 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d107      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037d2:	4b54      	ldr	r3, [pc, #336]	; (8003924 <HAL_RCC_ClockConfig+0x1f0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d115      	bne.n	800380a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e09a      	b.n	8003918 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d107      	bne.n	80037fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037ea:	4b4e      	ldr	r3, [pc, #312]	; (8003924 <HAL_RCC_ClockConfig+0x1f0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d109      	bne.n	800380a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e08e      	b.n	8003918 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037fa:	4b4a      	ldr	r3, [pc, #296]	; (8003924 <HAL_RCC_ClockConfig+0x1f0>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e086      	b.n	8003918 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800380a:	4b46      	ldr	r3, [pc, #280]	; (8003924 <HAL_RCC_ClockConfig+0x1f0>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f023 0203 	bic.w	r2, r3, #3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	4943      	ldr	r1, [pc, #268]	; (8003924 <HAL_RCC_ClockConfig+0x1f0>)
 8003818:	4313      	orrs	r3, r2
 800381a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800381c:	f7fe fb0c 	bl	8001e38 <HAL_GetTick>
 8003820:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003822:	e00a      	b.n	800383a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003824:	f7fe fb08 	bl	8001e38 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003832:	4293      	cmp	r3, r2
 8003834:	d901      	bls.n	800383a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e06e      	b.n	8003918 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383a:	4b3a      	ldr	r3, [pc, #232]	; (8003924 <HAL_RCC_ClockConfig+0x1f0>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 020c 	and.w	r2, r3, #12
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	429a      	cmp	r2, r3
 800384a:	d1eb      	bne.n	8003824 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d010      	beq.n	800387a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	4b31      	ldr	r3, [pc, #196]	; (8003924 <HAL_RCC_ClockConfig+0x1f0>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003864:	429a      	cmp	r2, r3
 8003866:	d208      	bcs.n	800387a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003868:	4b2e      	ldr	r3, [pc, #184]	; (8003924 <HAL_RCC_ClockConfig+0x1f0>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	492b      	ldr	r1, [pc, #172]	; (8003924 <HAL_RCC_ClockConfig+0x1f0>)
 8003876:	4313      	orrs	r3, r2
 8003878:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800387a:	4b29      	ldr	r3, [pc, #164]	; (8003920 <HAL_RCC_ClockConfig+0x1ec>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d210      	bcs.n	80038aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003888:	4b25      	ldr	r3, [pc, #148]	; (8003920 <HAL_RCC_ClockConfig+0x1ec>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f023 0207 	bic.w	r2, r3, #7
 8003890:	4923      	ldr	r1, [pc, #140]	; (8003920 <HAL_RCC_ClockConfig+0x1ec>)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	4313      	orrs	r3, r2
 8003896:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003898:	4b21      	ldr	r3, [pc, #132]	; (8003920 <HAL_RCC_ClockConfig+0x1ec>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d001      	beq.n	80038aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e036      	b.n	8003918 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d008      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038b6:	4b1b      	ldr	r3, [pc, #108]	; (8003924 <HAL_RCC_ClockConfig+0x1f0>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	4918      	ldr	r1, [pc, #96]	; (8003924 <HAL_RCC_ClockConfig+0x1f0>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d009      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038d4:	4b13      	ldr	r3, [pc, #76]	; (8003924 <HAL_RCC_ClockConfig+0x1f0>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4910      	ldr	r1, [pc, #64]	; (8003924 <HAL_RCC_ClockConfig+0x1f0>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038e8:	f000 f824 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 80038ec:	4602      	mov	r2, r0
 80038ee:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <HAL_RCC_ClockConfig+0x1f0>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	091b      	lsrs	r3, r3, #4
 80038f4:	f003 030f 	and.w	r3, r3, #15
 80038f8:	490b      	ldr	r1, [pc, #44]	; (8003928 <HAL_RCC_ClockConfig+0x1f4>)
 80038fa:	5ccb      	ldrb	r3, [r1, r3]
 80038fc:	f003 031f 	and.w	r3, r3, #31
 8003900:	fa22 f303 	lsr.w	r3, r2, r3
 8003904:	4a09      	ldr	r2, [pc, #36]	; (800392c <HAL_RCC_ClockConfig+0x1f8>)
 8003906:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003908:	4b09      	ldr	r3, [pc, #36]	; (8003930 <HAL_RCC_ClockConfig+0x1fc>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f7fe fa43 	bl	8001d98 <HAL_InitTick>
 8003912:	4603      	mov	r3, r0
 8003914:	72fb      	strb	r3, [r7, #11]

  return status;
 8003916:	7afb      	ldrb	r3, [r7, #11]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40022000 	.word	0x40022000
 8003924:	40021000 	.word	0x40021000
 8003928:	08009100 	.word	0x08009100
 800392c:	20000010 	.word	0x20000010
 8003930:	20000014 	.word	0x20000014

08003934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003934:	b480      	push	{r7}
 8003936:	b089      	sub	sp, #36	; 0x24
 8003938:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	61fb      	str	r3, [r7, #28]
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003942:	4b3e      	ldr	r3, [pc, #248]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 030c 	and.w	r3, r3, #12
 800394a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800394c:	4b3b      	ldr	r3, [pc, #236]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x108>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_RCC_GetSysClockFreq+0x34>
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	2b0c      	cmp	r3, #12
 8003960:	d121      	bne.n	80039a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d11e      	bne.n	80039a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003968:	4b34      	ldr	r3, [pc, #208]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x108>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b00      	cmp	r3, #0
 8003972:	d107      	bne.n	8003984 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003974:	4b31      	ldr	r3, [pc, #196]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800397a:	0a1b      	lsrs	r3, r3, #8
 800397c:	f003 030f 	and.w	r3, r3, #15
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	e005      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003984:	4b2d      	ldr	r3, [pc, #180]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003990:	4a2b      	ldr	r2, [pc, #172]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003998:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10d      	bne.n	80039bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039a4:	e00a      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d102      	bne.n	80039b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039ac:	4b25      	ldr	r3, [pc, #148]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x110>)
 80039ae:	61bb      	str	r3, [r7, #24]
 80039b0:	e004      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d101      	bne.n	80039bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039b8:	4b23      	ldr	r3, [pc, #140]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x114>)
 80039ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	2b0c      	cmp	r3, #12
 80039c0:	d134      	bne.n	8003a2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039c2:	4b1e      	ldr	r3, [pc, #120]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x108>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d003      	beq.n	80039da <HAL_RCC_GetSysClockFreq+0xa6>
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d003      	beq.n	80039e0 <HAL_RCC_GetSysClockFreq+0xac>
 80039d8:	e005      	b.n	80039e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039da:	4b1a      	ldr	r3, [pc, #104]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x110>)
 80039dc:	617b      	str	r3, [r7, #20]
      break;
 80039de:	e005      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039e0:	4b19      	ldr	r3, [pc, #100]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x114>)
 80039e2:	617b      	str	r3, [r7, #20]
      break;
 80039e4:	e002      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	617b      	str	r3, [r7, #20]
      break;
 80039ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039ec:	4b13      	ldr	r3, [pc, #76]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x108>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	091b      	lsrs	r3, r3, #4
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	3301      	adds	r3, #1
 80039f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039fa:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x108>)
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	0a1b      	lsrs	r3, r3, #8
 8003a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	fb03 f202 	mul.w	r2, r3, r2
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a12:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	0e5b      	lsrs	r3, r3, #25
 8003a18:	f003 0303 	and.w	r3, r3, #3
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a2c:	69bb      	ldr	r3, [r7, #24]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3724      	adds	r7, #36	; 0x24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	08009118 	.word	0x08009118
 8003a44:	00f42400 	.word	0x00f42400
 8003a48:	007a1200 	.word	0x007a1200

08003a4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a50:	4b03      	ldr	r3, [pc, #12]	; (8003a60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a52:	681b      	ldr	r3, [r3, #0]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	20000010 	.word	0x20000010

08003a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a68:	f7ff fff0 	bl	8003a4c <HAL_RCC_GetHCLKFreq>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	0a1b      	lsrs	r3, r3, #8
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	4904      	ldr	r1, [pc, #16]	; (8003a8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a7a:	5ccb      	ldrb	r3, [r1, r3]
 8003a7c:	f003 031f 	and.w	r3, r3, #31
 8003a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	08009110 	.word	0x08009110

08003a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a94:	f7ff ffda 	bl	8003a4c <HAL_RCC_GetHCLKFreq>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	0adb      	lsrs	r3, r3, #11
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	4904      	ldr	r1, [pc, #16]	; (8003ab8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003aa6:	5ccb      	ldrb	r3, [r1, r3]
 8003aa8:	f003 031f 	and.w	r3, r3, #31
 8003aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	08009110 	.word	0x08009110

08003abc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ac8:	4b2a      	ldr	r3, [pc, #168]	; (8003b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ad4:	f7ff f9ee 	bl	8002eb4 <HAL_PWREx_GetVoltageRange>
 8003ad8:	6178      	str	r0, [r7, #20]
 8003ada:	e014      	b.n	8003b06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003adc:	4b25      	ldr	r3, [pc, #148]	; (8003b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae0:	4a24      	ldr	r2, [pc, #144]	; (8003b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ae8:	4b22      	ldr	r3, [pc, #136]	; (8003b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003af4:	f7ff f9de 	bl	8002eb4 <HAL_PWREx_GetVoltageRange>
 8003af8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003afa:	4b1e      	ldr	r3, [pc, #120]	; (8003b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afe:	4a1d      	ldr	r2, [pc, #116]	; (8003b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b0c:	d10b      	bne.n	8003b26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b80      	cmp	r3, #128	; 0x80
 8003b12:	d919      	bls.n	8003b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2ba0      	cmp	r3, #160	; 0xa0
 8003b18:	d902      	bls.n	8003b20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	613b      	str	r3, [r7, #16]
 8003b1e:	e013      	b.n	8003b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b20:	2301      	movs	r3, #1
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	e010      	b.n	8003b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b80      	cmp	r3, #128	; 0x80
 8003b2a:	d902      	bls.n	8003b32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	613b      	str	r3, [r7, #16]
 8003b30:	e00a      	b.n	8003b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b80      	cmp	r3, #128	; 0x80
 8003b36:	d102      	bne.n	8003b3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b38:	2302      	movs	r3, #2
 8003b3a:	613b      	str	r3, [r7, #16]
 8003b3c:	e004      	b.n	8003b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b70      	cmp	r3, #112	; 0x70
 8003b42:	d101      	bne.n	8003b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b44:	2301      	movs	r3, #1
 8003b46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f023 0207 	bic.w	r2, r3, #7
 8003b50:	4909      	ldr	r1, [pc, #36]	; (8003b78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b58:	4b07      	ldr	r3, [pc, #28]	; (8003b78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d001      	beq.n	8003b6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40021000 	.word	0x40021000
 8003b78:	40022000 	.word	0x40022000

08003b7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b84:	2300      	movs	r3, #0
 8003b86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b88:	2300      	movs	r3, #0
 8003b8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d041      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ba0:	d02a      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ba2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ba6:	d824      	bhi.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ba8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bac:	d008      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003bae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bb2:	d81e      	bhi.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bbc:	d010      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bbe:	e018      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bc0:	4b86      	ldr	r3, [pc, #536]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	4a85      	ldr	r2, [pc, #532]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bcc:	e015      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fabb 	bl	8004150 <RCCEx_PLLSAI1_Config>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bde:	e00c      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3320      	adds	r3, #32
 8003be4:	2100      	movs	r1, #0
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fba6 	bl	8004338 <RCCEx_PLLSAI2_Config>
 8003bec:	4603      	mov	r3, r0
 8003bee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bf0:	e003      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	74fb      	strb	r3, [r7, #19]
      break;
 8003bf6:	e000      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003bf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bfa:	7cfb      	ldrb	r3, [r7, #19]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10b      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c00:	4b76      	ldr	r3, [pc, #472]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c0e:	4973      	ldr	r1, [pc, #460]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c16:	e001      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c18:	7cfb      	ldrb	r3, [r7, #19]
 8003c1a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d041      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c30:	d02a      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c36:	d824      	bhi.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c3c:	d008      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c42:	d81e      	bhi.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c4c:	d010      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c4e:	e018      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c50:	4b62      	ldr	r3, [pc, #392]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4a61      	ldr	r2, [pc, #388]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c5a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c5c:	e015      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3304      	adds	r3, #4
 8003c62:	2100      	movs	r1, #0
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 fa73 	bl	8004150 <RCCEx_PLLSAI1_Config>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c6e:	e00c      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3320      	adds	r3, #32
 8003c74:	2100      	movs	r1, #0
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 fb5e 	bl	8004338 <RCCEx_PLLSAI2_Config>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c80:	e003      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	74fb      	strb	r3, [r7, #19]
      break;
 8003c86:	e000      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c8a:	7cfb      	ldrb	r3, [r7, #19]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10b      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c90:	4b52      	ldr	r3, [pc, #328]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c96:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c9e:	494f      	ldr	r1, [pc, #316]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ca6:	e001      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca8:	7cfb      	ldrb	r3, [r7, #19]
 8003caa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80a0 	beq.w	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cbe:	4b47      	ldr	r3, [pc, #284]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00d      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cd4:	4b41      	ldr	r3, [pc, #260]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd8:	4a40      	ldr	r2, [pc, #256]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cde:	6593      	str	r3, [r2, #88]	; 0x58
 8003ce0:	4b3e      	ldr	r3, [pc, #248]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cec:	2301      	movs	r3, #1
 8003cee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cf0:	4b3b      	ldr	r3, [pc, #236]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a3a      	ldr	r2, [pc, #232]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cfa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cfc:	f7fe f89c 	bl	8001e38 <HAL_GetTick>
 8003d00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d02:	e009      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d04:	f7fe f898 	bl	8001e38 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d902      	bls.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	74fb      	strb	r3, [r7, #19]
        break;
 8003d16:	e005      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d18:	4b31      	ldr	r3, [pc, #196]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0ef      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d24:	7cfb      	ldrb	r3, [r7, #19]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d15c      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d2a:	4b2c      	ldr	r3, [pc, #176]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d01f      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d019      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d48:	4b24      	ldr	r3, [pc, #144]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d54:	4b21      	ldr	r3, [pc, #132]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5a:	4a20      	ldr	r2, [pc, #128]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d64:	4b1d      	ldr	r3, [pc, #116]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6a:	4a1c      	ldr	r2, [pc, #112]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d74:	4a19      	ldr	r2, [pc, #100]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d016      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d86:	f7fe f857 	bl	8001e38 <HAL_GetTick>
 8003d8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d8c:	e00b      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d8e:	f7fe f853 	bl	8001e38 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d902      	bls.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	74fb      	strb	r3, [r7, #19]
            break;
 8003da4:	e006      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003da6:	4b0d      	ldr	r3, [pc, #52]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0ec      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003db4:	7cfb      	ldrb	r3, [r7, #19]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10c      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dba:	4b08      	ldr	r3, [pc, #32]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dca:	4904      	ldr	r1, [pc, #16]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003dd2:	e009      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dd4:	7cfb      	ldrb	r3, [r7, #19]
 8003dd6:	74bb      	strb	r3, [r7, #18]
 8003dd8:	e006      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003dda:	bf00      	nop
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de4:	7cfb      	ldrb	r3, [r7, #19]
 8003de6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003de8:	7c7b      	ldrb	r3, [r7, #17]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d105      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dee:	4b9e      	ldr	r3, [pc, #632]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df2:	4a9d      	ldr	r2, [pc, #628]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003df8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e06:	4b98      	ldr	r3, [pc, #608]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0c:	f023 0203 	bic.w	r2, r3, #3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e14:	4994      	ldr	r1, [pc, #592]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e28:	4b8f      	ldr	r3, [pc, #572]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2e:	f023 020c 	bic.w	r2, r3, #12
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e36:	498c      	ldr	r1, [pc, #560]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0304 	and.w	r3, r3, #4
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e4a:	4b87      	ldr	r3, [pc, #540]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	4983      	ldr	r1, [pc, #524]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e6c:	4b7e      	ldr	r3, [pc, #504]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	497b      	ldr	r1, [pc, #492]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0310 	and.w	r3, r3, #16
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e8e:	4b76      	ldr	r3, [pc, #472]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9c:	4972      	ldr	r1, [pc, #456]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003eb0:	4b6d      	ldr	r3, [pc, #436]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ebe:	496a      	ldr	r1, [pc, #424]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ed2:	4b65      	ldr	r3, [pc, #404]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee0:	4961      	ldr	r1, [pc, #388]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ef4:	4b5c      	ldr	r3, [pc, #368]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f02:	4959      	ldr	r1, [pc, #356]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f16:	4b54      	ldr	r3, [pc, #336]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f24:	4950      	ldr	r1, [pc, #320]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f38:	4b4b      	ldr	r3, [pc, #300]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f46:	4948      	ldr	r1, [pc, #288]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f5a:	4b43      	ldr	r3, [pc, #268]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f68:	493f      	ldr	r1, [pc, #252]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d028      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f7c:	4b3a      	ldr	r3, [pc, #232]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f8a:	4937      	ldr	r1, [pc, #220]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f9a:	d106      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f9c:	4b32      	ldr	r3, [pc, #200]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	4a31      	ldr	r2, [pc, #196]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fa6:	60d3      	str	r3, [r2, #12]
 8003fa8:	e011      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fb2:	d10c      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	2101      	movs	r1, #1
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 f8c8 	bl	8004150 <RCCEx_PLLSAI1_Config>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fc4:	7cfb      	ldrb	r3, [r7, #19]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003fca:	7cfb      	ldrb	r3, [r7, #19]
 8003fcc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d028      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fda:	4b23      	ldr	r3, [pc, #140]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe8:	491f      	ldr	r1, [pc, #124]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ff8:	d106      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ffa:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	4a1a      	ldr	r2, [pc, #104]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004000:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004004:	60d3      	str	r3, [r2, #12]
 8004006:	e011      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004010:	d10c      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3304      	adds	r3, #4
 8004016:	2101      	movs	r1, #1
 8004018:	4618      	mov	r0, r3
 800401a:	f000 f899 	bl	8004150 <RCCEx_PLLSAI1_Config>
 800401e:	4603      	mov	r3, r0
 8004020:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004022:	7cfb      	ldrb	r3, [r7, #19]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004028:	7cfb      	ldrb	r3, [r7, #19]
 800402a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d02b      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004038:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004046:	4908      	ldr	r1, [pc, #32]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004052:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004056:	d109      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004058:	4b03      	ldr	r3, [pc, #12]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	4a02      	ldr	r2, [pc, #8]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004062:	60d3      	str	r3, [r2, #12]
 8004064:	e014      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004066:	bf00      	nop
 8004068:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004070:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004074:	d10c      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3304      	adds	r3, #4
 800407a:	2101      	movs	r1, #1
 800407c:	4618      	mov	r0, r3
 800407e:	f000 f867 	bl	8004150 <RCCEx_PLLSAI1_Config>
 8004082:	4603      	mov	r3, r0
 8004084:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004086:	7cfb      	ldrb	r3, [r7, #19]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800408c:	7cfb      	ldrb	r3, [r7, #19]
 800408e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d02f      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800409c:	4b2b      	ldr	r3, [pc, #172]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800409e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040aa:	4928      	ldr	r1, [pc, #160]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040ba:	d10d      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3304      	adds	r3, #4
 80040c0:	2102      	movs	r1, #2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 f844 	bl	8004150 <RCCEx_PLLSAI1_Config>
 80040c8:	4603      	mov	r3, r0
 80040ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040cc:	7cfb      	ldrb	r3, [r7, #19]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d014      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040d2:	7cfb      	ldrb	r3, [r7, #19]
 80040d4:	74bb      	strb	r3, [r7, #18]
 80040d6:	e011      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e0:	d10c      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3320      	adds	r3, #32
 80040e6:	2102      	movs	r1, #2
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 f925 	bl	8004338 <RCCEx_PLLSAI2_Config>
 80040ee:	4603      	mov	r3, r0
 80040f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040f2:	7cfb      	ldrb	r3, [r7, #19]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040f8:	7cfb      	ldrb	r3, [r7, #19]
 80040fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004108:	4b10      	ldr	r3, [pc, #64]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004116:	490d      	ldr	r1, [pc, #52]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00b      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800412a:	4b08      	ldr	r3, [pc, #32]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800412c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004130:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800413a:	4904      	ldr	r1, [pc, #16]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004142:	7cbb      	ldrb	r3, [r7, #18]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40021000 	.word	0x40021000

08004150 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800415e:	4b75      	ldr	r3, [pc, #468]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d018      	beq.n	800419c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800416a:	4b72      	ldr	r3, [pc, #456]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f003 0203 	and.w	r2, r3, #3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d10d      	bne.n	8004196 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
       ||
 800417e:	2b00      	cmp	r3, #0
 8004180:	d009      	beq.n	8004196 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004182:	4b6c      	ldr	r3, [pc, #432]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	091b      	lsrs	r3, r3, #4
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
       ||
 8004192:	429a      	cmp	r2, r3
 8004194:	d047      	beq.n	8004226 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	73fb      	strb	r3, [r7, #15]
 800419a:	e044      	b.n	8004226 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d018      	beq.n	80041d6 <RCCEx_PLLSAI1_Config+0x86>
 80041a4:	2b03      	cmp	r3, #3
 80041a6:	d825      	bhi.n	80041f4 <RCCEx_PLLSAI1_Config+0xa4>
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d002      	beq.n	80041b2 <RCCEx_PLLSAI1_Config+0x62>
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d009      	beq.n	80041c4 <RCCEx_PLLSAI1_Config+0x74>
 80041b0:	e020      	b.n	80041f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041b2:	4b60      	ldr	r3, [pc, #384]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d11d      	bne.n	80041fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c2:	e01a      	b.n	80041fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041c4:	4b5b      	ldr	r3, [pc, #364]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d116      	bne.n	80041fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041d4:	e013      	b.n	80041fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041d6:	4b57      	ldr	r3, [pc, #348]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10f      	bne.n	8004202 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041e2:	4b54      	ldr	r3, [pc, #336]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d109      	bne.n	8004202 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041f2:	e006      	b.n	8004202 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	73fb      	strb	r3, [r7, #15]
      break;
 80041f8:	e004      	b.n	8004204 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041fa:	bf00      	nop
 80041fc:	e002      	b.n	8004204 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041fe:	bf00      	nop
 8004200:	e000      	b.n	8004204 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004202:	bf00      	nop
    }

    if(status == HAL_OK)
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10d      	bne.n	8004226 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800420a:	4b4a      	ldr	r3, [pc, #296]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6819      	ldr	r1, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	3b01      	subs	r3, #1
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	430b      	orrs	r3, r1
 8004220:	4944      	ldr	r1, [pc, #272]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004222:	4313      	orrs	r3, r2
 8004224:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d17d      	bne.n	8004328 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800422c:	4b41      	ldr	r3, [pc, #260]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a40      	ldr	r2, [pc, #256]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004232:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004236:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004238:	f7fd fdfe 	bl	8001e38 <HAL_GetTick>
 800423c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800423e:	e009      	b.n	8004254 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004240:	f7fd fdfa 	bl	8001e38 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d902      	bls.n	8004254 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	73fb      	strb	r3, [r7, #15]
        break;
 8004252:	e005      	b.n	8004260 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004254:	4b37      	ldr	r3, [pc, #220]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1ef      	bne.n	8004240 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d160      	bne.n	8004328 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d111      	bne.n	8004290 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800426c:	4b31      	ldr	r3, [pc, #196]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6892      	ldr	r2, [r2, #8]
 800427c:	0211      	lsls	r1, r2, #8
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	68d2      	ldr	r2, [r2, #12]
 8004282:	0912      	lsrs	r2, r2, #4
 8004284:	0452      	lsls	r2, r2, #17
 8004286:	430a      	orrs	r2, r1
 8004288:	492a      	ldr	r1, [pc, #168]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800428a:	4313      	orrs	r3, r2
 800428c:	610b      	str	r3, [r1, #16]
 800428e:	e027      	b.n	80042e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d112      	bne.n	80042bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004296:	4b27      	ldr	r3, [pc, #156]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800429e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6892      	ldr	r2, [r2, #8]
 80042a6:	0211      	lsls	r1, r2, #8
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6912      	ldr	r2, [r2, #16]
 80042ac:	0852      	lsrs	r2, r2, #1
 80042ae:	3a01      	subs	r2, #1
 80042b0:	0552      	lsls	r2, r2, #21
 80042b2:	430a      	orrs	r2, r1
 80042b4:	491f      	ldr	r1, [pc, #124]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	610b      	str	r3, [r1, #16]
 80042ba:	e011      	b.n	80042e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042bc:	4b1d      	ldr	r3, [pc, #116]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6892      	ldr	r2, [r2, #8]
 80042cc:	0211      	lsls	r1, r2, #8
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6952      	ldr	r2, [r2, #20]
 80042d2:	0852      	lsrs	r2, r2, #1
 80042d4:	3a01      	subs	r2, #1
 80042d6:	0652      	lsls	r2, r2, #25
 80042d8:	430a      	orrs	r2, r1
 80042da:	4916      	ldr	r1, [pc, #88]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042e0:	4b14      	ldr	r3, [pc, #80]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a13      	ldr	r2, [pc, #76]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ec:	f7fd fda4 	bl	8001e38 <HAL_GetTick>
 80042f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042f2:	e009      	b.n	8004308 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042f4:	f7fd fda0 	bl	8001e38 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d902      	bls.n	8004308 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	73fb      	strb	r3, [r7, #15]
          break;
 8004306:	e005      	b.n	8004314 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004308:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0ef      	beq.n	80042f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004314:	7bfb      	ldrb	r3, [r7, #15]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d106      	bne.n	8004328 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800431a:	4b06      	ldr	r3, [pc, #24]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800431c:	691a      	ldr	r2, [r3, #16]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	4904      	ldr	r1, [pc, #16]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004324:	4313      	orrs	r3, r2
 8004326:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004328:	7bfb      	ldrb	r3, [r7, #15]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	40021000 	.word	0x40021000

08004338 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004346:	4b6a      	ldr	r3, [pc, #424]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d018      	beq.n	8004384 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004352:	4b67      	ldr	r3, [pc, #412]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f003 0203 	and.w	r2, r3, #3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d10d      	bne.n	800437e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
       ||
 8004366:	2b00      	cmp	r3, #0
 8004368:	d009      	beq.n	800437e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800436a:	4b61      	ldr	r3, [pc, #388]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	091b      	lsrs	r3, r3, #4
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
       ||
 800437a:	429a      	cmp	r2, r3
 800437c:	d047      	beq.n	800440e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	73fb      	strb	r3, [r7, #15]
 8004382:	e044      	b.n	800440e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b03      	cmp	r3, #3
 800438a:	d018      	beq.n	80043be <RCCEx_PLLSAI2_Config+0x86>
 800438c:	2b03      	cmp	r3, #3
 800438e:	d825      	bhi.n	80043dc <RCCEx_PLLSAI2_Config+0xa4>
 8004390:	2b01      	cmp	r3, #1
 8004392:	d002      	beq.n	800439a <RCCEx_PLLSAI2_Config+0x62>
 8004394:	2b02      	cmp	r3, #2
 8004396:	d009      	beq.n	80043ac <RCCEx_PLLSAI2_Config+0x74>
 8004398:	e020      	b.n	80043dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800439a:	4b55      	ldr	r3, [pc, #340]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d11d      	bne.n	80043e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043aa:	e01a      	b.n	80043e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043ac:	4b50      	ldr	r3, [pc, #320]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d116      	bne.n	80043e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043bc:	e013      	b.n	80043e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043be:	4b4c      	ldr	r3, [pc, #304]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10f      	bne.n	80043ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043ca:	4b49      	ldr	r3, [pc, #292]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d109      	bne.n	80043ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043da:	e006      	b.n	80043ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	73fb      	strb	r3, [r7, #15]
      break;
 80043e0:	e004      	b.n	80043ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043e2:	bf00      	nop
 80043e4:	e002      	b.n	80043ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043e6:	bf00      	nop
 80043e8:	e000      	b.n	80043ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10d      	bne.n	800440e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043f2:	4b3f      	ldr	r3, [pc, #252]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6819      	ldr	r1, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	3b01      	subs	r3, #1
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	430b      	orrs	r3, r1
 8004408:	4939      	ldr	r1, [pc, #228]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800440a:	4313      	orrs	r3, r2
 800440c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800440e:	7bfb      	ldrb	r3, [r7, #15]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d167      	bne.n	80044e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004414:	4b36      	ldr	r3, [pc, #216]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a35      	ldr	r2, [pc, #212]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800441a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800441e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004420:	f7fd fd0a 	bl	8001e38 <HAL_GetTick>
 8004424:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004426:	e009      	b.n	800443c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004428:	f7fd fd06 	bl	8001e38 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d902      	bls.n	800443c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	73fb      	strb	r3, [r7, #15]
        break;
 800443a:	e005      	b.n	8004448 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800443c:	4b2c      	ldr	r3, [pc, #176]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1ef      	bne.n	8004428 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004448:	7bfb      	ldrb	r3, [r7, #15]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d14a      	bne.n	80044e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d111      	bne.n	8004478 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004454:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800445c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6892      	ldr	r2, [r2, #8]
 8004464:	0211      	lsls	r1, r2, #8
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	68d2      	ldr	r2, [r2, #12]
 800446a:	0912      	lsrs	r2, r2, #4
 800446c:	0452      	lsls	r2, r2, #17
 800446e:	430a      	orrs	r2, r1
 8004470:	491f      	ldr	r1, [pc, #124]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004472:	4313      	orrs	r3, r2
 8004474:	614b      	str	r3, [r1, #20]
 8004476:	e011      	b.n	800449c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004478:	4b1d      	ldr	r3, [pc, #116]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004480:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6892      	ldr	r2, [r2, #8]
 8004488:	0211      	lsls	r1, r2, #8
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6912      	ldr	r2, [r2, #16]
 800448e:	0852      	lsrs	r2, r2, #1
 8004490:	3a01      	subs	r2, #1
 8004492:	0652      	lsls	r2, r2, #25
 8004494:	430a      	orrs	r2, r1
 8004496:	4916      	ldr	r1, [pc, #88]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004498:	4313      	orrs	r3, r2
 800449a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800449c:	4b14      	ldr	r3, [pc, #80]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a13      	ldr	r2, [pc, #76]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a8:	f7fd fcc6 	bl	8001e38 <HAL_GetTick>
 80044ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044ae:	e009      	b.n	80044c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044b0:	f7fd fcc2 	bl	8001e38 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d902      	bls.n	80044c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	73fb      	strb	r3, [r7, #15]
          break;
 80044c2:	e005      	b.n	80044d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044c4:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0ef      	beq.n	80044b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d106      	bne.n	80044e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044d6:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044d8:	695a      	ldr	r2, [r3, #20]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	4904      	ldr	r1, [pc, #16]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	40021000 	.word	0x40021000

080044f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e049      	b.n	800459a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fd fac8 	bl	8001ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3304      	adds	r3, #4
 8004530:	4619      	mov	r1, r3
 8004532:	4610      	mov	r0, r2
 8004534:	f000 fe28 	bl	8005188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d001      	beq.n	80045bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e047      	b.n	800464c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a23      	ldr	r2, [pc, #140]	; (8004658 <HAL_TIM_Base_Start+0xb4>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d01d      	beq.n	800460a <HAL_TIM_Base_Start+0x66>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d6:	d018      	beq.n	800460a <HAL_TIM_Base_Start+0x66>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a1f      	ldr	r2, [pc, #124]	; (800465c <HAL_TIM_Base_Start+0xb8>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d013      	beq.n	800460a <HAL_TIM_Base_Start+0x66>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a1e      	ldr	r2, [pc, #120]	; (8004660 <HAL_TIM_Base_Start+0xbc>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d00e      	beq.n	800460a <HAL_TIM_Base_Start+0x66>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a1c      	ldr	r2, [pc, #112]	; (8004664 <HAL_TIM_Base_Start+0xc0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d009      	beq.n	800460a <HAL_TIM_Base_Start+0x66>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a1b      	ldr	r2, [pc, #108]	; (8004668 <HAL_TIM_Base_Start+0xc4>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d004      	beq.n	800460a <HAL_TIM_Base_Start+0x66>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a19      	ldr	r2, [pc, #100]	; (800466c <HAL_TIM_Base_Start+0xc8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d115      	bne.n	8004636 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	4b17      	ldr	r3, [pc, #92]	; (8004670 <HAL_TIM_Base_Start+0xcc>)
 8004612:	4013      	ands	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b06      	cmp	r3, #6
 800461a:	d015      	beq.n	8004648 <HAL_TIM_Base_Start+0xa4>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004622:	d011      	beq.n	8004648 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0201 	orr.w	r2, r2, #1
 8004632:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004634:	e008      	b.n	8004648 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f042 0201 	orr.w	r2, r2, #1
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	e000      	b.n	800464a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004648:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	40012c00 	.word	0x40012c00
 800465c:	40000400 	.word	0x40000400
 8004660:	40000800 	.word	0x40000800
 8004664:	40000c00 	.word	0x40000c00
 8004668:	40013400 	.word	0x40013400
 800466c:	40014000 	.word	0x40014000
 8004670:	00010007 	.word	0x00010007

08004674 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e049      	b.n	800471a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f841 	bl	8004722 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3304      	adds	r3, #4
 80046b0:	4619      	mov	r1, r3
 80046b2:	4610      	mov	r0, r2
 80046b4:	f000 fd68 	bl	8005188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800472a:	bf00      	nop
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
	...

08004738 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d109      	bne.n	800475c <HAL_TIM_PWM_Start+0x24>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b01      	cmp	r3, #1
 8004752:	bf14      	ite	ne
 8004754:	2301      	movne	r3, #1
 8004756:	2300      	moveq	r3, #0
 8004758:	b2db      	uxtb	r3, r3
 800475a:	e03c      	b.n	80047d6 <HAL_TIM_PWM_Start+0x9e>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2b04      	cmp	r3, #4
 8004760:	d109      	bne.n	8004776 <HAL_TIM_PWM_Start+0x3e>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b01      	cmp	r3, #1
 800476c:	bf14      	ite	ne
 800476e:	2301      	movne	r3, #1
 8004770:	2300      	moveq	r3, #0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	e02f      	b.n	80047d6 <HAL_TIM_PWM_Start+0x9e>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b08      	cmp	r3, #8
 800477a:	d109      	bne.n	8004790 <HAL_TIM_PWM_Start+0x58>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b01      	cmp	r3, #1
 8004786:	bf14      	ite	ne
 8004788:	2301      	movne	r3, #1
 800478a:	2300      	moveq	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	e022      	b.n	80047d6 <HAL_TIM_PWM_Start+0x9e>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2b0c      	cmp	r3, #12
 8004794:	d109      	bne.n	80047aa <HAL_TIM_PWM_Start+0x72>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b01      	cmp	r3, #1
 80047a0:	bf14      	ite	ne
 80047a2:	2301      	movne	r3, #1
 80047a4:	2300      	moveq	r3, #0
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	e015      	b.n	80047d6 <HAL_TIM_PWM_Start+0x9e>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b10      	cmp	r3, #16
 80047ae:	d109      	bne.n	80047c4 <HAL_TIM_PWM_Start+0x8c>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	bf14      	ite	ne
 80047bc:	2301      	movne	r3, #1
 80047be:	2300      	moveq	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	e008      	b.n	80047d6 <HAL_TIM_PWM_Start+0x9e>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	bf14      	ite	ne
 80047d0:	2301      	movne	r3, #1
 80047d2:	2300      	moveq	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e09c      	b.n	8004918 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d104      	bne.n	80047ee <HAL_TIM_PWM_Start+0xb6>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047ec:	e023      	b.n	8004836 <HAL_TIM_PWM_Start+0xfe>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	d104      	bne.n	80047fe <HAL_TIM_PWM_Start+0xc6>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047fc:	e01b      	b.n	8004836 <HAL_TIM_PWM_Start+0xfe>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b08      	cmp	r3, #8
 8004802:	d104      	bne.n	800480e <HAL_TIM_PWM_Start+0xd6>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800480c:	e013      	b.n	8004836 <HAL_TIM_PWM_Start+0xfe>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b0c      	cmp	r3, #12
 8004812:	d104      	bne.n	800481e <HAL_TIM_PWM_Start+0xe6>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800481c:	e00b      	b.n	8004836 <HAL_TIM_PWM_Start+0xfe>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b10      	cmp	r3, #16
 8004822:	d104      	bne.n	800482e <HAL_TIM_PWM_Start+0xf6>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800482c:	e003      	b.n	8004836 <HAL_TIM_PWM_Start+0xfe>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2202      	movs	r2, #2
 8004832:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2201      	movs	r2, #1
 800483c:	6839      	ldr	r1, [r7, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f001 f9d0 	bl	8005be4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a35      	ldr	r2, [pc, #212]	; (8004920 <HAL_TIM_PWM_Start+0x1e8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d013      	beq.n	8004876 <HAL_TIM_PWM_Start+0x13e>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a34      	ldr	r2, [pc, #208]	; (8004924 <HAL_TIM_PWM_Start+0x1ec>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d00e      	beq.n	8004876 <HAL_TIM_PWM_Start+0x13e>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a32      	ldr	r2, [pc, #200]	; (8004928 <HAL_TIM_PWM_Start+0x1f0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d009      	beq.n	8004876 <HAL_TIM_PWM_Start+0x13e>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a31      	ldr	r2, [pc, #196]	; (800492c <HAL_TIM_PWM_Start+0x1f4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d004      	beq.n	8004876 <HAL_TIM_PWM_Start+0x13e>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a2f      	ldr	r2, [pc, #188]	; (8004930 <HAL_TIM_PWM_Start+0x1f8>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d101      	bne.n	800487a <HAL_TIM_PWM_Start+0x142>
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <HAL_TIM_PWM_Start+0x144>
 800487a:	2300      	movs	r3, #0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d007      	beq.n	8004890 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800488e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a22      	ldr	r2, [pc, #136]	; (8004920 <HAL_TIM_PWM_Start+0x1e8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d01d      	beq.n	80048d6 <HAL_TIM_PWM_Start+0x19e>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a2:	d018      	beq.n	80048d6 <HAL_TIM_PWM_Start+0x19e>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a22      	ldr	r2, [pc, #136]	; (8004934 <HAL_TIM_PWM_Start+0x1fc>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d013      	beq.n	80048d6 <HAL_TIM_PWM_Start+0x19e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a21      	ldr	r2, [pc, #132]	; (8004938 <HAL_TIM_PWM_Start+0x200>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00e      	beq.n	80048d6 <HAL_TIM_PWM_Start+0x19e>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a1f      	ldr	r2, [pc, #124]	; (800493c <HAL_TIM_PWM_Start+0x204>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d009      	beq.n	80048d6 <HAL_TIM_PWM_Start+0x19e>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a17      	ldr	r2, [pc, #92]	; (8004924 <HAL_TIM_PWM_Start+0x1ec>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d004      	beq.n	80048d6 <HAL_TIM_PWM_Start+0x19e>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a15      	ldr	r2, [pc, #84]	; (8004928 <HAL_TIM_PWM_Start+0x1f0>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d115      	bne.n	8004902 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	4b18      	ldr	r3, [pc, #96]	; (8004940 <HAL_TIM_PWM_Start+0x208>)
 80048de:	4013      	ands	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2b06      	cmp	r3, #6
 80048e6:	d015      	beq.n	8004914 <HAL_TIM_PWM_Start+0x1dc>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ee:	d011      	beq.n	8004914 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0201 	orr.w	r2, r2, #1
 80048fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004900:	e008      	b.n	8004914 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 0201 	orr.w	r2, r2, #1
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	e000      	b.n	8004916 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004914:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40012c00 	.word	0x40012c00
 8004924:	40013400 	.word	0x40013400
 8004928:	40014000 	.word	0x40014000
 800492c:	40014400 	.word	0x40014400
 8004930:	40014800 	.word	0x40014800
 8004934:	40000400 	.word	0x40000400
 8004938:	40000800 	.word	0x40000800
 800493c:	40000c00 	.word	0x40000c00
 8004940:	00010007 	.word	0x00010007

08004944 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e049      	b.n	80049ea <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d106      	bne.n	8004970 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fd f854 	bl	8001a18 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3304      	adds	r3, #4
 8004980:	4619      	mov	r1, r3
 8004982:	4610      	mov	r0, r2
 8004984:	f000 fc00 	bl	8005188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b082      	sub	sp, #8
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d122      	bne.n	8004a4e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d11b      	bne.n	8004a4e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f06f 0202 	mvn.w	r2, #2
 8004a1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	f003 0303 	and.w	r3, r3, #3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 fb88 	bl	800514a <HAL_TIM_IC_CaptureCallback>
 8004a3a:	e005      	b.n	8004a48 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 fb7a 	bl	8005136 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 fb8b 	bl	800515e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d122      	bne.n	8004aa2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f003 0304 	and.w	r3, r3, #4
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d11b      	bne.n	8004aa2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f06f 0204 	mvn.w	r2, #4
 8004a72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 fb5e 	bl	800514a <HAL_TIM_IC_CaptureCallback>
 8004a8e:	e005      	b.n	8004a9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 fb50 	bl	8005136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 fb61 	bl	800515e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d122      	bne.n	8004af6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d11b      	bne.n	8004af6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f06f 0208 	mvn.w	r2, #8
 8004ac6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2204      	movs	r2, #4
 8004acc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	f003 0303 	and.w	r3, r3, #3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 fb34 	bl	800514a <HAL_TIM_IC_CaptureCallback>
 8004ae2:	e005      	b.n	8004af0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fb26 	bl	8005136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 fb37 	bl	800515e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f003 0310 	and.w	r3, r3, #16
 8004b00:	2b10      	cmp	r3, #16
 8004b02:	d122      	bne.n	8004b4a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f003 0310 	and.w	r3, r3, #16
 8004b0e:	2b10      	cmp	r3, #16
 8004b10:	d11b      	bne.n	8004b4a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f06f 0210 	mvn.w	r2, #16
 8004b1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2208      	movs	r2, #8
 8004b20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 fb0a 	bl	800514a <HAL_TIM_IC_CaptureCallback>
 8004b36:	e005      	b.n	8004b44 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 fafc 	bl	8005136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fb0d 	bl	800515e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d10e      	bne.n	8004b76 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d107      	bne.n	8004b76 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f06f 0201 	mvn.w	r2, #1
 8004b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fad6 	bl	8005122 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b80:	2b80      	cmp	r3, #128	; 0x80
 8004b82:	d10e      	bne.n	8004ba2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8e:	2b80      	cmp	r3, #128	; 0x80
 8004b90:	d107      	bne.n	8004ba2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f001 f8d9 	bl	8005d54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb0:	d10e      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bbc:	2b80      	cmp	r3, #128	; 0x80
 8004bbe:	d107      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f001 f8cc 	bl	8005d68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bda:	2b40      	cmp	r3, #64	; 0x40
 8004bdc:	d10e      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be8:	2b40      	cmp	r3, #64	; 0x40
 8004bea:	d107      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fabb 	bl	8005172 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f003 0320 	and.w	r3, r3, #32
 8004c06:	2b20      	cmp	r3, #32
 8004c08:	d10e      	bne.n	8004c28 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f003 0320 	and.w	r3, r3, #32
 8004c14:	2b20      	cmp	r3, #32
 8004c16:	d107      	bne.n	8004c28 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0220 	mvn.w	r2, #32
 8004c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f001 f88c 	bl	8005d40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c28:	bf00      	nop
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d101      	bne.n	8004c4e <HAL_TIM_IC_ConfigChannel+0x1e>
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	e088      	b.n	8004d60 <HAL_TIM_IC_ConfigChannel+0x130>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d11b      	bne.n	8004c94 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6818      	ldr	r0, [r3, #0]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	6819      	ldr	r1, [r3, #0]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f000 fdfc 	bl	8005868 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699a      	ldr	r2, [r3, #24]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 020c 	bic.w	r2, r2, #12
 8004c7e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6999      	ldr	r1, [r3, #24]
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	619a      	str	r2, [r3, #24]
 8004c92:	e060      	b.n	8004d56 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d11c      	bne.n	8004cd4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6818      	ldr	r0, [r3, #0]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	6819      	ldr	r1, [r3, #0]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f000 fe7a 	bl	80059a2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	699a      	ldr	r2, [r3, #24]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004cbc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6999      	ldr	r1, [r3, #24]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	021a      	lsls	r2, r3, #8
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	619a      	str	r2, [r3, #24]
 8004cd2:	e040      	b.n	8004d56 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d11b      	bne.n	8004d12 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6818      	ldr	r0, [r3, #0]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	6819      	ldr	r1, [r3, #0]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f000 fec7 	bl	8005a7c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69da      	ldr	r2, [r3, #28]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 020c 	bic.w	r2, r2, #12
 8004cfc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69d9      	ldr	r1, [r3, #28]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	61da      	str	r2, [r3, #28]
 8004d10:	e021      	b.n	8004d56 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b0c      	cmp	r3, #12
 8004d16:	d11c      	bne.n	8004d52 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	6819      	ldr	r1, [r3, #0]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f000 fee4 	bl	8005af4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	69da      	ldr	r2, [r3, #28]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d3a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	69d9      	ldr	r1, [r3, #28]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	021a      	lsls	r2, r3, #8
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	61da      	str	r2, [r3, #28]
 8004d50:	e001      	b.n	8004d56 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3718      	adds	r7, #24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d101      	bne.n	8004d86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d82:	2302      	movs	r3, #2
 8004d84:	e0ff      	b.n	8004f86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b14      	cmp	r3, #20
 8004d92:	f200 80f0 	bhi.w	8004f76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d96:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9c:	08004df1 	.word	0x08004df1
 8004da0:	08004f77 	.word	0x08004f77
 8004da4:	08004f77 	.word	0x08004f77
 8004da8:	08004f77 	.word	0x08004f77
 8004dac:	08004e31 	.word	0x08004e31
 8004db0:	08004f77 	.word	0x08004f77
 8004db4:	08004f77 	.word	0x08004f77
 8004db8:	08004f77 	.word	0x08004f77
 8004dbc:	08004e73 	.word	0x08004e73
 8004dc0:	08004f77 	.word	0x08004f77
 8004dc4:	08004f77 	.word	0x08004f77
 8004dc8:	08004f77 	.word	0x08004f77
 8004dcc:	08004eb3 	.word	0x08004eb3
 8004dd0:	08004f77 	.word	0x08004f77
 8004dd4:	08004f77 	.word	0x08004f77
 8004dd8:	08004f77 	.word	0x08004f77
 8004ddc:	08004ef5 	.word	0x08004ef5
 8004de0:	08004f77 	.word	0x08004f77
 8004de4:	08004f77 	.word	0x08004f77
 8004de8:	08004f77 	.word	0x08004f77
 8004dec:	08004f35 	.word	0x08004f35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68b9      	ldr	r1, [r7, #8]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 fa60 	bl	80052bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0208 	orr.w	r2, r2, #8
 8004e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0204 	bic.w	r2, r2, #4
 8004e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6999      	ldr	r1, [r3, #24]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	619a      	str	r2, [r3, #24]
      break;
 8004e2e:	e0a5      	b.n	8004f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fad0 	bl	80053dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699a      	ldr	r2, [r3, #24]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6999      	ldr	r1, [r3, #24]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	021a      	lsls	r2, r3, #8
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	619a      	str	r2, [r3, #24]
      break;
 8004e70:	e084      	b.n	8004f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68b9      	ldr	r1, [r7, #8]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fb39 	bl	80054f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f042 0208 	orr.w	r2, r2, #8
 8004e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	69da      	ldr	r2, [r3, #28]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0204 	bic.w	r2, r2, #4
 8004e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69d9      	ldr	r1, [r3, #28]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	61da      	str	r2, [r3, #28]
      break;
 8004eb0:	e064      	b.n	8004f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68b9      	ldr	r1, [r7, #8]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 fba1 	bl	8005600 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69da      	ldr	r2, [r3, #28]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69da      	ldr	r2, [r3, #28]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69d9      	ldr	r1, [r3, #28]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	021a      	lsls	r2, r3, #8
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	61da      	str	r2, [r3, #28]
      break;
 8004ef2:	e043      	b.n	8004f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68b9      	ldr	r1, [r7, #8]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 fbea 	bl	80056d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0208 	orr.w	r2, r2, #8
 8004f0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0204 	bic.w	r2, r2, #4
 8004f1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	691a      	ldr	r2, [r3, #16]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f32:	e023      	b.n	8004f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68b9      	ldr	r1, [r7, #8]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fc2e 	bl	800579c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	021a      	lsls	r2, r3, #8
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f74:	e002      	b.n	8004f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	75fb      	strb	r3, [r7, #23]
      break;
 8004f7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop

08004f90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d101      	bne.n	8004fac <HAL_TIM_ConfigClockSource+0x1c>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	e0b6      	b.n	800511a <HAL_TIM_ConfigClockSource+0x18a>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fe8:	d03e      	beq.n	8005068 <HAL_TIM_ConfigClockSource+0xd8>
 8004fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fee:	f200 8087 	bhi.w	8005100 <HAL_TIM_ConfigClockSource+0x170>
 8004ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff6:	f000 8086 	beq.w	8005106 <HAL_TIM_ConfigClockSource+0x176>
 8004ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffe:	d87f      	bhi.n	8005100 <HAL_TIM_ConfigClockSource+0x170>
 8005000:	2b70      	cmp	r3, #112	; 0x70
 8005002:	d01a      	beq.n	800503a <HAL_TIM_ConfigClockSource+0xaa>
 8005004:	2b70      	cmp	r3, #112	; 0x70
 8005006:	d87b      	bhi.n	8005100 <HAL_TIM_ConfigClockSource+0x170>
 8005008:	2b60      	cmp	r3, #96	; 0x60
 800500a:	d050      	beq.n	80050ae <HAL_TIM_ConfigClockSource+0x11e>
 800500c:	2b60      	cmp	r3, #96	; 0x60
 800500e:	d877      	bhi.n	8005100 <HAL_TIM_ConfigClockSource+0x170>
 8005010:	2b50      	cmp	r3, #80	; 0x50
 8005012:	d03c      	beq.n	800508e <HAL_TIM_ConfigClockSource+0xfe>
 8005014:	2b50      	cmp	r3, #80	; 0x50
 8005016:	d873      	bhi.n	8005100 <HAL_TIM_ConfigClockSource+0x170>
 8005018:	2b40      	cmp	r3, #64	; 0x40
 800501a:	d058      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0x13e>
 800501c:	2b40      	cmp	r3, #64	; 0x40
 800501e:	d86f      	bhi.n	8005100 <HAL_TIM_ConfigClockSource+0x170>
 8005020:	2b30      	cmp	r3, #48	; 0x30
 8005022:	d064      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0x15e>
 8005024:	2b30      	cmp	r3, #48	; 0x30
 8005026:	d86b      	bhi.n	8005100 <HAL_TIM_ConfigClockSource+0x170>
 8005028:	2b20      	cmp	r3, #32
 800502a:	d060      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0x15e>
 800502c:	2b20      	cmp	r3, #32
 800502e:	d867      	bhi.n	8005100 <HAL_TIM_ConfigClockSource+0x170>
 8005030:	2b00      	cmp	r3, #0
 8005032:	d05c      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0x15e>
 8005034:	2b10      	cmp	r3, #16
 8005036:	d05a      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0x15e>
 8005038:	e062      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6818      	ldr	r0, [r3, #0]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	6899      	ldr	r1, [r3, #8]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f000 fdab 	bl	8005ba4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800505c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	609a      	str	r2, [r3, #8]
      break;
 8005066:	e04f      	b.n	8005108 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6818      	ldr	r0, [r3, #0]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	6899      	ldr	r1, [r3, #8]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f000 fd94 	bl	8005ba4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800508a:	609a      	str	r2, [r3, #8]
      break;
 800508c:	e03c      	b.n	8005108 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6818      	ldr	r0, [r3, #0]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	6859      	ldr	r1, [r3, #4]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	461a      	mov	r2, r3
 800509c:	f000 fc52 	bl	8005944 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2150      	movs	r1, #80	; 0x50
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fd61 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 80050ac:	e02c      	b.n	8005108 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6818      	ldr	r0, [r3, #0]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	6859      	ldr	r1, [r3, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	461a      	mov	r2, r3
 80050bc:	f000 fcae 	bl	8005a1c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2160      	movs	r1, #96	; 0x60
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fd51 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 80050cc:	e01c      	b.n	8005108 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6818      	ldr	r0, [r3, #0]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	6859      	ldr	r1, [r3, #4]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	461a      	mov	r2, r3
 80050dc:	f000 fc32 	bl	8005944 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2140      	movs	r1, #64	; 0x40
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fd41 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 80050ec:	e00c      	b.n	8005108 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4619      	mov	r1, r3
 80050f8:	4610      	mov	r0, r2
 80050fa:	f000 fd38 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 80050fe:	e003      	b.n	8005108 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	73fb      	strb	r3, [r7, #15]
      break;
 8005104:	e000      	b.n	8005108 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005106:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005118:	7bfb      	ldrb	r3, [r7, #15]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
	...

08005188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a40      	ldr	r2, [pc, #256]	; (800529c <TIM_Base_SetConfig+0x114>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d013      	beq.n	80051c8 <TIM_Base_SetConfig+0x40>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a6:	d00f      	beq.n	80051c8 <TIM_Base_SetConfig+0x40>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a3d      	ldr	r2, [pc, #244]	; (80052a0 <TIM_Base_SetConfig+0x118>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d00b      	beq.n	80051c8 <TIM_Base_SetConfig+0x40>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a3c      	ldr	r2, [pc, #240]	; (80052a4 <TIM_Base_SetConfig+0x11c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d007      	beq.n	80051c8 <TIM_Base_SetConfig+0x40>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a3b      	ldr	r2, [pc, #236]	; (80052a8 <TIM_Base_SetConfig+0x120>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d003      	beq.n	80051c8 <TIM_Base_SetConfig+0x40>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a3a      	ldr	r2, [pc, #232]	; (80052ac <TIM_Base_SetConfig+0x124>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d108      	bne.n	80051da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a2f      	ldr	r2, [pc, #188]	; (800529c <TIM_Base_SetConfig+0x114>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d01f      	beq.n	8005222 <TIM_Base_SetConfig+0x9a>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e8:	d01b      	beq.n	8005222 <TIM_Base_SetConfig+0x9a>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a2c      	ldr	r2, [pc, #176]	; (80052a0 <TIM_Base_SetConfig+0x118>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d017      	beq.n	8005222 <TIM_Base_SetConfig+0x9a>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a2b      	ldr	r2, [pc, #172]	; (80052a4 <TIM_Base_SetConfig+0x11c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d013      	beq.n	8005222 <TIM_Base_SetConfig+0x9a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a2a      	ldr	r2, [pc, #168]	; (80052a8 <TIM_Base_SetConfig+0x120>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d00f      	beq.n	8005222 <TIM_Base_SetConfig+0x9a>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a29      	ldr	r2, [pc, #164]	; (80052ac <TIM_Base_SetConfig+0x124>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00b      	beq.n	8005222 <TIM_Base_SetConfig+0x9a>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a28      	ldr	r2, [pc, #160]	; (80052b0 <TIM_Base_SetConfig+0x128>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d007      	beq.n	8005222 <TIM_Base_SetConfig+0x9a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a27      	ldr	r2, [pc, #156]	; (80052b4 <TIM_Base_SetConfig+0x12c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d003      	beq.n	8005222 <TIM_Base_SetConfig+0x9a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a26      	ldr	r2, [pc, #152]	; (80052b8 <TIM_Base_SetConfig+0x130>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d108      	bne.n	8005234 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a10      	ldr	r2, [pc, #64]	; (800529c <TIM_Base_SetConfig+0x114>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d00f      	beq.n	8005280 <TIM_Base_SetConfig+0xf8>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a12      	ldr	r2, [pc, #72]	; (80052ac <TIM_Base_SetConfig+0x124>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d00b      	beq.n	8005280 <TIM_Base_SetConfig+0xf8>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a11      	ldr	r2, [pc, #68]	; (80052b0 <TIM_Base_SetConfig+0x128>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d007      	beq.n	8005280 <TIM_Base_SetConfig+0xf8>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a10      	ldr	r2, [pc, #64]	; (80052b4 <TIM_Base_SetConfig+0x12c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d003      	beq.n	8005280 <TIM_Base_SetConfig+0xf8>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a0f      	ldr	r2, [pc, #60]	; (80052b8 <TIM_Base_SetConfig+0x130>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d103      	bne.n	8005288 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	691a      	ldr	r2, [r3, #16]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	615a      	str	r2, [r3, #20]
}
 800528e:	bf00      	nop
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	40012c00 	.word	0x40012c00
 80052a0:	40000400 	.word	0x40000400
 80052a4:	40000800 	.word	0x40000800
 80052a8:	40000c00 	.word	0x40000c00
 80052ac:	40013400 	.word	0x40013400
 80052b0:	40014000 	.word	0x40014000
 80052b4:	40014400 	.word	0x40014400
 80052b8:	40014800 	.word	0x40014800

080052bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	f023 0201 	bic.w	r2, r3, #1
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0303 	bic.w	r3, r3, #3
 80052f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f023 0302 	bic.w	r3, r3, #2
 8005308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	4313      	orrs	r3, r2
 8005312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a2c      	ldr	r2, [pc, #176]	; (80053c8 <TIM_OC1_SetConfig+0x10c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00f      	beq.n	800533c <TIM_OC1_SetConfig+0x80>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a2b      	ldr	r2, [pc, #172]	; (80053cc <TIM_OC1_SetConfig+0x110>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00b      	beq.n	800533c <TIM_OC1_SetConfig+0x80>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a2a      	ldr	r2, [pc, #168]	; (80053d0 <TIM_OC1_SetConfig+0x114>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d007      	beq.n	800533c <TIM_OC1_SetConfig+0x80>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a29      	ldr	r2, [pc, #164]	; (80053d4 <TIM_OC1_SetConfig+0x118>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d003      	beq.n	800533c <TIM_OC1_SetConfig+0x80>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a28      	ldr	r2, [pc, #160]	; (80053d8 <TIM_OC1_SetConfig+0x11c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d10c      	bne.n	8005356 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f023 0308 	bic.w	r3, r3, #8
 8005342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f023 0304 	bic.w	r3, r3, #4
 8005354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a1b      	ldr	r2, [pc, #108]	; (80053c8 <TIM_OC1_SetConfig+0x10c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d00f      	beq.n	800537e <TIM_OC1_SetConfig+0xc2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a1a      	ldr	r2, [pc, #104]	; (80053cc <TIM_OC1_SetConfig+0x110>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00b      	beq.n	800537e <TIM_OC1_SetConfig+0xc2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a19      	ldr	r2, [pc, #100]	; (80053d0 <TIM_OC1_SetConfig+0x114>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d007      	beq.n	800537e <TIM_OC1_SetConfig+0xc2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a18      	ldr	r2, [pc, #96]	; (80053d4 <TIM_OC1_SetConfig+0x118>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d003      	beq.n	800537e <TIM_OC1_SetConfig+0xc2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a17      	ldr	r2, [pc, #92]	; (80053d8 <TIM_OC1_SetConfig+0x11c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d111      	bne.n	80053a2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800538c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	621a      	str	r2, [r3, #32]
}
 80053bc:	bf00      	nop
 80053be:	371c      	adds	r7, #28
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	40012c00 	.word	0x40012c00
 80053cc:	40013400 	.word	0x40013400
 80053d0:	40014000 	.word	0x40014000
 80053d4:	40014400 	.word	0x40014400
 80053d8:	40014800 	.word	0x40014800

080053dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	f023 0210 	bic.w	r2, r3, #16
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800540a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800540e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	021b      	lsls	r3, r3, #8
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	4313      	orrs	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f023 0320 	bic.w	r3, r3, #32
 800542a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	4313      	orrs	r3, r2
 8005436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a28      	ldr	r2, [pc, #160]	; (80054dc <TIM_OC2_SetConfig+0x100>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d003      	beq.n	8005448 <TIM_OC2_SetConfig+0x6c>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a27      	ldr	r2, [pc, #156]	; (80054e0 <TIM_OC2_SetConfig+0x104>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d10d      	bne.n	8005464 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800544e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	4313      	orrs	r3, r2
 800545a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005462:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a1d      	ldr	r2, [pc, #116]	; (80054dc <TIM_OC2_SetConfig+0x100>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00f      	beq.n	800548c <TIM_OC2_SetConfig+0xb0>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a1c      	ldr	r2, [pc, #112]	; (80054e0 <TIM_OC2_SetConfig+0x104>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d00b      	beq.n	800548c <TIM_OC2_SetConfig+0xb0>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a1b      	ldr	r2, [pc, #108]	; (80054e4 <TIM_OC2_SetConfig+0x108>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d007      	beq.n	800548c <TIM_OC2_SetConfig+0xb0>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a1a      	ldr	r2, [pc, #104]	; (80054e8 <TIM_OC2_SetConfig+0x10c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d003      	beq.n	800548c <TIM_OC2_SetConfig+0xb0>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a19      	ldr	r2, [pc, #100]	; (80054ec <TIM_OC2_SetConfig+0x110>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d113      	bne.n	80054b4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005492:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800549a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	621a      	str	r2, [r3, #32]
}
 80054ce:	bf00      	nop
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40012c00 	.word	0x40012c00
 80054e0:	40013400 	.word	0x40013400
 80054e4:	40014000 	.word	0x40014000
 80054e8:	40014400 	.word	0x40014400
 80054ec:	40014800 	.word	0x40014800

080054f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800551e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0303 	bic.w	r3, r3, #3
 800552a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800553c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	021b      	lsls	r3, r3, #8
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	4313      	orrs	r3, r2
 8005548:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a27      	ldr	r2, [pc, #156]	; (80055ec <TIM_OC3_SetConfig+0xfc>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d003      	beq.n	800555a <TIM_OC3_SetConfig+0x6a>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a26      	ldr	r2, [pc, #152]	; (80055f0 <TIM_OC3_SetConfig+0x100>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d10d      	bne.n	8005576 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005560:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	021b      	lsls	r3, r3, #8
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	4313      	orrs	r3, r2
 800556c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a1c      	ldr	r2, [pc, #112]	; (80055ec <TIM_OC3_SetConfig+0xfc>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d00f      	beq.n	800559e <TIM_OC3_SetConfig+0xae>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a1b      	ldr	r2, [pc, #108]	; (80055f0 <TIM_OC3_SetConfig+0x100>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00b      	beq.n	800559e <TIM_OC3_SetConfig+0xae>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a1a      	ldr	r2, [pc, #104]	; (80055f4 <TIM_OC3_SetConfig+0x104>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d007      	beq.n	800559e <TIM_OC3_SetConfig+0xae>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a19      	ldr	r2, [pc, #100]	; (80055f8 <TIM_OC3_SetConfig+0x108>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d003      	beq.n	800559e <TIM_OC3_SetConfig+0xae>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a18      	ldr	r2, [pc, #96]	; (80055fc <TIM_OC3_SetConfig+0x10c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d113      	bne.n	80055c6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	621a      	str	r2, [r3, #32]
}
 80055e0:	bf00      	nop
 80055e2:	371c      	adds	r7, #28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	40012c00 	.word	0x40012c00
 80055f0:	40013400 	.word	0x40013400
 80055f4:	40014000 	.word	0x40014000
 80055f8:	40014400 	.word	0x40014400
 80055fc:	40014800 	.word	0x40014800

08005600 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800562e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800563a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	021b      	lsls	r3, r3, #8
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	4313      	orrs	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800564e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	031b      	lsls	r3, r3, #12
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	4313      	orrs	r3, r2
 800565a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a18      	ldr	r2, [pc, #96]	; (80056c0 <TIM_OC4_SetConfig+0xc0>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d00f      	beq.n	8005684 <TIM_OC4_SetConfig+0x84>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a17      	ldr	r2, [pc, #92]	; (80056c4 <TIM_OC4_SetConfig+0xc4>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00b      	beq.n	8005684 <TIM_OC4_SetConfig+0x84>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a16      	ldr	r2, [pc, #88]	; (80056c8 <TIM_OC4_SetConfig+0xc8>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d007      	beq.n	8005684 <TIM_OC4_SetConfig+0x84>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a15      	ldr	r2, [pc, #84]	; (80056cc <TIM_OC4_SetConfig+0xcc>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d003      	beq.n	8005684 <TIM_OC4_SetConfig+0x84>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a14      	ldr	r2, [pc, #80]	; (80056d0 <TIM_OC4_SetConfig+0xd0>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d109      	bne.n	8005698 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800568a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	019b      	lsls	r3, r3, #6
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	4313      	orrs	r3, r2
 8005696:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	621a      	str	r2, [r3, #32]
}
 80056b2:	bf00      	nop
 80056b4:	371c      	adds	r7, #28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	40012c00 	.word	0x40012c00
 80056c4:	40013400 	.word	0x40013400
 80056c8:	40014000 	.word	0x40014000
 80056cc:	40014400 	.word	0x40014400
 80056d0:	40014800 	.word	0x40014800

080056d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	4313      	orrs	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005718:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	041b      	lsls	r3, r3, #16
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a17      	ldr	r2, [pc, #92]	; (8005788 <TIM_OC5_SetConfig+0xb4>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00f      	beq.n	800574e <TIM_OC5_SetConfig+0x7a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a16      	ldr	r2, [pc, #88]	; (800578c <TIM_OC5_SetConfig+0xb8>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d00b      	beq.n	800574e <TIM_OC5_SetConfig+0x7a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a15      	ldr	r2, [pc, #84]	; (8005790 <TIM_OC5_SetConfig+0xbc>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d007      	beq.n	800574e <TIM_OC5_SetConfig+0x7a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a14      	ldr	r2, [pc, #80]	; (8005794 <TIM_OC5_SetConfig+0xc0>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d003      	beq.n	800574e <TIM_OC5_SetConfig+0x7a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a13      	ldr	r2, [pc, #76]	; (8005798 <TIM_OC5_SetConfig+0xc4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d109      	bne.n	8005762 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005754:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	021b      	lsls	r3, r3, #8
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	4313      	orrs	r3, r2
 8005760:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	621a      	str	r2, [r3, #32]
}
 800577c:	bf00      	nop
 800577e:	371c      	adds	r7, #28
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	40012c00 	.word	0x40012c00
 800578c:	40013400 	.word	0x40013400
 8005790:	40014000 	.word	0x40014000
 8005794:	40014400 	.word	0x40014400
 8005798:	40014800 	.word	0x40014800

0800579c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800579c:	b480      	push	{r7}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	021b      	lsls	r3, r3, #8
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4313      	orrs	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	051b      	lsls	r3, r3, #20
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a18      	ldr	r2, [pc, #96]	; (8005854 <TIM_OC6_SetConfig+0xb8>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d00f      	beq.n	8005818 <TIM_OC6_SetConfig+0x7c>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a17      	ldr	r2, [pc, #92]	; (8005858 <TIM_OC6_SetConfig+0xbc>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d00b      	beq.n	8005818 <TIM_OC6_SetConfig+0x7c>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a16      	ldr	r2, [pc, #88]	; (800585c <TIM_OC6_SetConfig+0xc0>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d007      	beq.n	8005818 <TIM_OC6_SetConfig+0x7c>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a15      	ldr	r2, [pc, #84]	; (8005860 <TIM_OC6_SetConfig+0xc4>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d003      	beq.n	8005818 <TIM_OC6_SetConfig+0x7c>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a14      	ldr	r2, [pc, #80]	; (8005864 <TIM_OC6_SetConfig+0xc8>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d109      	bne.n	800582c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800581e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	029b      	lsls	r3, r3, #10
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4313      	orrs	r3, r2
 800582a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	621a      	str	r2, [r3, #32]
}
 8005846:	bf00      	nop
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40012c00 	.word	0x40012c00
 8005858:	40013400 	.word	0x40013400
 800585c:	40014000 	.word	0x40014000
 8005860:	40014400 	.word	0x40014400
 8005864:	40014800 	.word	0x40014800

08005868 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	f023 0201 	bic.w	r2, r3, #1
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4a26      	ldr	r2, [pc, #152]	; (800592c <TIM_TI1_SetConfig+0xc4>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d017      	beq.n	80058c6 <TIM_TI1_SetConfig+0x5e>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800589c:	d013      	beq.n	80058c6 <TIM_TI1_SetConfig+0x5e>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4a23      	ldr	r2, [pc, #140]	; (8005930 <TIM_TI1_SetConfig+0xc8>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d00f      	beq.n	80058c6 <TIM_TI1_SetConfig+0x5e>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4a22      	ldr	r2, [pc, #136]	; (8005934 <TIM_TI1_SetConfig+0xcc>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00b      	beq.n	80058c6 <TIM_TI1_SetConfig+0x5e>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	4a21      	ldr	r2, [pc, #132]	; (8005938 <TIM_TI1_SetConfig+0xd0>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d007      	beq.n	80058c6 <TIM_TI1_SetConfig+0x5e>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4a20      	ldr	r2, [pc, #128]	; (800593c <TIM_TI1_SetConfig+0xd4>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d003      	beq.n	80058c6 <TIM_TI1_SetConfig+0x5e>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4a1f      	ldr	r2, [pc, #124]	; (8005940 <TIM_TI1_SetConfig+0xd8>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d101      	bne.n	80058ca <TIM_TI1_SetConfig+0x62>
 80058c6:	2301      	movs	r3, #1
 80058c8:	e000      	b.n	80058cc <TIM_TI1_SetConfig+0x64>
 80058ca:	2300      	movs	r3, #0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d008      	beq.n	80058e2 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f023 0303 	bic.w	r3, r3, #3
 80058d6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]
 80058e0:	e003      	b.n	80058ea <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f043 0301 	orr.w	r3, r3, #1
 80058e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	011b      	lsls	r3, r3, #4
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	f023 030a 	bic.w	r3, r3, #10
 8005904:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f003 030a 	and.w	r3, r3, #10
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	4313      	orrs	r3, r2
 8005910:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	621a      	str	r2, [r3, #32]
}
 800591e:	bf00      	nop
 8005920:	371c      	adds	r7, #28
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40012c00 	.word	0x40012c00
 8005930:	40000400 	.word	0x40000400
 8005934:	40000800 	.word	0x40000800
 8005938:	40000c00 	.word	0x40000c00
 800593c:	40013400 	.word	0x40013400
 8005940:	40014000 	.word	0x40014000

08005944 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005944:	b480      	push	{r7}
 8005946:	b087      	sub	sp, #28
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	f023 0201 	bic.w	r2, r3, #1
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800596e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	011b      	lsls	r3, r3, #4
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	4313      	orrs	r3, r2
 8005978:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f023 030a 	bic.w	r3, r3, #10
 8005980:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	621a      	str	r2, [r3, #32]
}
 8005996:	bf00      	nop
 8005998:	371c      	adds	r7, #28
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b087      	sub	sp, #28
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	60f8      	str	r0, [r7, #12]
 80059aa:	60b9      	str	r1, [r7, #8]
 80059ac:	607a      	str	r2, [r7, #4]
 80059ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	f023 0210 	bic.w	r2, r3, #16
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	021b      	lsls	r3, r3, #8
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	031b      	lsls	r3, r3, #12
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	011b      	lsls	r3, r3, #4
 80059fa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	621a      	str	r2, [r3, #32]
}
 8005a10:	bf00      	nop
 8005a12:	371c      	adds	r7, #28
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b087      	sub	sp, #28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	f023 0210 	bic.w	r2, r3, #16
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	031b      	lsls	r3, r3, #12
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	621a      	str	r2, [r3, #32]
}
 8005a70:	bf00      	nop
 8005a72:	371c      	adds	r7, #28
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f023 0303 	bic.w	r3, r3, #3
 8005aa8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ab8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005acc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	021b      	lsls	r3, r3, #8
 8005ad2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	621a      	str	r2, [r3, #32]
}
 8005ae8:	bf00      	nop
 8005aea:	371c      	adds	r7, #28
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
 8005b00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	021b      	lsls	r3, r3, #8
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b32:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	031b      	lsls	r3, r3, #12
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005b46:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	031b      	lsls	r3, r3, #12
 8005b4c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	621a      	str	r2, [r3, #32]
}
 8005b62:	bf00      	nop
 8005b64:	371c      	adds	r7, #28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b085      	sub	sp, #20
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	f043 0307 	orr.w	r3, r3, #7
 8005b90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	609a      	str	r2, [r3, #8]
}
 8005b98:	bf00      	nop
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	021a      	lsls	r2, r3, #8
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	609a      	str	r2, [r3, #8]
}
 8005bd8:	bf00      	nop
 8005bda:	371c      	adds	r7, #28
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f003 031f 	and.w	r3, r3, #31
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6a1a      	ldr	r2, [r3, #32]
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	43db      	mvns	r3, r3
 8005c06:	401a      	ands	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6a1a      	ldr	r2, [r3, #32]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f003 031f 	and.w	r3, r3, #31
 8005c16:	6879      	ldr	r1, [r7, #4]
 8005c18:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	621a      	str	r2, [r3, #32]
}
 8005c22:	bf00      	nop
 8005c24:	371c      	adds	r7, #28
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
	...

08005c30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c44:	2302      	movs	r3, #2
 8005c46:	e068      	b.n	8005d1a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a2e      	ldr	r2, [pc, #184]	; (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d004      	beq.n	8005c7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a2d      	ldr	r2, [pc, #180]	; (8005d2c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d108      	bne.n	8005c8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a1e      	ldr	r2, [pc, #120]	; (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d01d      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cba:	d018      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a1b      	ldr	r2, [pc, #108]	; (8005d30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d013      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a1a      	ldr	r2, [pc, #104]	; (8005d34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00e      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a18      	ldr	r2, [pc, #96]	; (8005d38 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d009      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a13      	ldr	r2, [pc, #76]	; (8005d2c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d004      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a14      	ldr	r2, [pc, #80]	; (8005d3c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d10c      	bne.n	8005d08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	40012c00 	.word	0x40012c00
 8005d2c:	40013400 	.word	0x40013400
 8005d30:	40000400 	.word	0x40000400
 8005d34:	40000800 	.word	0x40000800
 8005d38:	40000c00 	.word	0x40000c00
 8005d3c:	40014000 	.word	0x40014000

08005d40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e040      	b.n	8005e10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d106      	bne.n	8005da4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7fb fed8 	bl	8001b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2224      	movs	r2, #36	; 0x24
 8005da8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0201 	bic.w	r2, r2, #1
 8005db8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f82c 	bl	8005e18 <UART_SetConfig>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d101      	bne.n	8005dca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e022      	b.n	8005e10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d002      	beq.n	8005dd8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fad8 	bl	8006388 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005de6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005df6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0201 	orr.w	r2, r2, #1
 8005e06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 fb5f 	bl	80064cc <UART_CheckIdleState>
 8005e0e:	4603      	mov	r3, r0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e1c:	b08a      	sub	sp, #40	; 0x28
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	431a      	orrs	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	431a      	orrs	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	4ba4      	ldr	r3, [pc, #656]	; (80060d8 <UART_SetConfig+0x2c0>)
 8005e48:	4013      	ands	r3, r2
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	6812      	ldr	r2, [r2, #0]
 8005e4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e50:	430b      	orrs	r3, r1
 8005e52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a99      	ldr	r2, [pc, #612]	; (80060dc <UART_SetConfig+0x2c4>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d004      	beq.n	8005e84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e80:	4313      	orrs	r3, r2
 8005e82:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e94:	430a      	orrs	r2, r1
 8005e96:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a90      	ldr	r2, [pc, #576]	; (80060e0 <UART_SetConfig+0x2c8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d126      	bne.n	8005ef0 <UART_SetConfig+0xd8>
 8005ea2:	4b90      	ldr	r3, [pc, #576]	; (80060e4 <UART_SetConfig+0x2cc>)
 8005ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea8:	f003 0303 	and.w	r3, r3, #3
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	d81b      	bhi.n	8005ee8 <UART_SetConfig+0xd0>
 8005eb0:	a201      	add	r2, pc, #4	; (adr r2, 8005eb8 <UART_SetConfig+0xa0>)
 8005eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb6:	bf00      	nop
 8005eb8:	08005ec9 	.word	0x08005ec9
 8005ebc:	08005ed9 	.word	0x08005ed9
 8005ec0:	08005ed1 	.word	0x08005ed1
 8005ec4:	08005ee1 	.word	0x08005ee1
 8005ec8:	2301      	movs	r3, #1
 8005eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ece:	e116      	b.n	80060fe <UART_SetConfig+0x2e6>
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ed6:	e112      	b.n	80060fe <UART_SetConfig+0x2e6>
 8005ed8:	2304      	movs	r3, #4
 8005eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ede:	e10e      	b.n	80060fe <UART_SetConfig+0x2e6>
 8005ee0:	2308      	movs	r3, #8
 8005ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ee6:	e10a      	b.n	80060fe <UART_SetConfig+0x2e6>
 8005ee8:	2310      	movs	r3, #16
 8005eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eee:	e106      	b.n	80060fe <UART_SetConfig+0x2e6>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a7c      	ldr	r2, [pc, #496]	; (80060e8 <UART_SetConfig+0x2d0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d138      	bne.n	8005f6c <UART_SetConfig+0x154>
 8005efa:	4b7a      	ldr	r3, [pc, #488]	; (80060e4 <UART_SetConfig+0x2cc>)
 8005efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f00:	f003 030c 	and.w	r3, r3, #12
 8005f04:	2b0c      	cmp	r3, #12
 8005f06:	d82d      	bhi.n	8005f64 <UART_SetConfig+0x14c>
 8005f08:	a201      	add	r2, pc, #4	; (adr r2, 8005f10 <UART_SetConfig+0xf8>)
 8005f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0e:	bf00      	nop
 8005f10:	08005f45 	.word	0x08005f45
 8005f14:	08005f65 	.word	0x08005f65
 8005f18:	08005f65 	.word	0x08005f65
 8005f1c:	08005f65 	.word	0x08005f65
 8005f20:	08005f55 	.word	0x08005f55
 8005f24:	08005f65 	.word	0x08005f65
 8005f28:	08005f65 	.word	0x08005f65
 8005f2c:	08005f65 	.word	0x08005f65
 8005f30:	08005f4d 	.word	0x08005f4d
 8005f34:	08005f65 	.word	0x08005f65
 8005f38:	08005f65 	.word	0x08005f65
 8005f3c:	08005f65 	.word	0x08005f65
 8005f40:	08005f5d 	.word	0x08005f5d
 8005f44:	2300      	movs	r3, #0
 8005f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f4a:	e0d8      	b.n	80060fe <UART_SetConfig+0x2e6>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f52:	e0d4      	b.n	80060fe <UART_SetConfig+0x2e6>
 8005f54:	2304      	movs	r3, #4
 8005f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f5a:	e0d0      	b.n	80060fe <UART_SetConfig+0x2e6>
 8005f5c:	2308      	movs	r3, #8
 8005f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f62:	e0cc      	b.n	80060fe <UART_SetConfig+0x2e6>
 8005f64:	2310      	movs	r3, #16
 8005f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f6a:	e0c8      	b.n	80060fe <UART_SetConfig+0x2e6>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a5e      	ldr	r2, [pc, #376]	; (80060ec <UART_SetConfig+0x2d4>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d125      	bne.n	8005fc2 <UART_SetConfig+0x1aa>
 8005f76:	4b5b      	ldr	r3, [pc, #364]	; (80060e4 <UART_SetConfig+0x2cc>)
 8005f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f80:	2b30      	cmp	r3, #48	; 0x30
 8005f82:	d016      	beq.n	8005fb2 <UART_SetConfig+0x19a>
 8005f84:	2b30      	cmp	r3, #48	; 0x30
 8005f86:	d818      	bhi.n	8005fba <UART_SetConfig+0x1a2>
 8005f88:	2b20      	cmp	r3, #32
 8005f8a:	d00a      	beq.n	8005fa2 <UART_SetConfig+0x18a>
 8005f8c:	2b20      	cmp	r3, #32
 8005f8e:	d814      	bhi.n	8005fba <UART_SetConfig+0x1a2>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <UART_SetConfig+0x182>
 8005f94:	2b10      	cmp	r3, #16
 8005f96:	d008      	beq.n	8005faa <UART_SetConfig+0x192>
 8005f98:	e00f      	b.n	8005fba <UART_SetConfig+0x1a2>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fa0:	e0ad      	b.n	80060fe <UART_SetConfig+0x2e6>
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fa8:	e0a9      	b.n	80060fe <UART_SetConfig+0x2e6>
 8005faa:	2304      	movs	r3, #4
 8005fac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fb0:	e0a5      	b.n	80060fe <UART_SetConfig+0x2e6>
 8005fb2:	2308      	movs	r3, #8
 8005fb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fb8:	e0a1      	b.n	80060fe <UART_SetConfig+0x2e6>
 8005fba:	2310      	movs	r3, #16
 8005fbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fc0:	e09d      	b.n	80060fe <UART_SetConfig+0x2e6>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a4a      	ldr	r2, [pc, #296]	; (80060f0 <UART_SetConfig+0x2d8>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d125      	bne.n	8006018 <UART_SetConfig+0x200>
 8005fcc:	4b45      	ldr	r3, [pc, #276]	; (80060e4 <UART_SetConfig+0x2cc>)
 8005fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005fd6:	2bc0      	cmp	r3, #192	; 0xc0
 8005fd8:	d016      	beq.n	8006008 <UART_SetConfig+0x1f0>
 8005fda:	2bc0      	cmp	r3, #192	; 0xc0
 8005fdc:	d818      	bhi.n	8006010 <UART_SetConfig+0x1f8>
 8005fde:	2b80      	cmp	r3, #128	; 0x80
 8005fe0:	d00a      	beq.n	8005ff8 <UART_SetConfig+0x1e0>
 8005fe2:	2b80      	cmp	r3, #128	; 0x80
 8005fe4:	d814      	bhi.n	8006010 <UART_SetConfig+0x1f8>
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <UART_SetConfig+0x1d8>
 8005fea:	2b40      	cmp	r3, #64	; 0x40
 8005fec:	d008      	beq.n	8006000 <UART_SetConfig+0x1e8>
 8005fee:	e00f      	b.n	8006010 <UART_SetConfig+0x1f8>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ff6:	e082      	b.n	80060fe <UART_SetConfig+0x2e6>
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ffe:	e07e      	b.n	80060fe <UART_SetConfig+0x2e6>
 8006000:	2304      	movs	r3, #4
 8006002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006006:	e07a      	b.n	80060fe <UART_SetConfig+0x2e6>
 8006008:	2308      	movs	r3, #8
 800600a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800600e:	e076      	b.n	80060fe <UART_SetConfig+0x2e6>
 8006010:	2310      	movs	r3, #16
 8006012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006016:	e072      	b.n	80060fe <UART_SetConfig+0x2e6>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a35      	ldr	r2, [pc, #212]	; (80060f4 <UART_SetConfig+0x2dc>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d12a      	bne.n	8006078 <UART_SetConfig+0x260>
 8006022:	4b30      	ldr	r3, [pc, #192]	; (80060e4 <UART_SetConfig+0x2cc>)
 8006024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006028:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800602c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006030:	d01a      	beq.n	8006068 <UART_SetConfig+0x250>
 8006032:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006036:	d81b      	bhi.n	8006070 <UART_SetConfig+0x258>
 8006038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800603c:	d00c      	beq.n	8006058 <UART_SetConfig+0x240>
 800603e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006042:	d815      	bhi.n	8006070 <UART_SetConfig+0x258>
 8006044:	2b00      	cmp	r3, #0
 8006046:	d003      	beq.n	8006050 <UART_SetConfig+0x238>
 8006048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800604c:	d008      	beq.n	8006060 <UART_SetConfig+0x248>
 800604e:	e00f      	b.n	8006070 <UART_SetConfig+0x258>
 8006050:	2300      	movs	r3, #0
 8006052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006056:	e052      	b.n	80060fe <UART_SetConfig+0x2e6>
 8006058:	2302      	movs	r3, #2
 800605a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800605e:	e04e      	b.n	80060fe <UART_SetConfig+0x2e6>
 8006060:	2304      	movs	r3, #4
 8006062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006066:	e04a      	b.n	80060fe <UART_SetConfig+0x2e6>
 8006068:	2308      	movs	r3, #8
 800606a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800606e:	e046      	b.n	80060fe <UART_SetConfig+0x2e6>
 8006070:	2310      	movs	r3, #16
 8006072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006076:	e042      	b.n	80060fe <UART_SetConfig+0x2e6>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a17      	ldr	r2, [pc, #92]	; (80060dc <UART_SetConfig+0x2c4>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d13a      	bne.n	80060f8 <UART_SetConfig+0x2e0>
 8006082:	4b18      	ldr	r3, [pc, #96]	; (80060e4 <UART_SetConfig+0x2cc>)
 8006084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006088:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800608c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006090:	d01a      	beq.n	80060c8 <UART_SetConfig+0x2b0>
 8006092:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006096:	d81b      	bhi.n	80060d0 <UART_SetConfig+0x2b8>
 8006098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800609c:	d00c      	beq.n	80060b8 <UART_SetConfig+0x2a0>
 800609e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060a2:	d815      	bhi.n	80060d0 <UART_SetConfig+0x2b8>
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d003      	beq.n	80060b0 <UART_SetConfig+0x298>
 80060a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ac:	d008      	beq.n	80060c0 <UART_SetConfig+0x2a8>
 80060ae:	e00f      	b.n	80060d0 <UART_SetConfig+0x2b8>
 80060b0:	2300      	movs	r3, #0
 80060b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060b6:	e022      	b.n	80060fe <UART_SetConfig+0x2e6>
 80060b8:	2302      	movs	r3, #2
 80060ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060be:	e01e      	b.n	80060fe <UART_SetConfig+0x2e6>
 80060c0:	2304      	movs	r3, #4
 80060c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060c6:	e01a      	b.n	80060fe <UART_SetConfig+0x2e6>
 80060c8:	2308      	movs	r3, #8
 80060ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ce:	e016      	b.n	80060fe <UART_SetConfig+0x2e6>
 80060d0:	2310      	movs	r3, #16
 80060d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060d6:	e012      	b.n	80060fe <UART_SetConfig+0x2e6>
 80060d8:	efff69f3 	.word	0xefff69f3
 80060dc:	40008000 	.word	0x40008000
 80060e0:	40013800 	.word	0x40013800
 80060e4:	40021000 	.word	0x40021000
 80060e8:	40004400 	.word	0x40004400
 80060ec:	40004800 	.word	0x40004800
 80060f0:	40004c00 	.word	0x40004c00
 80060f4:	40005000 	.word	0x40005000
 80060f8:	2310      	movs	r3, #16
 80060fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a9f      	ldr	r2, [pc, #636]	; (8006380 <UART_SetConfig+0x568>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d17a      	bne.n	80061fe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006108:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800610c:	2b08      	cmp	r3, #8
 800610e:	d824      	bhi.n	800615a <UART_SetConfig+0x342>
 8006110:	a201      	add	r2, pc, #4	; (adr r2, 8006118 <UART_SetConfig+0x300>)
 8006112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006116:	bf00      	nop
 8006118:	0800613d 	.word	0x0800613d
 800611c:	0800615b 	.word	0x0800615b
 8006120:	08006145 	.word	0x08006145
 8006124:	0800615b 	.word	0x0800615b
 8006128:	0800614b 	.word	0x0800614b
 800612c:	0800615b 	.word	0x0800615b
 8006130:	0800615b 	.word	0x0800615b
 8006134:	0800615b 	.word	0x0800615b
 8006138:	08006153 	.word	0x08006153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800613c:	f7fd fc92 	bl	8003a64 <HAL_RCC_GetPCLK1Freq>
 8006140:	61f8      	str	r0, [r7, #28]
        break;
 8006142:	e010      	b.n	8006166 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006144:	4b8f      	ldr	r3, [pc, #572]	; (8006384 <UART_SetConfig+0x56c>)
 8006146:	61fb      	str	r3, [r7, #28]
        break;
 8006148:	e00d      	b.n	8006166 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800614a:	f7fd fbf3 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 800614e:	61f8      	str	r0, [r7, #28]
        break;
 8006150:	e009      	b.n	8006166 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006156:	61fb      	str	r3, [r7, #28]
        break;
 8006158:	e005      	b.n	8006166 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006164:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 80fb 	beq.w	8006364 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	4613      	mov	r3, r2
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	4413      	add	r3, r2
 8006178:	69fa      	ldr	r2, [r7, #28]
 800617a:	429a      	cmp	r2, r3
 800617c:	d305      	bcc.n	800618a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006184:	69fa      	ldr	r2, [r7, #28]
 8006186:	429a      	cmp	r2, r3
 8006188:	d903      	bls.n	8006192 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006190:	e0e8      	b.n	8006364 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	2200      	movs	r2, #0
 8006196:	461c      	mov	r4, r3
 8006198:	4615      	mov	r5, r2
 800619a:	f04f 0200 	mov.w	r2, #0
 800619e:	f04f 0300 	mov.w	r3, #0
 80061a2:	022b      	lsls	r3, r5, #8
 80061a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80061a8:	0222      	lsls	r2, r4, #8
 80061aa:	68f9      	ldr	r1, [r7, #12]
 80061ac:	6849      	ldr	r1, [r1, #4]
 80061ae:	0849      	lsrs	r1, r1, #1
 80061b0:	2000      	movs	r0, #0
 80061b2:	4688      	mov	r8, r1
 80061b4:	4681      	mov	r9, r0
 80061b6:	eb12 0a08 	adds.w	sl, r2, r8
 80061ba:	eb43 0b09 	adc.w	fp, r3, r9
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	603b      	str	r3, [r7, #0]
 80061c6:	607a      	str	r2, [r7, #4]
 80061c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061cc:	4650      	mov	r0, sl
 80061ce:	4659      	mov	r1, fp
 80061d0:	f7fa fc3c 	bl	8000a4c <__aeabi_uldivmod>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	4613      	mov	r3, r2
 80061da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061e2:	d308      	bcc.n	80061f6 <UART_SetConfig+0x3de>
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ea:	d204      	bcs.n	80061f6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	60da      	str	r2, [r3, #12]
 80061f4:	e0b6      	b.n	8006364 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80061fc:	e0b2      	b.n	8006364 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006206:	d15e      	bne.n	80062c6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006208:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800620c:	2b08      	cmp	r3, #8
 800620e:	d828      	bhi.n	8006262 <UART_SetConfig+0x44a>
 8006210:	a201      	add	r2, pc, #4	; (adr r2, 8006218 <UART_SetConfig+0x400>)
 8006212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006216:	bf00      	nop
 8006218:	0800623d 	.word	0x0800623d
 800621c:	08006245 	.word	0x08006245
 8006220:	0800624d 	.word	0x0800624d
 8006224:	08006263 	.word	0x08006263
 8006228:	08006253 	.word	0x08006253
 800622c:	08006263 	.word	0x08006263
 8006230:	08006263 	.word	0x08006263
 8006234:	08006263 	.word	0x08006263
 8006238:	0800625b 	.word	0x0800625b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800623c:	f7fd fc12 	bl	8003a64 <HAL_RCC_GetPCLK1Freq>
 8006240:	61f8      	str	r0, [r7, #28]
        break;
 8006242:	e014      	b.n	800626e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006244:	f7fd fc24 	bl	8003a90 <HAL_RCC_GetPCLK2Freq>
 8006248:	61f8      	str	r0, [r7, #28]
        break;
 800624a:	e010      	b.n	800626e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800624c:	4b4d      	ldr	r3, [pc, #308]	; (8006384 <UART_SetConfig+0x56c>)
 800624e:	61fb      	str	r3, [r7, #28]
        break;
 8006250:	e00d      	b.n	800626e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006252:	f7fd fb6f 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 8006256:	61f8      	str	r0, [r7, #28]
        break;
 8006258:	e009      	b.n	800626e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800625a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800625e:	61fb      	str	r3, [r7, #28]
        break;
 8006260:	e005      	b.n	800626e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006262:	2300      	movs	r3, #0
 8006264:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800626c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d077      	beq.n	8006364 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	005a      	lsls	r2, r3, #1
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	085b      	lsrs	r3, r3, #1
 800627e:	441a      	add	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	fbb2 f3f3 	udiv	r3, r2, r3
 8006288:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	2b0f      	cmp	r3, #15
 800628e:	d916      	bls.n	80062be <UART_SetConfig+0x4a6>
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006296:	d212      	bcs.n	80062be <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	b29b      	uxth	r3, r3
 800629c:	f023 030f 	bic.w	r3, r3, #15
 80062a0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	085b      	lsrs	r3, r3, #1
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	f003 0307 	and.w	r3, r3, #7
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	8afb      	ldrh	r3, [r7, #22]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	8afa      	ldrh	r2, [r7, #22]
 80062ba:	60da      	str	r2, [r3, #12]
 80062bc:	e052      	b.n	8006364 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80062c4:	e04e      	b.n	8006364 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062ca:	2b08      	cmp	r3, #8
 80062cc:	d827      	bhi.n	800631e <UART_SetConfig+0x506>
 80062ce:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <UART_SetConfig+0x4bc>)
 80062d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d4:	080062f9 	.word	0x080062f9
 80062d8:	08006301 	.word	0x08006301
 80062dc:	08006309 	.word	0x08006309
 80062e0:	0800631f 	.word	0x0800631f
 80062e4:	0800630f 	.word	0x0800630f
 80062e8:	0800631f 	.word	0x0800631f
 80062ec:	0800631f 	.word	0x0800631f
 80062f0:	0800631f 	.word	0x0800631f
 80062f4:	08006317 	.word	0x08006317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062f8:	f7fd fbb4 	bl	8003a64 <HAL_RCC_GetPCLK1Freq>
 80062fc:	61f8      	str	r0, [r7, #28]
        break;
 80062fe:	e014      	b.n	800632a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006300:	f7fd fbc6 	bl	8003a90 <HAL_RCC_GetPCLK2Freq>
 8006304:	61f8      	str	r0, [r7, #28]
        break;
 8006306:	e010      	b.n	800632a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006308:	4b1e      	ldr	r3, [pc, #120]	; (8006384 <UART_SetConfig+0x56c>)
 800630a:	61fb      	str	r3, [r7, #28]
        break;
 800630c:	e00d      	b.n	800632a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800630e:	f7fd fb11 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 8006312:	61f8      	str	r0, [r7, #28]
        break;
 8006314:	e009      	b.n	800632a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800631a:	61fb      	str	r3, [r7, #28]
        break;
 800631c:	e005      	b.n	800632a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006328:	bf00      	nop
    }

    if (pclk != 0U)
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d019      	beq.n	8006364 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	085a      	lsrs	r2, r3, #1
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	441a      	add	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006342:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	2b0f      	cmp	r3, #15
 8006348:	d909      	bls.n	800635e <UART_SetConfig+0x546>
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006350:	d205      	bcs.n	800635e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	b29a      	uxth	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	60da      	str	r2, [r3, #12]
 800635c:	e002      	b.n	8006364 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006370:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006374:	4618      	mov	r0, r3
 8006376:	3728      	adds	r7, #40	; 0x28
 8006378:	46bd      	mov	sp, r7
 800637a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800637e:	bf00      	nop
 8006380:	40008000 	.word	0x40008000
 8006384:	00f42400 	.word	0x00f42400

08006388 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00a      	beq.n	80063b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00a      	beq.n	80063d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	430a      	orrs	r2, r1
 80063d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	f003 0304 	and.w	r3, r3, #4
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00a      	beq.n	80063f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fa:	f003 0308 	and.w	r3, r3, #8
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00a      	beq.n	8006418 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	430a      	orrs	r2, r1
 8006416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641c:	f003 0310 	and.w	r3, r3, #16
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00a      	beq.n	800643a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643e:	f003 0320 	and.w	r3, r3, #32
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006464:	2b00      	cmp	r3, #0
 8006466:	d01a      	beq.n	800649e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006486:	d10a      	bne.n	800649e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00a      	beq.n	80064c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	430a      	orrs	r2, r1
 80064be:	605a      	str	r2, [r3, #4]
  }
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af02      	add	r7, sp, #8
 80064d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064dc:	f7fb fcac 	bl	8001e38 <HAL_GetTick>
 80064e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0308 	and.w	r3, r3, #8
 80064ec:	2b08      	cmp	r3, #8
 80064ee:	d10e      	bne.n	800650e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f82d 	bl	800655e <UART_WaitOnFlagUntilTimeout>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e023      	b.n	8006556 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	2b04      	cmp	r3, #4
 800651a:	d10e      	bne.n	800653a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800651c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f817 	bl	800655e <UART_WaitOnFlagUntilTimeout>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e00d      	b.n	8006556 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2220      	movs	r2, #32
 800653e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2220      	movs	r2, #32
 8006544:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b09c      	sub	sp, #112	; 0x70
 8006562:	af00      	add	r7, sp, #0
 8006564:	60f8      	str	r0, [r7, #12]
 8006566:	60b9      	str	r1, [r7, #8]
 8006568:	603b      	str	r3, [r7, #0]
 800656a:	4613      	mov	r3, r2
 800656c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800656e:	e0a5      	b.n	80066bc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006570:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006576:	f000 80a1 	beq.w	80066bc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800657a:	f7fb fc5d 	bl	8001e38 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006586:	429a      	cmp	r2, r3
 8006588:	d302      	bcc.n	8006590 <UART_WaitOnFlagUntilTimeout+0x32>
 800658a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800658c:	2b00      	cmp	r3, #0
 800658e:	d13e      	bne.n	800660e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800659e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065a4:	667b      	str	r3, [r7, #100]	; 0x64
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	461a      	mov	r2, r3
 80065ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065b0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065b6:	e841 2300 	strex	r3, r2, [r1]
 80065ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1e6      	bne.n	8006590 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3308      	adds	r3, #8
 80065c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065cc:	e853 3f00 	ldrex	r3, [r3]
 80065d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d4:	f023 0301 	bic.w	r3, r3, #1
 80065d8:	663b      	str	r3, [r7, #96]	; 0x60
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3308      	adds	r3, #8
 80065e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80065e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065ea:	e841 2300 	strex	r3, r2, [r1]
 80065ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1e5      	bne.n	80065c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2220      	movs	r2, #32
 80065fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2220      	movs	r2, #32
 8006600:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e067      	b.n	80066de <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0304 	and.w	r3, r3, #4
 8006618:	2b00      	cmp	r3, #0
 800661a:	d04f      	beq.n	80066bc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006626:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800662a:	d147      	bne.n	80066bc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006634:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663e:	e853 3f00 	ldrex	r3, [r3]
 8006642:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800664a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	461a      	mov	r2, r3
 8006652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006654:	637b      	str	r3, [r7, #52]	; 0x34
 8006656:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006658:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800665a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800665c:	e841 2300 	strex	r3, r2, [r1]
 8006660:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1e6      	bne.n	8006636 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3308      	adds	r3, #8
 800666e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	e853 3f00 	ldrex	r3, [r3]
 8006676:	613b      	str	r3, [r7, #16]
   return(result);
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	f023 0301 	bic.w	r3, r3, #1
 800667e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	3308      	adds	r3, #8
 8006686:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006688:	623a      	str	r2, [r7, #32]
 800668a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668c:	69f9      	ldr	r1, [r7, #28]
 800668e:	6a3a      	ldr	r2, [r7, #32]
 8006690:	e841 2300 	strex	r3, r2, [r1]
 8006694:	61bb      	str	r3, [r7, #24]
   return(result);
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1e5      	bne.n	8006668 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2220      	movs	r2, #32
 80066a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2220      	movs	r2, #32
 80066a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2220      	movs	r2, #32
 80066ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e010      	b.n	80066de <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	69da      	ldr	r2, [r3, #28]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	4013      	ands	r3, r2
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	bf0c      	ite	eq
 80066cc:	2301      	moveq	r3, #1
 80066ce:	2300      	movne	r3, #0
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	461a      	mov	r2, r3
 80066d4:	79fb      	ldrb	r3, [r7, #7]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	f43f af4a 	beq.w	8006570 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3770      	adds	r7, #112	; 0x70
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
	...

080066e8 <__errno>:
 80066e8:	4b01      	ldr	r3, [pc, #4]	; (80066f0 <__errno+0x8>)
 80066ea:	6818      	ldr	r0, [r3, #0]
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	2000001c 	.word	0x2000001c

080066f4 <__libc_init_array>:
 80066f4:	b570      	push	{r4, r5, r6, lr}
 80066f6:	4d0d      	ldr	r5, [pc, #52]	; (800672c <__libc_init_array+0x38>)
 80066f8:	4c0d      	ldr	r4, [pc, #52]	; (8006730 <__libc_init_array+0x3c>)
 80066fa:	1b64      	subs	r4, r4, r5
 80066fc:	10a4      	asrs	r4, r4, #2
 80066fe:	2600      	movs	r6, #0
 8006700:	42a6      	cmp	r6, r4
 8006702:	d109      	bne.n	8006718 <__libc_init_array+0x24>
 8006704:	4d0b      	ldr	r5, [pc, #44]	; (8006734 <__libc_init_array+0x40>)
 8006706:	4c0c      	ldr	r4, [pc, #48]	; (8006738 <__libc_init_array+0x44>)
 8006708:	f000 fc8e 	bl	8007028 <_init>
 800670c:	1b64      	subs	r4, r4, r5
 800670e:	10a4      	asrs	r4, r4, #2
 8006710:	2600      	movs	r6, #0
 8006712:	42a6      	cmp	r6, r4
 8006714:	d105      	bne.n	8006722 <__libc_init_array+0x2e>
 8006716:	bd70      	pop	{r4, r5, r6, pc}
 8006718:	f855 3b04 	ldr.w	r3, [r5], #4
 800671c:	4798      	blx	r3
 800671e:	3601      	adds	r6, #1
 8006720:	e7ee      	b.n	8006700 <__libc_init_array+0xc>
 8006722:	f855 3b04 	ldr.w	r3, [r5], #4
 8006726:	4798      	blx	r3
 8006728:	3601      	adds	r6, #1
 800672a:	e7f2      	b.n	8006712 <__libc_init_array+0x1e>
 800672c:	08009184 	.word	0x08009184
 8006730:	08009184 	.word	0x08009184
 8006734:	08009184 	.word	0x08009184
 8006738:	08009188 	.word	0x08009188

0800673c <memset>:
 800673c:	4402      	add	r2, r0
 800673e:	4603      	mov	r3, r0
 8006740:	4293      	cmp	r3, r2
 8006742:	d100      	bne.n	8006746 <memset+0xa>
 8006744:	4770      	bx	lr
 8006746:	f803 1b01 	strb.w	r1, [r3], #1
 800674a:	e7f9      	b.n	8006740 <memset+0x4>

0800674c <siprintf>:
 800674c:	b40e      	push	{r1, r2, r3}
 800674e:	b500      	push	{lr}
 8006750:	b09c      	sub	sp, #112	; 0x70
 8006752:	ab1d      	add	r3, sp, #116	; 0x74
 8006754:	9002      	str	r0, [sp, #8]
 8006756:	9006      	str	r0, [sp, #24]
 8006758:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800675c:	4809      	ldr	r0, [pc, #36]	; (8006784 <siprintf+0x38>)
 800675e:	9107      	str	r1, [sp, #28]
 8006760:	9104      	str	r1, [sp, #16]
 8006762:	4909      	ldr	r1, [pc, #36]	; (8006788 <siprintf+0x3c>)
 8006764:	f853 2b04 	ldr.w	r2, [r3], #4
 8006768:	9105      	str	r1, [sp, #20]
 800676a:	6800      	ldr	r0, [r0, #0]
 800676c:	9301      	str	r3, [sp, #4]
 800676e:	a902      	add	r1, sp, #8
 8006770:	f000 f868 	bl	8006844 <_svfiprintf_r>
 8006774:	9b02      	ldr	r3, [sp, #8]
 8006776:	2200      	movs	r2, #0
 8006778:	701a      	strb	r2, [r3, #0]
 800677a:	b01c      	add	sp, #112	; 0x70
 800677c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006780:	b003      	add	sp, #12
 8006782:	4770      	bx	lr
 8006784:	2000001c 	.word	0x2000001c
 8006788:	ffff0208 	.word	0xffff0208

0800678c <__ssputs_r>:
 800678c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006790:	688e      	ldr	r6, [r1, #8]
 8006792:	429e      	cmp	r6, r3
 8006794:	4682      	mov	sl, r0
 8006796:	460c      	mov	r4, r1
 8006798:	4690      	mov	r8, r2
 800679a:	461f      	mov	r7, r3
 800679c:	d838      	bhi.n	8006810 <__ssputs_r+0x84>
 800679e:	898a      	ldrh	r2, [r1, #12]
 80067a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067a4:	d032      	beq.n	800680c <__ssputs_r+0x80>
 80067a6:	6825      	ldr	r5, [r4, #0]
 80067a8:	6909      	ldr	r1, [r1, #16]
 80067aa:	eba5 0901 	sub.w	r9, r5, r1
 80067ae:	6965      	ldr	r5, [r4, #20]
 80067b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067b8:	3301      	adds	r3, #1
 80067ba:	444b      	add	r3, r9
 80067bc:	106d      	asrs	r5, r5, #1
 80067be:	429d      	cmp	r5, r3
 80067c0:	bf38      	it	cc
 80067c2:	461d      	movcc	r5, r3
 80067c4:	0553      	lsls	r3, r2, #21
 80067c6:	d531      	bpl.n	800682c <__ssputs_r+0xa0>
 80067c8:	4629      	mov	r1, r5
 80067ca:	f000 fb63 	bl	8006e94 <_malloc_r>
 80067ce:	4606      	mov	r6, r0
 80067d0:	b950      	cbnz	r0, 80067e8 <__ssputs_r+0x5c>
 80067d2:	230c      	movs	r3, #12
 80067d4:	f8ca 3000 	str.w	r3, [sl]
 80067d8:	89a3      	ldrh	r3, [r4, #12]
 80067da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067de:	81a3      	strh	r3, [r4, #12]
 80067e0:	f04f 30ff 	mov.w	r0, #4294967295
 80067e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e8:	6921      	ldr	r1, [r4, #16]
 80067ea:	464a      	mov	r2, r9
 80067ec:	f000 fabe 	bl	8006d6c <memcpy>
 80067f0:	89a3      	ldrh	r3, [r4, #12]
 80067f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80067f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067fa:	81a3      	strh	r3, [r4, #12]
 80067fc:	6126      	str	r6, [r4, #16]
 80067fe:	6165      	str	r5, [r4, #20]
 8006800:	444e      	add	r6, r9
 8006802:	eba5 0509 	sub.w	r5, r5, r9
 8006806:	6026      	str	r6, [r4, #0]
 8006808:	60a5      	str	r5, [r4, #8]
 800680a:	463e      	mov	r6, r7
 800680c:	42be      	cmp	r6, r7
 800680e:	d900      	bls.n	8006812 <__ssputs_r+0x86>
 8006810:	463e      	mov	r6, r7
 8006812:	6820      	ldr	r0, [r4, #0]
 8006814:	4632      	mov	r2, r6
 8006816:	4641      	mov	r1, r8
 8006818:	f000 fab6 	bl	8006d88 <memmove>
 800681c:	68a3      	ldr	r3, [r4, #8]
 800681e:	1b9b      	subs	r3, r3, r6
 8006820:	60a3      	str	r3, [r4, #8]
 8006822:	6823      	ldr	r3, [r4, #0]
 8006824:	4433      	add	r3, r6
 8006826:	6023      	str	r3, [r4, #0]
 8006828:	2000      	movs	r0, #0
 800682a:	e7db      	b.n	80067e4 <__ssputs_r+0x58>
 800682c:	462a      	mov	r2, r5
 800682e:	f000 fba5 	bl	8006f7c <_realloc_r>
 8006832:	4606      	mov	r6, r0
 8006834:	2800      	cmp	r0, #0
 8006836:	d1e1      	bne.n	80067fc <__ssputs_r+0x70>
 8006838:	6921      	ldr	r1, [r4, #16]
 800683a:	4650      	mov	r0, sl
 800683c:	f000 fabe 	bl	8006dbc <_free_r>
 8006840:	e7c7      	b.n	80067d2 <__ssputs_r+0x46>
	...

08006844 <_svfiprintf_r>:
 8006844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006848:	4698      	mov	r8, r3
 800684a:	898b      	ldrh	r3, [r1, #12]
 800684c:	061b      	lsls	r3, r3, #24
 800684e:	b09d      	sub	sp, #116	; 0x74
 8006850:	4607      	mov	r7, r0
 8006852:	460d      	mov	r5, r1
 8006854:	4614      	mov	r4, r2
 8006856:	d50e      	bpl.n	8006876 <_svfiprintf_r+0x32>
 8006858:	690b      	ldr	r3, [r1, #16]
 800685a:	b963      	cbnz	r3, 8006876 <_svfiprintf_r+0x32>
 800685c:	2140      	movs	r1, #64	; 0x40
 800685e:	f000 fb19 	bl	8006e94 <_malloc_r>
 8006862:	6028      	str	r0, [r5, #0]
 8006864:	6128      	str	r0, [r5, #16]
 8006866:	b920      	cbnz	r0, 8006872 <_svfiprintf_r+0x2e>
 8006868:	230c      	movs	r3, #12
 800686a:	603b      	str	r3, [r7, #0]
 800686c:	f04f 30ff 	mov.w	r0, #4294967295
 8006870:	e0d1      	b.n	8006a16 <_svfiprintf_r+0x1d2>
 8006872:	2340      	movs	r3, #64	; 0x40
 8006874:	616b      	str	r3, [r5, #20]
 8006876:	2300      	movs	r3, #0
 8006878:	9309      	str	r3, [sp, #36]	; 0x24
 800687a:	2320      	movs	r3, #32
 800687c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006880:	f8cd 800c 	str.w	r8, [sp, #12]
 8006884:	2330      	movs	r3, #48	; 0x30
 8006886:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a30 <_svfiprintf_r+0x1ec>
 800688a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800688e:	f04f 0901 	mov.w	r9, #1
 8006892:	4623      	mov	r3, r4
 8006894:	469a      	mov	sl, r3
 8006896:	f813 2b01 	ldrb.w	r2, [r3], #1
 800689a:	b10a      	cbz	r2, 80068a0 <_svfiprintf_r+0x5c>
 800689c:	2a25      	cmp	r2, #37	; 0x25
 800689e:	d1f9      	bne.n	8006894 <_svfiprintf_r+0x50>
 80068a0:	ebba 0b04 	subs.w	fp, sl, r4
 80068a4:	d00b      	beq.n	80068be <_svfiprintf_r+0x7a>
 80068a6:	465b      	mov	r3, fp
 80068a8:	4622      	mov	r2, r4
 80068aa:	4629      	mov	r1, r5
 80068ac:	4638      	mov	r0, r7
 80068ae:	f7ff ff6d 	bl	800678c <__ssputs_r>
 80068b2:	3001      	adds	r0, #1
 80068b4:	f000 80aa 	beq.w	8006a0c <_svfiprintf_r+0x1c8>
 80068b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068ba:	445a      	add	r2, fp
 80068bc:	9209      	str	r2, [sp, #36]	; 0x24
 80068be:	f89a 3000 	ldrb.w	r3, [sl]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f000 80a2 	beq.w	8006a0c <_svfiprintf_r+0x1c8>
 80068c8:	2300      	movs	r3, #0
 80068ca:	f04f 32ff 	mov.w	r2, #4294967295
 80068ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068d2:	f10a 0a01 	add.w	sl, sl, #1
 80068d6:	9304      	str	r3, [sp, #16]
 80068d8:	9307      	str	r3, [sp, #28]
 80068da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068de:	931a      	str	r3, [sp, #104]	; 0x68
 80068e0:	4654      	mov	r4, sl
 80068e2:	2205      	movs	r2, #5
 80068e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068e8:	4851      	ldr	r0, [pc, #324]	; (8006a30 <_svfiprintf_r+0x1ec>)
 80068ea:	f7f9 fc71 	bl	80001d0 <memchr>
 80068ee:	9a04      	ldr	r2, [sp, #16]
 80068f0:	b9d8      	cbnz	r0, 800692a <_svfiprintf_r+0xe6>
 80068f2:	06d0      	lsls	r0, r2, #27
 80068f4:	bf44      	itt	mi
 80068f6:	2320      	movmi	r3, #32
 80068f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068fc:	0711      	lsls	r1, r2, #28
 80068fe:	bf44      	itt	mi
 8006900:	232b      	movmi	r3, #43	; 0x2b
 8006902:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006906:	f89a 3000 	ldrb.w	r3, [sl]
 800690a:	2b2a      	cmp	r3, #42	; 0x2a
 800690c:	d015      	beq.n	800693a <_svfiprintf_r+0xf6>
 800690e:	9a07      	ldr	r2, [sp, #28]
 8006910:	4654      	mov	r4, sl
 8006912:	2000      	movs	r0, #0
 8006914:	f04f 0c0a 	mov.w	ip, #10
 8006918:	4621      	mov	r1, r4
 800691a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800691e:	3b30      	subs	r3, #48	; 0x30
 8006920:	2b09      	cmp	r3, #9
 8006922:	d94e      	bls.n	80069c2 <_svfiprintf_r+0x17e>
 8006924:	b1b0      	cbz	r0, 8006954 <_svfiprintf_r+0x110>
 8006926:	9207      	str	r2, [sp, #28]
 8006928:	e014      	b.n	8006954 <_svfiprintf_r+0x110>
 800692a:	eba0 0308 	sub.w	r3, r0, r8
 800692e:	fa09 f303 	lsl.w	r3, r9, r3
 8006932:	4313      	orrs	r3, r2
 8006934:	9304      	str	r3, [sp, #16]
 8006936:	46a2      	mov	sl, r4
 8006938:	e7d2      	b.n	80068e0 <_svfiprintf_r+0x9c>
 800693a:	9b03      	ldr	r3, [sp, #12]
 800693c:	1d19      	adds	r1, r3, #4
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	9103      	str	r1, [sp, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	bfbb      	ittet	lt
 8006946:	425b      	neglt	r3, r3
 8006948:	f042 0202 	orrlt.w	r2, r2, #2
 800694c:	9307      	strge	r3, [sp, #28]
 800694e:	9307      	strlt	r3, [sp, #28]
 8006950:	bfb8      	it	lt
 8006952:	9204      	strlt	r2, [sp, #16]
 8006954:	7823      	ldrb	r3, [r4, #0]
 8006956:	2b2e      	cmp	r3, #46	; 0x2e
 8006958:	d10c      	bne.n	8006974 <_svfiprintf_r+0x130>
 800695a:	7863      	ldrb	r3, [r4, #1]
 800695c:	2b2a      	cmp	r3, #42	; 0x2a
 800695e:	d135      	bne.n	80069cc <_svfiprintf_r+0x188>
 8006960:	9b03      	ldr	r3, [sp, #12]
 8006962:	1d1a      	adds	r2, r3, #4
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	9203      	str	r2, [sp, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	bfb8      	it	lt
 800696c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006970:	3402      	adds	r4, #2
 8006972:	9305      	str	r3, [sp, #20]
 8006974:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a40 <_svfiprintf_r+0x1fc>
 8006978:	7821      	ldrb	r1, [r4, #0]
 800697a:	2203      	movs	r2, #3
 800697c:	4650      	mov	r0, sl
 800697e:	f7f9 fc27 	bl	80001d0 <memchr>
 8006982:	b140      	cbz	r0, 8006996 <_svfiprintf_r+0x152>
 8006984:	2340      	movs	r3, #64	; 0x40
 8006986:	eba0 000a 	sub.w	r0, r0, sl
 800698a:	fa03 f000 	lsl.w	r0, r3, r0
 800698e:	9b04      	ldr	r3, [sp, #16]
 8006990:	4303      	orrs	r3, r0
 8006992:	3401      	adds	r4, #1
 8006994:	9304      	str	r3, [sp, #16]
 8006996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800699a:	4826      	ldr	r0, [pc, #152]	; (8006a34 <_svfiprintf_r+0x1f0>)
 800699c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069a0:	2206      	movs	r2, #6
 80069a2:	f7f9 fc15 	bl	80001d0 <memchr>
 80069a6:	2800      	cmp	r0, #0
 80069a8:	d038      	beq.n	8006a1c <_svfiprintf_r+0x1d8>
 80069aa:	4b23      	ldr	r3, [pc, #140]	; (8006a38 <_svfiprintf_r+0x1f4>)
 80069ac:	bb1b      	cbnz	r3, 80069f6 <_svfiprintf_r+0x1b2>
 80069ae:	9b03      	ldr	r3, [sp, #12]
 80069b0:	3307      	adds	r3, #7
 80069b2:	f023 0307 	bic.w	r3, r3, #7
 80069b6:	3308      	adds	r3, #8
 80069b8:	9303      	str	r3, [sp, #12]
 80069ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069bc:	4433      	add	r3, r6
 80069be:	9309      	str	r3, [sp, #36]	; 0x24
 80069c0:	e767      	b.n	8006892 <_svfiprintf_r+0x4e>
 80069c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80069c6:	460c      	mov	r4, r1
 80069c8:	2001      	movs	r0, #1
 80069ca:	e7a5      	b.n	8006918 <_svfiprintf_r+0xd4>
 80069cc:	2300      	movs	r3, #0
 80069ce:	3401      	adds	r4, #1
 80069d0:	9305      	str	r3, [sp, #20]
 80069d2:	4619      	mov	r1, r3
 80069d4:	f04f 0c0a 	mov.w	ip, #10
 80069d8:	4620      	mov	r0, r4
 80069da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069de:	3a30      	subs	r2, #48	; 0x30
 80069e0:	2a09      	cmp	r2, #9
 80069e2:	d903      	bls.n	80069ec <_svfiprintf_r+0x1a8>
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d0c5      	beq.n	8006974 <_svfiprintf_r+0x130>
 80069e8:	9105      	str	r1, [sp, #20]
 80069ea:	e7c3      	b.n	8006974 <_svfiprintf_r+0x130>
 80069ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80069f0:	4604      	mov	r4, r0
 80069f2:	2301      	movs	r3, #1
 80069f4:	e7f0      	b.n	80069d8 <_svfiprintf_r+0x194>
 80069f6:	ab03      	add	r3, sp, #12
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	462a      	mov	r2, r5
 80069fc:	4b0f      	ldr	r3, [pc, #60]	; (8006a3c <_svfiprintf_r+0x1f8>)
 80069fe:	a904      	add	r1, sp, #16
 8006a00:	4638      	mov	r0, r7
 8006a02:	f3af 8000 	nop.w
 8006a06:	1c42      	adds	r2, r0, #1
 8006a08:	4606      	mov	r6, r0
 8006a0a:	d1d6      	bne.n	80069ba <_svfiprintf_r+0x176>
 8006a0c:	89ab      	ldrh	r3, [r5, #12]
 8006a0e:	065b      	lsls	r3, r3, #25
 8006a10:	f53f af2c 	bmi.w	800686c <_svfiprintf_r+0x28>
 8006a14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a16:	b01d      	add	sp, #116	; 0x74
 8006a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a1c:	ab03      	add	r3, sp, #12
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	462a      	mov	r2, r5
 8006a22:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <_svfiprintf_r+0x1f8>)
 8006a24:	a904      	add	r1, sp, #16
 8006a26:	4638      	mov	r0, r7
 8006a28:	f000 f87a 	bl	8006b20 <_printf_i>
 8006a2c:	e7eb      	b.n	8006a06 <_svfiprintf_r+0x1c2>
 8006a2e:	bf00      	nop
 8006a30:	08009148 	.word	0x08009148
 8006a34:	08009152 	.word	0x08009152
 8006a38:	00000000 	.word	0x00000000
 8006a3c:	0800678d 	.word	0x0800678d
 8006a40:	0800914e 	.word	0x0800914e

08006a44 <_printf_common>:
 8006a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a48:	4616      	mov	r6, r2
 8006a4a:	4699      	mov	r9, r3
 8006a4c:	688a      	ldr	r2, [r1, #8]
 8006a4e:	690b      	ldr	r3, [r1, #16]
 8006a50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a54:	4293      	cmp	r3, r2
 8006a56:	bfb8      	it	lt
 8006a58:	4613      	movlt	r3, r2
 8006a5a:	6033      	str	r3, [r6, #0]
 8006a5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a60:	4607      	mov	r7, r0
 8006a62:	460c      	mov	r4, r1
 8006a64:	b10a      	cbz	r2, 8006a6a <_printf_common+0x26>
 8006a66:	3301      	adds	r3, #1
 8006a68:	6033      	str	r3, [r6, #0]
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	0699      	lsls	r1, r3, #26
 8006a6e:	bf42      	ittt	mi
 8006a70:	6833      	ldrmi	r3, [r6, #0]
 8006a72:	3302      	addmi	r3, #2
 8006a74:	6033      	strmi	r3, [r6, #0]
 8006a76:	6825      	ldr	r5, [r4, #0]
 8006a78:	f015 0506 	ands.w	r5, r5, #6
 8006a7c:	d106      	bne.n	8006a8c <_printf_common+0x48>
 8006a7e:	f104 0a19 	add.w	sl, r4, #25
 8006a82:	68e3      	ldr	r3, [r4, #12]
 8006a84:	6832      	ldr	r2, [r6, #0]
 8006a86:	1a9b      	subs	r3, r3, r2
 8006a88:	42ab      	cmp	r3, r5
 8006a8a:	dc26      	bgt.n	8006ada <_printf_common+0x96>
 8006a8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a90:	1e13      	subs	r3, r2, #0
 8006a92:	6822      	ldr	r2, [r4, #0]
 8006a94:	bf18      	it	ne
 8006a96:	2301      	movne	r3, #1
 8006a98:	0692      	lsls	r2, r2, #26
 8006a9a:	d42b      	bmi.n	8006af4 <_printf_common+0xb0>
 8006a9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006aa0:	4649      	mov	r1, r9
 8006aa2:	4638      	mov	r0, r7
 8006aa4:	47c0      	blx	r8
 8006aa6:	3001      	adds	r0, #1
 8006aa8:	d01e      	beq.n	8006ae8 <_printf_common+0xa4>
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	68e5      	ldr	r5, [r4, #12]
 8006aae:	6832      	ldr	r2, [r6, #0]
 8006ab0:	f003 0306 	and.w	r3, r3, #6
 8006ab4:	2b04      	cmp	r3, #4
 8006ab6:	bf08      	it	eq
 8006ab8:	1aad      	subeq	r5, r5, r2
 8006aba:	68a3      	ldr	r3, [r4, #8]
 8006abc:	6922      	ldr	r2, [r4, #16]
 8006abe:	bf0c      	ite	eq
 8006ac0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ac4:	2500      	movne	r5, #0
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	bfc4      	itt	gt
 8006aca:	1a9b      	subgt	r3, r3, r2
 8006acc:	18ed      	addgt	r5, r5, r3
 8006ace:	2600      	movs	r6, #0
 8006ad0:	341a      	adds	r4, #26
 8006ad2:	42b5      	cmp	r5, r6
 8006ad4:	d11a      	bne.n	8006b0c <_printf_common+0xc8>
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	e008      	b.n	8006aec <_printf_common+0xa8>
 8006ada:	2301      	movs	r3, #1
 8006adc:	4652      	mov	r2, sl
 8006ade:	4649      	mov	r1, r9
 8006ae0:	4638      	mov	r0, r7
 8006ae2:	47c0      	blx	r8
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	d103      	bne.n	8006af0 <_printf_common+0xac>
 8006ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8006aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006af0:	3501      	adds	r5, #1
 8006af2:	e7c6      	b.n	8006a82 <_printf_common+0x3e>
 8006af4:	18e1      	adds	r1, r4, r3
 8006af6:	1c5a      	adds	r2, r3, #1
 8006af8:	2030      	movs	r0, #48	; 0x30
 8006afa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006afe:	4422      	add	r2, r4
 8006b00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b08:	3302      	adds	r3, #2
 8006b0a:	e7c7      	b.n	8006a9c <_printf_common+0x58>
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	4622      	mov	r2, r4
 8006b10:	4649      	mov	r1, r9
 8006b12:	4638      	mov	r0, r7
 8006b14:	47c0      	blx	r8
 8006b16:	3001      	adds	r0, #1
 8006b18:	d0e6      	beq.n	8006ae8 <_printf_common+0xa4>
 8006b1a:	3601      	adds	r6, #1
 8006b1c:	e7d9      	b.n	8006ad2 <_printf_common+0x8e>
	...

08006b20 <_printf_i>:
 8006b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b24:	7e0f      	ldrb	r7, [r1, #24]
 8006b26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b28:	2f78      	cmp	r7, #120	; 0x78
 8006b2a:	4691      	mov	r9, r2
 8006b2c:	4680      	mov	r8, r0
 8006b2e:	460c      	mov	r4, r1
 8006b30:	469a      	mov	sl, r3
 8006b32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b36:	d807      	bhi.n	8006b48 <_printf_i+0x28>
 8006b38:	2f62      	cmp	r7, #98	; 0x62
 8006b3a:	d80a      	bhi.n	8006b52 <_printf_i+0x32>
 8006b3c:	2f00      	cmp	r7, #0
 8006b3e:	f000 80d8 	beq.w	8006cf2 <_printf_i+0x1d2>
 8006b42:	2f58      	cmp	r7, #88	; 0x58
 8006b44:	f000 80a3 	beq.w	8006c8e <_printf_i+0x16e>
 8006b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b50:	e03a      	b.n	8006bc8 <_printf_i+0xa8>
 8006b52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b56:	2b15      	cmp	r3, #21
 8006b58:	d8f6      	bhi.n	8006b48 <_printf_i+0x28>
 8006b5a:	a101      	add	r1, pc, #4	; (adr r1, 8006b60 <_printf_i+0x40>)
 8006b5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b60:	08006bb9 	.word	0x08006bb9
 8006b64:	08006bcd 	.word	0x08006bcd
 8006b68:	08006b49 	.word	0x08006b49
 8006b6c:	08006b49 	.word	0x08006b49
 8006b70:	08006b49 	.word	0x08006b49
 8006b74:	08006b49 	.word	0x08006b49
 8006b78:	08006bcd 	.word	0x08006bcd
 8006b7c:	08006b49 	.word	0x08006b49
 8006b80:	08006b49 	.word	0x08006b49
 8006b84:	08006b49 	.word	0x08006b49
 8006b88:	08006b49 	.word	0x08006b49
 8006b8c:	08006cd9 	.word	0x08006cd9
 8006b90:	08006bfd 	.word	0x08006bfd
 8006b94:	08006cbb 	.word	0x08006cbb
 8006b98:	08006b49 	.word	0x08006b49
 8006b9c:	08006b49 	.word	0x08006b49
 8006ba0:	08006cfb 	.word	0x08006cfb
 8006ba4:	08006b49 	.word	0x08006b49
 8006ba8:	08006bfd 	.word	0x08006bfd
 8006bac:	08006b49 	.word	0x08006b49
 8006bb0:	08006b49 	.word	0x08006b49
 8006bb4:	08006cc3 	.word	0x08006cc3
 8006bb8:	682b      	ldr	r3, [r5, #0]
 8006bba:	1d1a      	adds	r2, r3, #4
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	602a      	str	r2, [r5, #0]
 8006bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e0a3      	b.n	8006d14 <_printf_i+0x1f4>
 8006bcc:	6820      	ldr	r0, [r4, #0]
 8006bce:	6829      	ldr	r1, [r5, #0]
 8006bd0:	0606      	lsls	r6, r0, #24
 8006bd2:	f101 0304 	add.w	r3, r1, #4
 8006bd6:	d50a      	bpl.n	8006bee <_printf_i+0xce>
 8006bd8:	680e      	ldr	r6, [r1, #0]
 8006bda:	602b      	str	r3, [r5, #0]
 8006bdc:	2e00      	cmp	r6, #0
 8006bde:	da03      	bge.n	8006be8 <_printf_i+0xc8>
 8006be0:	232d      	movs	r3, #45	; 0x2d
 8006be2:	4276      	negs	r6, r6
 8006be4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006be8:	485e      	ldr	r0, [pc, #376]	; (8006d64 <_printf_i+0x244>)
 8006bea:	230a      	movs	r3, #10
 8006bec:	e019      	b.n	8006c22 <_printf_i+0x102>
 8006bee:	680e      	ldr	r6, [r1, #0]
 8006bf0:	602b      	str	r3, [r5, #0]
 8006bf2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006bf6:	bf18      	it	ne
 8006bf8:	b236      	sxthne	r6, r6
 8006bfa:	e7ef      	b.n	8006bdc <_printf_i+0xbc>
 8006bfc:	682b      	ldr	r3, [r5, #0]
 8006bfe:	6820      	ldr	r0, [r4, #0]
 8006c00:	1d19      	adds	r1, r3, #4
 8006c02:	6029      	str	r1, [r5, #0]
 8006c04:	0601      	lsls	r1, r0, #24
 8006c06:	d501      	bpl.n	8006c0c <_printf_i+0xec>
 8006c08:	681e      	ldr	r6, [r3, #0]
 8006c0a:	e002      	b.n	8006c12 <_printf_i+0xf2>
 8006c0c:	0646      	lsls	r6, r0, #25
 8006c0e:	d5fb      	bpl.n	8006c08 <_printf_i+0xe8>
 8006c10:	881e      	ldrh	r6, [r3, #0]
 8006c12:	4854      	ldr	r0, [pc, #336]	; (8006d64 <_printf_i+0x244>)
 8006c14:	2f6f      	cmp	r7, #111	; 0x6f
 8006c16:	bf0c      	ite	eq
 8006c18:	2308      	moveq	r3, #8
 8006c1a:	230a      	movne	r3, #10
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c22:	6865      	ldr	r5, [r4, #4]
 8006c24:	60a5      	str	r5, [r4, #8]
 8006c26:	2d00      	cmp	r5, #0
 8006c28:	bfa2      	ittt	ge
 8006c2a:	6821      	ldrge	r1, [r4, #0]
 8006c2c:	f021 0104 	bicge.w	r1, r1, #4
 8006c30:	6021      	strge	r1, [r4, #0]
 8006c32:	b90e      	cbnz	r6, 8006c38 <_printf_i+0x118>
 8006c34:	2d00      	cmp	r5, #0
 8006c36:	d04d      	beq.n	8006cd4 <_printf_i+0x1b4>
 8006c38:	4615      	mov	r5, r2
 8006c3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c3e:	fb03 6711 	mls	r7, r3, r1, r6
 8006c42:	5dc7      	ldrb	r7, [r0, r7]
 8006c44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c48:	4637      	mov	r7, r6
 8006c4a:	42bb      	cmp	r3, r7
 8006c4c:	460e      	mov	r6, r1
 8006c4e:	d9f4      	bls.n	8006c3a <_printf_i+0x11a>
 8006c50:	2b08      	cmp	r3, #8
 8006c52:	d10b      	bne.n	8006c6c <_printf_i+0x14c>
 8006c54:	6823      	ldr	r3, [r4, #0]
 8006c56:	07de      	lsls	r6, r3, #31
 8006c58:	d508      	bpl.n	8006c6c <_printf_i+0x14c>
 8006c5a:	6923      	ldr	r3, [r4, #16]
 8006c5c:	6861      	ldr	r1, [r4, #4]
 8006c5e:	4299      	cmp	r1, r3
 8006c60:	bfde      	ittt	le
 8006c62:	2330      	movle	r3, #48	; 0x30
 8006c64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c6c:	1b52      	subs	r2, r2, r5
 8006c6e:	6122      	str	r2, [r4, #16]
 8006c70:	f8cd a000 	str.w	sl, [sp]
 8006c74:	464b      	mov	r3, r9
 8006c76:	aa03      	add	r2, sp, #12
 8006c78:	4621      	mov	r1, r4
 8006c7a:	4640      	mov	r0, r8
 8006c7c:	f7ff fee2 	bl	8006a44 <_printf_common>
 8006c80:	3001      	adds	r0, #1
 8006c82:	d14c      	bne.n	8006d1e <_printf_i+0x1fe>
 8006c84:	f04f 30ff 	mov.w	r0, #4294967295
 8006c88:	b004      	add	sp, #16
 8006c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c8e:	4835      	ldr	r0, [pc, #212]	; (8006d64 <_printf_i+0x244>)
 8006c90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c94:	6829      	ldr	r1, [r5, #0]
 8006c96:	6823      	ldr	r3, [r4, #0]
 8006c98:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c9c:	6029      	str	r1, [r5, #0]
 8006c9e:	061d      	lsls	r5, r3, #24
 8006ca0:	d514      	bpl.n	8006ccc <_printf_i+0x1ac>
 8006ca2:	07df      	lsls	r7, r3, #31
 8006ca4:	bf44      	itt	mi
 8006ca6:	f043 0320 	orrmi.w	r3, r3, #32
 8006caa:	6023      	strmi	r3, [r4, #0]
 8006cac:	b91e      	cbnz	r6, 8006cb6 <_printf_i+0x196>
 8006cae:	6823      	ldr	r3, [r4, #0]
 8006cb0:	f023 0320 	bic.w	r3, r3, #32
 8006cb4:	6023      	str	r3, [r4, #0]
 8006cb6:	2310      	movs	r3, #16
 8006cb8:	e7b0      	b.n	8006c1c <_printf_i+0xfc>
 8006cba:	6823      	ldr	r3, [r4, #0]
 8006cbc:	f043 0320 	orr.w	r3, r3, #32
 8006cc0:	6023      	str	r3, [r4, #0]
 8006cc2:	2378      	movs	r3, #120	; 0x78
 8006cc4:	4828      	ldr	r0, [pc, #160]	; (8006d68 <_printf_i+0x248>)
 8006cc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cca:	e7e3      	b.n	8006c94 <_printf_i+0x174>
 8006ccc:	0659      	lsls	r1, r3, #25
 8006cce:	bf48      	it	mi
 8006cd0:	b2b6      	uxthmi	r6, r6
 8006cd2:	e7e6      	b.n	8006ca2 <_printf_i+0x182>
 8006cd4:	4615      	mov	r5, r2
 8006cd6:	e7bb      	b.n	8006c50 <_printf_i+0x130>
 8006cd8:	682b      	ldr	r3, [r5, #0]
 8006cda:	6826      	ldr	r6, [r4, #0]
 8006cdc:	6961      	ldr	r1, [r4, #20]
 8006cde:	1d18      	adds	r0, r3, #4
 8006ce0:	6028      	str	r0, [r5, #0]
 8006ce2:	0635      	lsls	r5, r6, #24
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	d501      	bpl.n	8006cec <_printf_i+0x1cc>
 8006ce8:	6019      	str	r1, [r3, #0]
 8006cea:	e002      	b.n	8006cf2 <_printf_i+0x1d2>
 8006cec:	0670      	lsls	r0, r6, #25
 8006cee:	d5fb      	bpl.n	8006ce8 <_printf_i+0x1c8>
 8006cf0:	8019      	strh	r1, [r3, #0]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	6123      	str	r3, [r4, #16]
 8006cf6:	4615      	mov	r5, r2
 8006cf8:	e7ba      	b.n	8006c70 <_printf_i+0x150>
 8006cfa:	682b      	ldr	r3, [r5, #0]
 8006cfc:	1d1a      	adds	r2, r3, #4
 8006cfe:	602a      	str	r2, [r5, #0]
 8006d00:	681d      	ldr	r5, [r3, #0]
 8006d02:	6862      	ldr	r2, [r4, #4]
 8006d04:	2100      	movs	r1, #0
 8006d06:	4628      	mov	r0, r5
 8006d08:	f7f9 fa62 	bl	80001d0 <memchr>
 8006d0c:	b108      	cbz	r0, 8006d12 <_printf_i+0x1f2>
 8006d0e:	1b40      	subs	r0, r0, r5
 8006d10:	6060      	str	r0, [r4, #4]
 8006d12:	6863      	ldr	r3, [r4, #4]
 8006d14:	6123      	str	r3, [r4, #16]
 8006d16:	2300      	movs	r3, #0
 8006d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d1c:	e7a8      	b.n	8006c70 <_printf_i+0x150>
 8006d1e:	6923      	ldr	r3, [r4, #16]
 8006d20:	462a      	mov	r2, r5
 8006d22:	4649      	mov	r1, r9
 8006d24:	4640      	mov	r0, r8
 8006d26:	47d0      	blx	sl
 8006d28:	3001      	adds	r0, #1
 8006d2a:	d0ab      	beq.n	8006c84 <_printf_i+0x164>
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	079b      	lsls	r3, r3, #30
 8006d30:	d413      	bmi.n	8006d5a <_printf_i+0x23a>
 8006d32:	68e0      	ldr	r0, [r4, #12]
 8006d34:	9b03      	ldr	r3, [sp, #12]
 8006d36:	4298      	cmp	r0, r3
 8006d38:	bfb8      	it	lt
 8006d3a:	4618      	movlt	r0, r3
 8006d3c:	e7a4      	b.n	8006c88 <_printf_i+0x168>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	4632      	mov	r2, r6
 8006d42:	4649      	mov	r1, r9
 8006d44:	4640      	mov	r0, r8
 8006d46:	47d0      	blx	sl
 8006d48:	3001      	adds	r0, #1
 8006d4a:	d09b      	beq.n	8006c84 <_printf_i+0x164>
 8006d4c:	3501      	adds	r5, #1
 8006d4e:	68e3      	ldr	r3, [r4, #12]
 8006d50:	9903      	ldr	r1, [sp, #12]
 8006d52:	1a5b      	subs	r3, r3, r1
 8006d54:	42ab      	cmp	r3, r5
 8006d56:	dcf2      	bgt.n	8006d3e <_printf_i+0x21e>
 8006d58:	e7eb      	b.n	8006d32 <_printf_i+0x212>
 8006d5a:	2500      	movs	r5, #0
 8006d5c:	f104 0619 	add.w	r6, r4, #25
 8006d60:	e7f5      	b.n	8006d4e <_printf_i+0x22e>
 8006d62:	bf00      	nop
 8006d64:	08009159 	.word	0x08009159
 8006d68:	0800916a 	.word	0x0800916a

08006d6c <memcpy>:
 8006d6c:	440a      	add	r2, r1
 8006d6e:	4291      	cmp	r1, r2
 8006d70:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d74:	d100      	bne.n	8006d78 <memcpy+0xc>
 8006d76:	4770      	bx	lr
 8006d78:	b510      	push	{r4, lr}
 8006d7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d82:	4291      	cmp	r1, r2
 8006d84:	d1f9      	bne.n	8006d7a <memcpy+0xe>
 8006d86:	bd10      	pop	{r4, pc}

08006d88 <memmove>:
 8006d88:	4288      	cmp	r0, r1
 8006d8a:	b510      	push	{r4, lr}
 8006d8c:	eb01 0402 	add.w	r4, r1, r2
 8006d90:	d902      	bls.n	8006d98 <memmove+0x10>
 8006d92:	4284      	cmp	r4, r0
 8006d94:	4623      	mov	r3, r4
 8006d96:	d807      	bhi.n	8006da8 <memmove+0x20>
 8006d98:	1e43      	subs	r3, r0, #1
 8006d9a:	42a1      	cmp	r1, r4
 8006d9c:	d008      	beq.n	8006db0 <memmove+0x28>
 8006d9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006da2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006da6:	e7f8      	b.n	8006d9a <memmove+0x12>
 8006da8:	4402      	add	r2, r0
 8006daa:	4601      	mov	r1, r0
 8006dac:	428a      	cmp	r2, r1
 8006dae:	d100      	bne.n	8006db2 <memmove+0x2a>
 8006db0:	bd10      	pop	{r4, pc}
 8006db2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006db6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006dba:	e7f7      	b.n	8006dac <memmove+0x24>

08006dbc <_free_r>:
 8006dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dbe:	2900      	cmp	r1, #0
 8006dc0:	d044      	beq.n	8006e4c <_free_r+0x90>
 8006dc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dc6:	9001      	str	r0, [sp, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f1a1 0404 	sub.w	r4, r1, #4
 8006dce:	bfb8      	it	lt
 8006dd0:	18e4      	addlt	r4, r4, r3
 8006dd2:	f000 f913 	bl	8006ffc <__malloc_lock>
 8006dd6:	4a1e      	ldr	r2, [pc, #120]	; (8006e50 <_free_r+0x94>)
 8006dd8:	9801      	ldr	r0, [sp, #4]
 8006dda:	6813      	ldr	r3, [r2, #0]
 8006ddc:	b933      	cbnz	r3, 8006dec <_free_r+0x30>
 8006dde:	6063      	str	r3, [r4, #4]
 8006de0:	6014      	str	r4, [r2, #0]
 8006de2:	b003      	add	sp, #12
 8006de4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006de8:	f000 b90e 	b.w	8007008 <__malloc_unlock>
 8006dec:	42a3      	cmp	r3, r4
 8006dee:	d908      	bls.n	8006e02 <_free_r+0x46>
 8006df0:	6825      	ldr	r5, [r4, #0]
 8006df2:	1961      	adds	r1, r4, r5
 8006df4:	428b      	cmp	r3, r1
 8006df6:	bf01      	itttt	eq
 8006df8:	6819      	ldreq	r1, [r3, #0]
 8006dfa:	685b      	ldreq	r3, [r3, #4]
 8006dfc:	1949      	addeq	r1, r1, r5
 8006dfe:	6021      	streq	r1, [r4, #0]
 8006e00:	e7ed      	b.n	8006dde <_free_r+0x22>
 8006e02:	461a      	mov	r2, r3
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	b10b      	cbz	r3, 8006e0c <_free_r+0x50>
 8006e08:	42a3      	cmp	r3, r4
 8006e0a:	d9fa      	bls.n	8006e02 <_free_r+0x46>
 8006e0c:	6811      	ldr	r1, [r2, #0]
 8006e0e:	1855      	adds	r5, r2, r1
 8006e10:	42a5      	cmp	r5, r4
 8006e12:	d10b      	bne.n	8006e2c <_free_r+0x70>
 8006e14:	6824      	ldr	r4, [r4, #0]
 8006e16:	4421      	add	r1, r4
 8006e18:	1854      	adds	r4, r2, r1
 8006e1a:	42a3      	cmp	r3, r4
 8006e1c:	6011      	str	r1, [r2, #0]
 8006e1e:	d1e0      	bne.n	8006de2 <_free_r+0x26>
 8006e20:	681c      	ldr	r4, [r3, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	6053      	str	r3, [r2, #4]
 8006e26:	4421      	add	r1, r4
 8006e28:	6011      	str	r1, [r2, #0]
 8006e2a:	e7da      	b.n	8006de2 <_free_r+0x26>
 8006e2c:	d902      	bls.n	8006e34 <_free_r+0x78>
 8006e2e:	230c      	movs	r3, #12
 8006e30:	6003      	str	r3, [r0, #0]
 8006e32:	e7d6      	b.n	8006de2 <_free_r+0x26>
 8006e34:	6825      	ldr	r5, [r4, #0]
 8006e36:	1961      	adds	r1, r4, r5
 8006e38:	428b      	cmp	r3, r1
 8006e3a:	bf04      	itt	eq
 8006e3c:	6819      	ldreq	r1, [r3, #0]
 8006e3e:	685b      	ldreq	r3, [r3, #4]
 8006e40:	6063      	str	r3, [r4, #4]
 8006e42:	bf04      	itt	eq
 8006e44:	1949      	addeq	r1, r1, r5
 8006e46:	6021      	streq	r1, [r4, #0]
 8006e48:	6054      	str	r4, [r2, #4]
 8006e4a:	e7ca      	b.n	8006de2 <_free_r+0x26>
 8006e4c:	b003      	add	sp, #12
 8006e4e:	bd30      	pop	{r4, r5, pc}
 8006e50:	2000063c 	.word	0x2000063c

08006e54 <sbrk_aligned>:
 8006e54:	b570      	push	{r4, r5, r6, lr}
 8006e56:	4e0e      	ldr	r6, [pc, #56]	; (8006e90 <sbrk_aligned+0x3c>)
 8006e58:	460c      	mov	r4, r1
 8006e5a:	6831      	ldr	r1, [r6, #0]
 8006e5c:	4605      	mov	r5, r0
 8006e5e:	b911      	cbnz	r1, 8006e66 <sbrk_aligned+0x12>
 8006e60:	f000 f8bc 	bl	8006fdc <_sbrk_r>
 8006e64:	6030      	str	r0, [r6, #0]
 8006e66:	4621      	mov	r1, r4
 8006e68:	4628      	mov	r0, r5
 8006e6a:	f000 f8b7 	bl	8006fdc <_sbrk_r>
 8006e6e:	1c43      	adds	r3, r0, #1
 8006e70:	d00a      	beq.n	8006e88 <sbrk_aligned+0x34>
 8006e72:	1cc4      	adds	r4, r0, #3
 8006e74:	f024 0403 	bic.w	r4, r4, #3
 8006e78:	42a0      	cmp	r0, r4
 8006e7a:	d007      	beq.n	8006e8c <sbrk_aligned+0x38>
 8006e7c:	1a21      	subs	r1, r4, r0
 8006e7e:	4628      	mov	r0, r5
 8006e80:	f000 f8ac 	bl	8006fdc <_sbrk_r>
 8006e84:	3001      	adds	r0, #1
 8006e86:	d101      	bne.n	8006e8c <sbrk_aligned+0x38>
 8006e88:	f04f 34ff 	mov.w	r4, #4294967295
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	bd70      	pop	{r4, r5, r6, pc}
 8006e90:	20000640 	.word	0x20000640

08006e94 <_malloc_r>:
 8006e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e98:	1ccd      	adds	r5, r1, #3
 8006e9a:	f025 0503 	bic.w	r5, r5, #3
 8006e9e:	3508      	adds	r5, #8
 8006ea0:	2d0c      	cmp	r5, #12
 8006ea2:	bf38      	it	cc
 8006ea4:	250c      	movcc	r5, #12
 8006ea6:	2d00      	cmp	r5, #0
 8006ea8:	4607      	mov	r7, r0
 8006eaa:	db01      	blt.n	8006eb0 <_malloc_r+0x1c>
 8006eac:	42a9      	cmp	r1, r5
 8006eae:	d905      	bls.n	8006ebc <_malloc_r+0x28>
 8006eb0:	230c      	movs	r3, #12
 8006eb2:	603b      	str	r3, [r7, #0]
 8006eb4:	2600      	movs	r6, #0
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ebc:	4e2e      	ldr	r6, [pc, #184]	; (8006f78 <_malloc_r+0xe4>)
 8006ebe:	f000 f89d 	bl	8006ffc <__malloc_lock>
 8006ec2:	6833      	ldr	r3, [r6, #0]
 8006ec4:	461c      	mov	r4, r3
 8006ec6:	bb34      	cbnz	r4, 8006f16 <_malloc_r+0x82>
 8006ec8:	4629      	mov	r1, r5
 8006eca:	4638      	mov	r0, r7
 8006ecc:	f7ff ffc2 	bl	8006e54 <sbrk_aligned>
 8006ed0:	1c43      	adds	r3, r0, #1
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	d14d      	bne.n	8006f72 <_malloc_r+0xde>
 8006ed6:	6834      	ldr	r4, [r6, #0]
 8006ed8:	4626      	mov	r6, r4
 8006eda:	2e00      	cmp	r6, #0
 8006edc:	d140      	bne.n	8006f60 <_malloc_r+0xcc>
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	4631      	mov	r1, r6
 8006ee2:	4638      	mov	r0, r7
 8006ee4:	eb04 0803 	add.w	r8, r4, r3
 8006ee8:	f000 f878 	bl	8006fdc <_sbrk_r>
 8006eec:	4580      	cmp	r8, r0
 8006eee:	d13a      	bne.n	8006f66 <_malloc_r+0xd2>
 8006ef0:	6821      	ldr	r1, [r4, #0]
 8006ef2:	3503      	adds	r5, #3
 8006ef4:	1a6d      	subs	r5, r5, r1
 8006ef6:	f025 0503 	bic.w	r5, r5, #3
 8006efa:	3508      	adds	r5, #8
 8006efc:	2d0c      	cmp	r5, #12
 8006efe:	bf38      	it	cc
 8006f00:	250c      	movcc	r5, #12
 8006f02:	4629      	mov	r1, r5
 8006f04:	4638      	mov	r0, r7
 8006f06:	f7ff ffa5 	bl	8006e54 <sbrk_aligned>
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	d02b      	beq.n	8006f66 <_malloc_r+0xd2>
 8006f0e:	6823      	ldr	r3, [r4, #0]
 8006f10:	442b      	add	r3, r5
 8006f12:	6023      	str	r3, [r4, #0]
 8006f14:	e00e      	b.n	8006f34 <_malloc_r+0xa0>
 8006f16:	6822      	ldr	r2, [r4, #0]
 8006f18:	1b52      	subs	r2, r2, r5
 8006f1a:	d41e      	bmi.n	8006f5a <_malloc_r+0xc6>
 8006f1c:	2a0b      	cmp	r2, #11
 8006f1e:	d916      	bls.n	8006f4e <_malloc_r+0xba>
 8006f20:	1961      	adds	r1, r4, r5
 8006f22:	42a3      	cmp	r3, r4
 8006f24:	6025      	str	r5, [r4, #0]
 8006f26:	bf18      	it	ne
 8006f28:	6059      	strne	r1, [r3, #4]
 8006f2a:	6863      	ldr	r3, [r4, #4]
 8006f2c:	bf08      	it	eq
 8006f2e:	6031      	streq	r1, [r6, #0]
 8006f30:	5162      	str	r2, [r4, r5]
 8006f32:	604b      	str	r3, [r1, #4]
 8006f34:	4638      	mov	r0, r7
 8006f36:	f104 060b 	add.w	r6, r4, #11
 8006f3a:	f000 f865 	bl	8007008 <__malloc_unlock>
 8006f3e:	f026 0607 	bic.w	r6, r6, #7
 8006f42:	1d23      	adds	r3, r4, #4
 8006f44:	1af2      	subs	r2, r6, r3
 8006f46:	d0b6      	beq.n	8006eb6 <_malloc_r+0x22>
 8006f48:	1b9b      	subs	r3, r3, r6
 8006f4a:	50a3      	str	r3, [r4, r2]
 8006f4c:	e7b3      	b.n	8006eb6 <_malloc_r+0x22>
 8006f4e:	6862      	ldr	r2, [r4, #4]
 8006f50:	42a3      	cmp	r3, r4
 8006f52:	bf0c      	ite	eq
 8006f54:	6032      	streq	r2, [r6, #0]
 8006f56:	605a      	strne	r2, [r3, #4]
 8006f58:	e7ec      	b.n	8006f34 <_malloc_r+0xa0>
 8006f5a:	4623      	mov	r3, r4
 8006f5c:	6864      	ldr	r4, [r4, #4]
 8006f5e:	e7b2      	b.n	8006ec6 <_malloc_r+0x32>
 8006f60:	4634      	mov	r4, r6
 8006f62:	6876      	ldr	r6, [r6, #4]
 8006f64:	e7b9      	b.n	8006eda <_malloc_r+0x46>
 8006f66:	230c      	movs	r3, #12
 8006f68:	603b      	str	r3, [r7, #0]
 8006f6a:	4638      	mov	r0, r7
 8006f6c:	f000 f84c 	bl	8007008 <__malloc_unlock>
 8006f70:	e7a1      	b.n	8006eb6 <_malloc_r+0x22>
 8006f72:	6025      	str	r5, [r4, #0]
 8006f74:	e7de      	b.n	8006f34 <_malloc_r+0xa0>
 8006f76:	bf00      	nop
 8006f78:	2000063c 	.word	0x2000063c

08006f7c <_realloc_r>:
 8006f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f80:	4680      	mov	r8, r0
 8006f82:	4614      	mov	r4, r2
 8006f84:	460e      	mov	r6, r1
 8006f86:	b921      	cbnz	r1, 8006f92 <_realloc_r+0x16>
 8006f88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f8c:	4611      	mov	r1, r2
 8006f8e:	f7ff bf81 	b.w	8006e94 <_malloc_r>
 8006f92:	b92a      	cbnz	r2, 8006fa0 <_realloc_r+0x24>
 8006f94:	f7ff ff12 	bl	8006dbc <_free_r>
 8006f98:	4625      	mov	r5, r4
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fa0:	f000 f838 	bl	8007014 <_malloc_usable_size_r>
 8006fa4:	4284      	cmp	r4, r0
 8006fa6:	4607      	mov	r7, r0
 8006fa8:	d802      	bhi.n	8006fb0 <_realloc_r+0x34>
 8006faa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006fae:	d812      	bhi.n	8006fd6 <_realloc_r+0x5a>
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	4640      	mov	r0, r8
 8006fb4:	f7ff ff6e 	bl	8006e94 <_malloc_r>
 8006fb8:	4605      	mov	r5, r0
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	d0ed      	beq.n	8006f9a <_realloc_r+0x1e>
 8006fbe:	42bc      	cmp	r4, r7
 8006fc0:	4622      	mov	r2, r4
 8006fc2:	4631      	mov	r1, r6
 8006fc4:	bf28      	it	cs
 8006fc6:	463a      	movcs	r2, r7
 8006fc8:	f7ff fed0 	bl	8006d6c <memcpy>
 8006fcc:	4631      	mov	r1, r6
 8006fce:	4640      	mov	r0, r8
 8006fd0:	f7ff fef4 	bl	8006dbc <_free_r>
 8006fd4:	e7e1      	b.n	8006f9a <_realloc_r+0x1e>
 8006fd6:	4635      	mov	r5, r6
 8006fd8:	e7df      	b.n	8006f9a <_realloc_r+0x1e>
	...

08006fdc <_sbrk_r>:
 8006fdc:	b538      	push	{r3, r4, r5, lr}
 8006fde:	4d06      	ldr	r5, [pc, #24]	; (8006ff8 <_sbrk_r+0x1c>)
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	4608      	mov	r0, r1
 8006fe6:	602b      	str	r3, [r5, #0]
 8006fe8:	f7fa fe44 	bl	8001c74 <_sbrk>
 8006fec:	1c43      	adds	r3, r0, #1
 8006fee:	d102      	bne.n	8006ff6 <_sbrk_r+0x1a>
 8006ff0:	682b      	ldr	r3, [r5, #0]
 8006ff2:	b103      	cbz	r3, 8006ff6 <_sbrk_r+0x1a>
 8006ff4:	6023      	str	r3, [r4, #0]
 8006ff6:	bd38      	pop	{r3, r4, r5, pc}
 8006ff8:	20000644 	.word	0x20000644

08006ffc <__malloc_lock>:
 8006ffc:	4801      	ldr	r0, [pc, #4]	; (8007004 <__malloc_lock+0x8>)
 8006ffe:	f000 b811 	b.w	8007024 <__retarget_lock_acquire_recursive>
 8007002:	bf00      	nop
 8007004:	20000648 	.word	0x20000648

08007008 <__malloc_unlock>:
 8007008:	4801      	ldr	r0, [pc, #4]	; (8007010 <__malloc_unlock+0x8>)
 800700a:	f000 b80c 	b.w	8007026 <__retarget_lock_release_recursive>
 800700e:	bf00      	nop
 8007010:	20000648 	.word	0x20000648

08007014 <_malloc_usable_size_r>:
 8007014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007018:	1f18      	subs	r0, r3, #4
 800701a:	2b00      	cmp	r3, #0
 800701c:	bfbc      	itt	lt
 800701e:	580b      	ldrlt	r3, [r1, r0]
 8007020:	18c0      	addlt	r0, r0, r3
 8007022:	4770      	bx	lr

08007024 <__retarget_lock_acquire_recursive>:
 8007024:	4770      	bx	lr

08007026 <__retarget_lock_release_recursive>:
 8007026:	4770      	bx	lr

08007028 <_init>:
 8007028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702a:	bf00      	nop
 800702c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800702e:	bc08      	pop	{r3}
 8007030:	469e      	mov	lr, r3
 8007032:	4770      	bx	lr

08007034 <_fini>:
 8007034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007036:	bf00      	nop
 8007038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800703a:	bc08      	pop	{r3}
 800703c:	469e      	mov	lr, r3
 800703e:	4770      	bx	lr
